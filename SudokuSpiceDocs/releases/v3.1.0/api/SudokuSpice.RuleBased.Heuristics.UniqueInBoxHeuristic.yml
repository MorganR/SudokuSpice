### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  id: UniqueInBoxHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  children:
  - SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  - SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.ReadOnlySpan{SudokuSpice.RuleBased.Rules.IRule})
  - SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  - SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate
  - SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll
  langs:
  - csharp
  - vb
  name: UniqueInBoxHeuristic
  nameWithType: UniqueInBoxHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInBoxHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: UniqueInBoxHeuristic
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInBoxHeuristic.cs
    startLine: 15
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nChecks for any squares that are the unique provider of a given possible value within a box.\nSets the possible values for those squares to just their unique value.\n\nFor example, if a box had three unset squares with possible values: <code>A: [1, 2]</code>,\n<code>B: [1, 2]</code>, and <code>C: [1, 2, 3]</code>, then this would set <code>C</code>&apos;s possible values\nto <code>[3]</code>.\n"
  example: []
  syntax:
    content: 'public class UniqueInBoxHeuristic : IHeuristic'
    content.vb: >-
      Public Class UniqueInBoxHeuristic

          Implements IHeuristic
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.RuleBased.Heuristics.IHeuristic
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  id: '#ctor(SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)'
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  langs:
  - csharp
  - vb
  name: UniqueInBoxHeuristic(IMissingBoxValuesTracker)
  nameWithType: UniqueInBoxHeuristic.UniqueInBoxHeuristic(IMissingBoxValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UniqueInBoxHeuristic(SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInBoxHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInBoxHeuristic.cs
    startLine: 29
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nCreates the heuristic.\n"
  example: []
  syntax:
    content: public UniqueInBoxHeuristic(IMissingBoxValuesTracker boxValuesTracker)
    parameters:
    - id: boxValuesTracker
      type: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
      description: "\nSomething that tracks the possible values for each box. Rules often do this already,\nfor example.\n"
    content.vb: Public Sub New(boxValuesTracker As IMissingBoxValuesTracker)
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.ReadOnlySpan{SudokuSpice.RuleBased.Rules.IRule})
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.ReadOnlySpan{SudokuSpice.RuleBased.Rules.IRule})
  id: CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.ReadOnlySpan{SudokuSpice.RuleBased.Rules.IRule})
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  langs:
  - csharp
  - vb
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, ReadOnlySpan<IRule>)
  nameWithType: UniqueInBoxHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, ReadOnlySpan<IRule>)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.ReadOnlySpan<SudokuSpice.RuleBased.Rules.IRule>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInBoxHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CopyWithNewReferences
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInBoxHeuristic.cs
    startLine: 52
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nCreates a deep copy of this heuristic. Requires <code>rules</code> to contain an\n<xref href=\"SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IHeuristic CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues puzzle, ReadOnlySpan<IRule> rules)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    - id: rules
      type: System.ReadOnlySpan{SudokuSpice.RuleBased.Rules.IRule}
    return:
      type: SudokuSpice.RuleBased.Heuristics.IHeuristic
    content.vb: Public Function CopyWithNewReferences(puzzle As IReadOnlyPuzzleWithMutablePossibleValues, rules As ReadOnlySpan(Of IRule)) As IHeuristic
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences*
  implements:
  - SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.ReadOnlySpan{SudokuSpice.RuleBased.Rules.IRule})
  nameWithType.vb: UniqueInBoxHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, ReadOnlySpan(Of IRule))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.ReadOnlySpan(Of SudokuSpice.RuleBased.Rules.IRule))
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, ReadOnlySpan(Of IRule))
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  id: TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  langs:
  - csharp
  - vb
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInBoxHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInBoxHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: TryInitFor
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInBoxHeuristic.cs
    startLine: 72
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  example: []
  syntax:
    content: public bool TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    return:
      type: System.Boolean
    content.vb: Public Function TryInitFor(puzzle As IReadOnlyPuzzleWithMutablePossibleValues) As Boolean
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor*
  implements:
  - SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll
  id: UpdateAll
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  langs:
  - csharp
  - vb
  name: UpdateAll()
  nameWithType: UniqueInBoxHeuristic.UpdateAll()
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInBoxHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: UpdateAll
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInBoxHeuristic.cs
    startLine: 81
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  example: []
  syntax:
    content: public bool UpdateAll()
    return:
      type: System.Boolean
    content.vb: Public Function UpdateAll As Boolean
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll*
  implements:
  - SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate
  id: UndoLastUpdate
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  langs:
  - csharp
  - vb
  name: UndoLastUpdate()
  nameWithType: UniqueInBoxHeuristic.UndoLastUpdate()
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInBoxHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: UndoLastUpdate
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInBoxHeuristic.cs
    startLine: 98
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  example: []
  syntax:
    content: public void UndoLastUpdate()
    content.vb: Public Sub UndoLastUpdate
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate*
  implements:
  - SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.RuleBased.Heuristics
  commentId: N:SudokuSpice.RuleBased.Heuristics
  name: SudokuSpice.RuleBased.Heuristics
  nameWithType: SudokuSpice.RuleBased.Heuristics
  fullName: SudokuSpice.RuleBased.Heuristics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.IHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  name: IHeuristic
  nameWithType: IHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor
  name: UniqueInBoxHeuristic
  nameWithType: UniqueInBoxHeuristic.UniqueInBoxHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UniqueInBoxHeuristic
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingBoxValuesTracker
  nameWithType: IMissingBoxValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
- uid: SudokuSpice.RuleBased.Rules
  commentId: N:SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences
  name: CopyWithNewReferences
  nameWithType: UniqueInBoxHeuristic.CopyWithNewReferences
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.ReadOnlySpan{SudokuSpice.RuleBased.Rules.IRule})
  commentId: M:SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.ReadOnlySpan{SudokuSpice.RuleBased.Rules.IRule})
  parent: SudokuSpice.RuleBased.Heuristics.IHeuristic
  isExternal: true
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, ReadOnlySpan<IRule>)
  nameWithType: IHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, ReadOnlySpan<IRule>)
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.ReadOnlySpan<SudokuSpice.RuleBased.Rules.IRule>)
  nameWithType.vb: IHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, ReadOnlySpan(Of IRule))
  fullName.vb: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.ReadOnlySpan(Of SudokuSpice.RuleBased.Rules.IRule))
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, ReadOnlySpan(Of IRule))
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.ReadOnlySpan{SudokuSpice.RuleBased.Rules.IRule})
    name: CopyWithNewReferences
    nameWithType: IHeuristic.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.IRule
    name: IRule
    nameWithType: IRule
    fullName: SudokuSpice.RuleBased.Rules.IRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.ReadOnlySpan{SudokuSpice.RuleBased.Rules.IRule})
    name: CopyWithNewReferences
    nameWithType: IHeuristic.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.IRule
    name: IRule
    nameWithType: IRule
    fullName: SudokuSpice.RuleBased.Rules.IRule
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzleWithMutablePossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
- uid: System.ReadOnlySpan{SudokuSpice.RuleBased.Rules.IRule}
  commentId: T:System.ReadOnlySpan{SudokuSpice.RuleBased.Rules.IRule}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<IRule>
  nameWithType: ReadOnlySpan<IRule>
  fullName: System.ReadOnlySpan<SudokuSpice.RuleBased.Rules.IRule>
  nameWithType.vb: ReadOnlySpan(Of IRule)
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.RuleBased.Rules.IRule)
  name.vb: ReadOnlySpan(Of IRule)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.IRule
    name: IRule
    nameWithType: IRule
    fullName: SudokuSpice.RuleBased.Rules.IRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.IRule
    name: IRule
    nameWithType: IRule
    fullName: SudokuSpice.RuleBased.Rules.IRule
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor
  name: TryInitFor
  nameWithType: UniqueInBoxHeuristic.TryInitFor
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.Heuristics.IHeuristic
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: IHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: TryInitFor
    nameWithType: IHeuristic.TryInitFor
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: TryInitFor
    nameWithType: IHeuristic.TryInitFor
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll
  name: UpdateAll
  nameWithType: UniqueInBoxHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  parent: SudokuSpice.RuleBased.Heuristics.IHeuristic
  name: UpdateAll()
  nameWithType: IHeuristic.UpdateAll()
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
    name: UpdateAll
    nameWithType: IHeuristic.UpdateAll
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
    name: UpdateAll
    nameWithType: IHeuristic.UpdateAll
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate
  name: UndoLastUpdate
  nameWithType: UniqueInBoxHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  parent: SudokuSpice.RuleBased.Heuristics.IHeuristic
  name: UndoLastUpdate()
  nameWithType: IHeuristic.UndoLastUpdate()
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
    name: UndoLastUpdate
    nameWithType: IHeuristic.UndoLastUpdate
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
    name: UndoLastUpdate
    nameWithType: IHeuristic.UndoLastUpdate
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
