### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  commentId: T:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  id: MagicSquaresConstraint
  parent: SudokuSpice.ConstraintBased.Constraints
  children:
  - SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor(System.ReadOnlySpan{System.Int32},System.Collections.Generic.IEnumerable{SudokuSpice.Box},System.Boolean)
  - SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  langs:
  - csharp
  - vb
  name: MagicSquaresConstraint
  nameWithType: MagicSquaresConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/MagicSquaresConstraint.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: MagicSquaresConstraint
    path: ../SudokuSpice/ConstraintBased/Constraints/MagicSquaresConstraint.cs
    startLine: 49
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nEnforces a constraint that certain regions in a puzzle must be\n<a href=\"https://en.wikipedia.org/wiki/Magic_square\">magic squares</a>, i.e. the sums of the\nvalues in each of their rows, columns, and (optionally) their diagonals add up to the same\nvalue.\n\nNote that this does <em>not</em> enforce uniqueness of values within the magic square as a\nwhole. It <em>does</em>, however, prevent value duplication within each row, column, and/or\ndiagonal. This can be combined with the <xref href=\"SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint\" data-throw-if-not-resolved=\"false\"></xref> if you need\nbox-level uniqueness.\n"
  remarks: "\nThis makes use of <xref href=\"SudokuSpice.ConstraintBased.OptionalObjective\" data-throw-if-not-resolved=\"false\"></xref> objects to construct a complicated graph.\n\nFor example, in a standard 3x3 magic square for a standard 9x9 Sudoku puzzle, the magic sum\n(i.e. required sum for each row/column/diagonal) is 15. This can be formed through various\ncombinations, eg:\n\n* 1,5,9\n* 1,6,8\n...\n\nFor each row or column or diagonal, this looks at the existing values to determine the\npossible sets. It drops impossible <xref href=\"SudokuSpice.ConstraintBased.Possibility\" data-throw-if-not-resolved=\"false\"></xref> objects, and groups the\nremaining possibilities as follows (using the 1,5,9 set as an example):\n\nIn this row/column/diagonal, create an optional objective to require that a single 1 is\nselected from these squares. Repeat for the 5 and the 9. \n\nThen, group each of these optional objectives into another optional objective that requires\nall of them to be satisfied. This defines an individual possible set for this\nrow/column/diagonal.\n\nRepeat this for all the possible sets on this row/column/diagonal. Reuse groups where\npossible, for example set 1,6,8 would use the same &quot;1&quot; grouping from set 1,5,8.\n\nNow group all these optional set objectives into a single required objective that can be\nsatisfied by any of these optional sets.\n\nIn the end, this results in a single required objective for each row/column/diagonal,\nenforcing that this row/column/diagonal is composed of one of the possible sets.\n"
  example: []
  syntax:
    content: 'public class MagicSquaresConstraint : IConstraint'
    content.vb: >-
      Public Class MagicSquaresConstraint

          Implements IConstraint
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.ConstraintBased.Constraints.IConstraint
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor(System.ReadOnlySpan{System.Int32},System.Collections.Generic.IEnumerable{SudokuSpice.Box},System.Boolean)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor(System.ReadOnlySpan{System.Int32},System.Collections.Generic.IEnumerable{SudokuSpice.Box},System.Boolean)
  id: '#ctor(System.ReadOnlySpan{System.Int32},System.Collections.Generic.IEnumerable{SudokuSpice.Box},System.Boolean)'
  parent: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  langs:
  - csharp
  - vb
  name: MagicSquaresConstraint(ReadOnlySpan<Int32>, IEnumerable<Box>, Boolean)
  nameWithType: MagicSquaresConstraint.MagicSquaresConstraint(ReadOnlySpan<Int32>, IEnumerable<Box>, Boolean)
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.MagicSquaresConstraint(System.ReadOnlySpan<System.Int32>, System.Collections.Generic.IEnumerable<SudokuSpice.Box>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/MagicSquaresConstraint.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/ConstraintBased/Constraints/MagicSquaresConstraint.cs
    startLine: 75
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nConstructs a constraint that will enforce that the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code> are\nmagic squares based on the rows, columns, and, optionally, the diagonals.\n"
  example: []
  syntax:
    content: public MagicSquaresConstraint(ReadOnlySpan<int> possibleValues, IEnumerable<Box> squares, bool includeDiagonals = true)
    parameters:
    - id: possibleValues
      type: System.ReadOnlySpan{System.Int32}
      description: "\nThe possible values that can be in the magic squares.\n"
    - id: squares
      type: System.Collections.Generic.IEnumerable{SudokuSpice.Box}
      description: "\nThe locations of the magic squares.\n"
    - id: includeDiagonals
      type: System.Boolean
      description: "\nIf true, values along the diagonals of the square must also sum to the magic number.\n"
    content.vb: Public Sub New(possibleValues As ReadOnlySpan(Of Integer), squares As IEnumerable(Of Box), includeDiagonals As Boolean = True)
  overload: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf the any of the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code>&apos; sizes are not compatible with the\nlength of <code data-dev-comment-type=\"paramref\" class=\"paramref\">possibleValues</code>.\n"
  nameWithType.vb: MagicSquaresConstraint.MagicSquaresConstraint(ReadOnlySpan(Of Int32), IEnumerable(Of Box), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.MagicSquaresConstraint(System.ReadOnlySpan(Of System.Int32), System.Collections.Generic.IEnumerable(Of SudokuSpice.Box), System.Boolean)
  name.vb: MagicSquaresConstraint(ReadOnlySpan(Of Int32), IEnumerable(Of Box), Boolean)
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  id: TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  parent: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  langs:
  - csharp
  - vb
  name: TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  nameWithType: MagicSquaresConstraint.TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverGraph)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/MagicSquaresConstraint.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: TryConstrain
    path: ../SudokuSpice/ConstraintBased/Constraints/MagicSquaresConstraint.cs
    startLine: 103
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  example: []
  syntax:
    content: public bool TryConstrain(IReadOnlyPuzzle puzzle, ExactCoverGraph graph)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
    - id: graph
      type: SudokuSpice.ConstraintBased.ExactCoverGraph
    return:
      type: System.Boolean
    content.vb: Public Function TryConstrain(puzzle As IReadOnlyPuzzle, graph As ExactCoverGraph) As Boolean
  overload: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain*
  implements:
  - SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  commentId: T:SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  name: BoxUniquenessConstraint
  nameWithType: BoxUniquenessConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
- uid: SudokuSpice.ConstraintBased.OptionalObjective
  commentId: T:SudokuSpice.ConstraintBased.OptionalObjective
  parent: SudokuSpice.ConstraintBased
  name: OptionalObjective
  nameWithType: OptionalObjective
  fullName: SudokuSpice.ConstraintBased.OptionalObjective
- uid: SudokuSpice.ConstraintBased.Possibility
  commentId: T:SudokuSpice.ConstraintBased.Possibility
  name: Possibility
  nameWithType: Possibility
  fullName: SudokuSpice.ConstraintBased.Possibility
- uid: SudokuSpice.ConstraintBased.Constraints
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint
  commentId: T:SudokuSpice.ConstraintBased.Constraints.IConstraint
  parent: SudokuSpice.ConstraintBased.Constraints
  name: IConstraint
  nameWithType: IConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor
  name: MagicSquaresConstraint
  nameWithType: MagicSquaresConstraint.MagicSquaresConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.MagicSquaresConstraint
- uid: System.ReadOnlySpan{System.Int32}
  commentId: T:System.ReadOnlySpan{System.Int32}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Int32>
  nameWithType: ReadOnlySpan<Int32>
  fullName: System.ReadOnlySpan<System.Int32>
  nameWithType.vb: ReadOnlySpan(Of Int32)
  fullName.vb: System.ReadOnlySpan(Of System.Int32)
  name.vb: ReadOnlySpan(Of Int32)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SudokuSpice.Box}
  commentId: T:System.Collections.Generic.IEnumerable{SudokuSpice.Box}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Box>
  nameWithType: IEnumerable<Box>
  fullName: System.Collections.Generic.IEnumerable<SudokuSpice.Box>
  nameWithType.vb: IEnumerable(Of Box)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SudokuSpice.Box)
  name.vb: IEnumerable(Of Box)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Box
    name: Box
    nameWithType: Box
    fullName: SudokuSpice.Box
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Box
    name: Box
    nameWithType: Box
    fullName: SudokuSpice.Box
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain
  name: TryConstrain
  nameWithType: MagicSquaresConstraint.TryConstrain
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  parent: SudokuSpice.ConstraintBased.Constraints.IConstraint
  name: TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  nameWithType: IConstraint.TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverGraph)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
    name: TryConstrain
    nameWithType: IConstraint.TryConstrain
    fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.ConstraintBased.ExactCoverGraph
    name: ExactCoverGraph
    nameWithType: ExactCoverGraph
    fullName: SudokuSpice.ConstraintBased.ExactCoverGraph
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
    name: TryConstrain
    nameWithType: IConstraint.TryConstrain
    fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.ConstraintBased.ExactCoverGraph
    name: ExactCoverGraph
    nameWithType: ExactCoverGraph
    fullName: SudokuSpice.ConstraintBased.ExactCoverGraph
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverGraph
  parent: SudokuSpice.ConstraintBased
  name: ExactCoverGraph
  nameWithType: ExactCoverGraph
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
