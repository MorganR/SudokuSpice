### YamlMime:ManagedReference
items:
- uid: SudokuSpice.MagicSquares
  commentId: T:SudokuSpice.MagicSquares
  id: MagicSquares
  parent: SudokuSpice
  children:
  - SudokuSpice.MagicSquares.ComputeSets(SudokuSpice.ReadOnlySpan{System.Int32})
  - SudokuSpice.MagicSquares.ComputeSets(SudokuSpice.ReadOnlySpan{System.Int32},System.Int32,SudokuSpice.BitVector)
  - SudokuSpice.MagicSquares.ComputeSum(SudokuSpice.ReadOnlySpan{System.Int32})
  langs:
  - csharp
  - vb
  name: MagicSquares
  nameWithType: MagicSquares
  fullName: SudokuSpice.MagicSquares
  type: Class
  source:
    remote:
      path: SudokuSpice/MagicSquares.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: MagicSquares
    path: ../SudokuSpice/MagicSquares.cs
    startLine: 7
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: 'public static class MagicSquares : object'
    content.vb: >-
      Public Module MagicSquares
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SudokuSpice.MagicSquares.ComputeSum(SudokuSpice.ReadOnlySpan{System.Int32})
  commentId: M:SudokuSpice.MagicSquares.ComputeSum(SudokuSpice.ReadOnlySpan{System.Int32})
  id: ComputeSum(SudokuSpice.ReadOnlySpan{System.Int32})
  parent: SudokuSpice.MagicSquares
  langs:
  - csharp
  - vb
  name: ComputeSum(ReadOnlySpan<Int32>)
  nameWithType: MagicSquares.ComputeSum(ReadOnlySpan<Int32>)
  fullName: SudokuSpice.MagicSquares.ComputeSum(SudokuSpice.ReadOnlySpan<System.Int32>)
  type: Method
  source:
    remote:
      path: SudokuSpice/MagicSquares.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ComputeSum
    path: ../SudokuSpice/MagicSquares.cs
    startLine: 9
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public static int ComputeSum(ReadOnlySpan<int> values)
    parameters:
    - id: values
      type: SudokuSpice.ReadOnlySpan{System.Int32}
    return:
      type: System.Int32
    content.vb: Public Shared Function ComputeSum(values As ReadOnlySpan(Of Integer)) As Integer
  overload: SudokuSpice.MagicSquares.ComputeSum*
  nameWithType.vb: MagicSquares.ComputeSum(ReadOnlySpan(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.MagicSquares.ComputeSum(SudokuSpice.ReadOnlySpan(Of System.Int32))
  name.vb: ComputeSum(ReadOnlySpan(Of Int32))
- uid: SudokuSpice.MagicSquares.ComputeSets(SudokuSpice.ReadOnlySpan{System.Int32})
  commentId: M:SudokuSpice.MagicSquares.ComputeSets(SudokuSpice.ReadOnlySpan{System.Int32})
  id: ComputeSets(SudokuSpice.ReadOnlySpan{System.Int32})
  parent: SudokuSpice.MagicSquares
  langs:
  - csharp
  - vb
  name: ComputeSets(ReadOnlySpan<Int32>)
  nameWithType: MagicSquares.ComputeSets(ReadOnlySpan<Int32>)
  fullName: SudokuSpice.MagicSquares.ComputeSets(SudokuSpice.ReadOnlySpan<System.Int32>)
  type: Method
  source:
    remote:
      path: SudokuSpice/MagicSquares.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ComputeSets
    path: ../SudokuSpice/MagicSquares.cs
    startLine: 15
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public static HashSet<BitVector> ComputeSets(ReadOnlySpan<int> values)
    parameters:
    - id: values
      type: SudokuSpice.ReadOnlySpan{System.Int32}
    return:
      type: HashSet{SudokuSpice.BitVector}
    content.vb: Public Shared Function ComputeSets(values As ReadOnlySpan(Of Integer)) As HashSet(Of BitVector)
  overload: SudokuSpice.MagicSquares.ComputeSets*
  nameWithType.vb: MagicSquares.ComputeSets(ReadOnlySpan(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.MagicSquares.ComputeSets(SudokuSpice.ReadOnlySpan(Of System.Int32))
  name.vb: ComputeSets(ReadOnlySpan(Of Int32))
- uid: SudokuSpice.MagicSquares.ComputeSets(SudokuSpice.ReadOnlySpan{System.Int32},System.Int32,SudokuSpice.BitVector)
  commentId: M:SudokuSpice.MagicSquares.ComputeSets(SudokuSpice.ReadOnlySpan{System.Int32},System.Int32,SudokuSpice.BitVector)
  id: ComputeSets(SudokuSpice.ReadOnlySpan{System.Int32},System.Int32,SudokuSpice.BitVector)
  parent: SudokuSpice.MagicSquares
  langs:
  - csharp
  - vb
  name: ComputeSets(ReadOnlySpan<Int32>, Int32, BitVector)
  nameWithType: MagicSquares.ComputeSets(ReadOnlySpan<Int32>, Int32, BitVector)
  fullName: SudokuSpice.MagicSquares.ComputeSets(SudokuSpice.ReadOnlySpan<System.Int32>, System.Int32, SudokuSpice.BitVector)
  type: Method
  source:
    remote:
      path: SudokuSpice/MagicSquares.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ComputeSets
    path: ../SudokuSpice/MagicSquares.cs
    startLine: 30
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public static HashSet<BitVector> ComputeSets(ReadOnlySpan<int> values, int boxSize, BitVector allPossibleValues)
    parameters:
    - id: values
      type: SudokuSpice.ReadOnlySpan{System.Int32}
    - id: boxSize
      type: System.Int32
    - id: allPossibleValues
      type: SudokuSpice.BitVector
    return:
      type: HashSet{SudokuSpice.BitVector}
    content.vb: Public Shared Function ComputeSets(values As ReadOnlySpan(Of Integer), boxSize As Integer, allPossibleValues As BitVector) As HashSet(Of BitVector)
  overload: SudokuSpice.MagicSquares.ComputeSets*
  nameWithType.vb: MagicSquares.ComputeSets(ReadOnlySpan(Of Int32), Int32, BitVector)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.MagicSquares.ComputeSets(SudokuSpice.ReadOnlySpan(Of System.Int32), System.Int32, SudokuSpice.BitVector)
  name.vb: ComputeSets(ReadOnlySpan(Of Int32), Int32, BitVector)
references:
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.MagicSquares.ComputeSum*
  commentId: Overload:SudokuSpice.MagicSquares.ComputeSum
  name: ComputeSum
  nameWithType: MagicSquares.ComputeSum
  fullName: SudokuSpice.MagicSquares.ComputeSum
- uid: SudokuSpice.ReadOnlySpan{System.Int32}
  commentId: '!:SudokuSpice.ReadOnlySpan{System.Int32}'
  definition: SudokuSpice.ReadOnlySpan`1
  name: ReadOnlySpan<Int32>
  nameWithType: ReadOnlySpan<Int32>
  fullName: SudokuSpice.ReadOnlySpan<System.Int32>
  nameWithType.vb: ReadOnlySpan(Of Int32)
  fullName.vb: SudokuSpice.ReadOnlySpan(Of System.Int32)
  name.vb: ReadOnlySpan(Of Int32)
  spec.csharp:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<>
  nameWithType: ReadOnlySpan<>
  fullName: SudokuSpice.ReadOnlySpan<>
  nameWithType.vb: ReadOnlySpan(Of )
  fullName.vb: SudokuSpice.ReadOnlySpan(Of )
  name.vb: ReadOnlySpan(Of )
  spec.csharp:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.MagicSquares.ComputeSets*
  commentId: Overload:SudokuSpice.MagicSquares.ComputeSets
  name: ComputeSets
  nameWithType: MagicSquares.ComputeSets
  fullName: SudokuSpice.MagicSquares.ComputeSets
- uid: HashSet{SudokuSpice.BitVector}
  commentId: '!:HashSet{SudokuSpice.BitVector}'
  definition: HashSet`1
  name: HashSet<BitVector>
  nameWithType: HashSet<BitVector>
  fullName: HashSet<SudokuSpice.BitVector>
  nameWithType.vb: HashSet(Of BitVector)
  fullName.vb: HashSet(Of SudokuSpice.BitVector)
  name.vb: HashSet(Of BitVector)
  spec.csharp:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.BitVector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.BitVector
  - name: )
    nameWithType: )
    fullName: )
- uid: HashSet`1
  isExternal: true
  name: HashSet<>
  nameWithType: HashSet<>
  fullName: HashSet<>
  nameWithType.vb: HashSet(Of )
  fullName.vb: HashSet(Of )
  name.vb: HashSet(Of )
  spec.csharp:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.BitVector
  commentId: T:SudokuSpice.BitVector
  parent: SudokuSpice
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.BitVector
