### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.IPossibility
  commentId: T:SudokuSpice.ConstraintBased.IPossibility
  id: IPossibility
  parent: SudokuSpice.ConstraintBased
  children:
  - SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  - SudokuSpice.ConstraintBased.IPossibility.State
  langs:
  - csharp
  - vb
  name: IPossibility
  nameWithType: IPossibility
  fullName: SudokuSpice.ConstraintBased.IPossibility
  type: Interface
  source:
    remote:
      path: SudokuSpice/ConstraintBased/IPossibility.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: IPossibility
    path: ../SudokuSpice/ConstraintBased/IPossibility.cs
    startLine: 5
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nDefines a possibility in the <xref href=\"SudokuSpice.ConstraintBased.ExactCoverGraph\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public interface IPossibility
    content.vb: Public Interface IPossibility
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  commentId: P:SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  id: IsConcrete
  parent: SudokuSpice.ConstraintBased.IPossibility
  langs:
  - csharp
  - vb
  name: IsConcrete
  nameWithType: IPossibility.IsConcrete
  fullName: SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/IPossibility.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: IsConcrete
    path: ../SudokuSpice/ConstraintBased/IPossibility.cs
    startLine: 11
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nTrue if this possibility is a concrete possibility, i.e. a leaf node in the graph, as\nopposed to a group of other possibilities.\n"
  example: []
  syntax:
    content: bool IsConcrete { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsConcrete As Boolean
  overload: SudokuSpice.ConstraintBased.IPossibility.IsConcrete*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SudokuSpice.ConstraintBased.IPossibility.State
  commentId: P:SudokuSpice.ConstraintBased.IPossibility.State
  id: State
  parent: SudokuSpice.ConstraintBased.IPossibility
  langs:
  - csharp
  - vb
  name: State
  nameWithType: IPossibility.State
  fullName: SudokuSpice.ConstraintBased.IPossibility.State
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/IPossibility.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: State
    path: ../SudokuSpice/ConstraintBased/IPossibility.cs
    startLine: 16
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nThe current state of this node in the <xref href=\"SudokuSpice.ConstraintBased.ExactCoverGraph\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: NodeState State { get; }
    parameters: []
    return:
      type: SudokuSpice.ConstraintBased.NodeState
    content.vb: ReadOnly Property State As NodeState
  overload: SudokuSpice.ConstraintBased.IPossibility.State*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverGraph
  parent: SudokuSpice.ConstraintBased
  name: ExactCoverGraph
  nameWithType: ExactCoverGraph
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: SudokuSpice.ConstraintBased.IPossibility.IsConcrete*
  commentId: Overload:SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  name: IsConcrete
  nameWithType: IPossibility.IsConcrete
  fullName: SudokuSpice.ConstraintBased.IPossibility.IsConcrete
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.ConstraintBased.IPossibility.State*
  commentId: Overload:SudokuSpice.ConstraintBased.IPossibility.State
  name: State
  nameWithType: IPossibility.State
  fullName: SudokuSpice.ConstraintBased.IPossibility.State
- uid: SudokuSpice.ConstraintBased.NodeState
  commentId: T:SudokuSpice.ConstraintBased.NodeState
  parent: SudokuSpice.ConstraintBased
  name: NodeState
  nameWithType: NodeState
  fullName: SudokuSpice.ConstraintBased.NodeState
