### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule
  commentId: T:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule
  id: MaxCountPerBoxRule
  parent: SudokuSpice.RuleBased.Rules
  children:
  - SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.#ctor
  - SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  - SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetDimension(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetMissingValuesForBox(System.Int32)
  - SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  - SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  - SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  langs:
  - csharp
  - vb
  name: MaxCountPerBoxRule
  nameWithType: MaxCountPerBoxRule
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: MaxCountPerBoxRule
    path: ../SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
    startLine: 8
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  summary: "\nRestricts that each box contains a max count of each value, as specified by the\n<xref href=\"SudokuSpice.IReadOnlyPuzzle.CountPerUniqueValue\" data-throw-if-not-resolved=\"false\"></xref> dictionary.\n"
  example: []
  syntax:
    content: 'public class MaxCountPerBoxRule : MaxCountRule, IMissingBoxValuesTracker, IRule'
    content.vb: >-
      Public Class MaxCountPerBoxRule
          Inherits MaxCountRule
          Implements IMissingBoxValuesTracker, IRule
  inheritance:
  - System.Object
  - SudokuSpice.RuleBased.Rules.MaxCountRule
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  - SudokuSpice.RuleBased.Rules.IRule
  inheritedMembers:
  - SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.Rules.MaxCountRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.RuleBased.Rules.MaxCountRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  - SudokuSpice.RuleBased.Rules.MaxCountRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  - SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues(System.Int32)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.#ctor
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.#ctor
  id: '#ctor'
  parent: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule
  langs:
  - csharp
  - vb
  name: MaxCountPerBoxRule()
  nameWithType: MaxCountPerBoxRule.MaxCountPerBoxRule()
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.MaxCountPerBoxRule()
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
    startLine: 13
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  syntax:
    content: public MaxCountPerBoxRule()
    content.vb: Public Sub New
  overload: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  id: CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule
  langs:
  - csharp
  - vb
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: MaxCountPerBoxRule.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CopyWithNewReference
    path: ../SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
    startLine: 23
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  summary: "\nCreates a deep copy of this IRule, with any internal <code>IReadOnlyPuzzle</code>\nreferences updated to the given puzzle.\n"
  example: []
  syntax:
    content: public override IRule CopyWithNewReference(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: "\nThe new puzzle reference to use. To ensure this rule&apos;s internal state is correct, this\npuzzle should contain the same data as the current puzzle referenced by this rule.\n"
    return:
      type: SudokuSpice.RuleBased.Rules.IRule
    content.vb: Public Overrides Function CopyWithNewReference(puzzle As IReadOnlyPuzzle) As IRule
  overridden: SudokuSpice.RuleBased.Rules.MaxCountRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  overload: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.CopyWithNewReference*
  implements:
  - SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  id: TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  parent: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule
  langs:
  - csharp
  - vb
  name: TryInit(IReadOnlyPuzzle, BitVector)
  nameWithType: MaxCountPerBoxRule.TryInit(IReadOnlyPuzzle, BitVector)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TryInit(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: TryInit
    path: ../SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
    startLine: 29
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  summary: "\nTries to initialize this rule to prepare to solve the given puzzle.\n"
  remarks: "\nIn general, it doesn&apos;t make sense to want to maintain the previous state if this method\nfails. Therefore, it is <em>not</em> guaranteed that the rule&apos;s state is unchanged on \nfailure.\n"
  example: []
  syntax:
    content: public override bool TryInit(IReadOnlyPuzzle puzzle, BitVector uniquePossibleValues)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: The puzzle to be solved.
    - id: uniquePossibleValues
      type: SudokuSpice.BitVector
      description: All the unique possible values for this puzzle.
    return:
      type: System.Boolean
      description: "\nFalse if the puzzle violates this rule and initialization fails, else true.\n"
    content.vb: Public Overrides Function TryInit(puzzle As IReadOnlyPuzzle, uniquePossibleValues As BitVector) As Boolean
  overridden: SudokuSpice.RuleBased.Rules.MaxCountRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  overload: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TryInit*
  implements:
  - SudokuSpice.RuleBased.Rules.IRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetMissingValuesForBox(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetMissingValuesForBox(System.Int32)
  id: GetMissingValuesForBox(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule
  langs:
  - csharp
  - vb
  name: GetMissingValuesForBox(Int32)
  nameWithType: MaxCountPerBoxRule.GetMissingValuesForBox(Int32)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetMissingValuesForBox(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetMissingValuesForBox
    path: ../SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
    startLine: 42
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  summary: Returns all the values that still need to be set in the given box.
  example: []
  syntax:
    content: public BitVector GetMissingValuesForBox(int box)
    parameters:
    - id: box
      type: System.Int32
    return:
      type: SudokuSpice.BitVector
    content.vb: Public Function GetMissingValuesForBox(box As Integer) As BitVector
  overload: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetMissingValuesForBox*
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  id: GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule
  langs:
  - csharp
  - vb
  name: GetNumDimensions(IReadOnlyPuzzle)
  nameWithType: MaxCountPerBoxRule.GetNumDimensions(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetNumDimensions
    path: ../SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
    startLine: 45
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  summary: "\nReturns the number of dimensions that will be enforced to contain unique values.\n"
  example: []
  syntax:
    content: protected override int GetNumDimensions(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: The puzzle for which to determine the number of dimensions.
    return:
      type: System.Int32
    content.vb: Protected Overrides Function GetNumDimensions(puzzle As IReadOnlyPuzzle) As Integer
  overridden: SudokuSpice.RuleBased.Rules.MaxCountRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  overload: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetNumDimensions*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetDimension(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetDimension(SudokuSpice.Coordinate@)
  id: GetDimension(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule
  langs:
  - csharp
  - vb
  name: GetDimension(Coordinate)
  nameWithType: MaxCountPerBoxRule.GetDimension(Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetDimension(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetDimension
    path: ../SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
    startLine: 47
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  summary: "\nGets the dimension for a coordinate.\n"
  example: []
  syntax:
    content: protected override int GetDimension(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    return:
      type: System.Int32
    content.vb: Protected Overrides Function GetDimension(ByRef c As Coordinate) As Integer
  overridden: SudokuSpice.RuleBased.Rules.MaxCountRule.GetDimension(SudokuSpice.Coordinate@)
  overload: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetDimension*
  nameWithType.vb: MaxCountPerBoxRule.GetDimension(ByRef Coordinate)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetDimension(ByRef SudokuSpice.Coordinate)
  name.vb: GetDimension(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  id: TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule
  langs:
  - csharp
  - vb
  name: TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  nameWithType: MaxCountPerBoxRule.TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: TrackUnsetCoordinatesOnSameDimension
    path: ../SudokuSpice/RuleBased/Rules/MaxCountPerBoxRule.cs
    startLine: 49
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  summary: "\nAdds the coordinates of unset values on the given dimension to the given tracker.\n"
  example: []
  syntax:
    content: protected override void TrackUnsetCoordinatesOnSameDimension(int dimension, in Coordinate source, CoordinateTracker tracker)
    parameters:
    - id: dimension
      type: System.Int32
      description: The dimension to search.
    - id: source
      type: SudokuSpice.Coordinate
      description: The source coordinate for the change; should be skipped.
    - id: tracker
      type: SudokuSpice.CoordinateTracker
      description: The tracker to add coordiantes to.
    content.vb: Protected Overrides Sub TrackUnsetCoordinatesOnSameDimension(dimension As Integer, ByRef source As Coordinate, tracker As CoordinateTracker)
  overridden: SudokuSpice.RuleBased.Rules.MaxCountRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  overload: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TrackUnsetCoordinatesOnSameDimension*
  nameWithType.vb: MaxCountPerBoxRule.TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, ByRef SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  name.vb: TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
references:
- uid: SudokuSpice.IReadOnlyPuzzle.CountPerUniqueValue
  commentId: P:SudokuSpice.IReadOnlyPuzzle.CountPerUniqueValue
  parent: SudokuSpice.IReadOnlyPuzzle
  name: CountPerUniqueValue
  nameWithType: IReadOnlyPuzzle.CountPerUniqueValue
  fullName: SudokuSpice.IReadOnlyPuzzle.CountPerUniqueValue
- uid: SudokuSpice.RuleBased.Rules
  commentId: N:SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.RuleBased.Rules.MaxCountRule
  commentId: T:SudokuSpice.RuleBased.Rules.MaxCountRule
  parent: SudokuSpice.RuleBased.Rules
  name: MaxCountRule
  nameWithType: MaxCountRule
  fullName: SudokuSpice.RuleBased.Rules.MaxCountRule
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingBoxValuesTracker
  nameWithType: IMissingBoxValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IRule
  commentId: T:SudokuSpice.RuleBased.Rules.IRule
  parent: SudokuSpice.RuleBased.Rules
  name: IRule
  nameWithType: IRule
  fullName: SudokuSpice.RuleBased.Rules.IRule
- uid: SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.Rules.MaxCountRule
  name: GetPossibleValues(Coordinate)
  nameWithType: MaxCountRule.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues(SudokuSpice.Coordinate)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: MaxCountRule.GetPossibleValues
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: MaxCountRule.GetPossibleValues
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.MaxCountRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.Rules.MaxCountRule
  isExternal: true
  name: Revert(Coordinate, Int32)
  nameWithType: MaxCountRule.Revert(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.Revert(SudokuSpice.Coordinate, System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.Revert(SudokuSpice.Coordinate@,System.Int32)
    name: Revert
    nameWithType: MaxCountRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.Revert(SudokuSpice.Coordinate@,System.Int32)
    name: Revert
    nameWithType: MaxCountRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.MaxCountRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.MaxCountRule
  isExternal: true
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: MaxCountRule.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Revert
    nameWithType: MaxCountRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Revert
    nameWithType: MaxCountRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.MaxCountRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.MaxCountRule
  isExternal: true
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: MaxCountRule.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Update
    nameWithType: MaxCountRule.Update
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Update
    nameWithType: MaxCountRule.Update
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.MaxCountRule
  isExternal: true
  name: GetPossibleValues(Int32)
  nameWithType: MaxCountRule.GetPossibleValues(Int32)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues(System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues(System.Int32)
    name: GetPossibleValues
    nameWithType: MaxCountRule.GetPossibleValues
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues(System.Int32)
    name: GetPossibleValues
    nameWithType: MaxCountRule.GetPossibleValues
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.#ctor
  name: MaxCountPerBoxRule
  nameWithType: MaxCountPerBoxRule.MaxCountPerBoxRule
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.MaxCountPerBoxRule
- uid: SudokuSpice.RuleBased.Rules.MaxCountRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.MaxCountRule
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: MaxCountRule.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: MaxCountRule.CopyWithNewReference
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: MaxCountRule.CopyWithNewReference
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.CopyWithNewReference*
  commentId: Overload:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.CopyWithNewReference
  name: CopyWithNewReference
  nameWithType: MaxCountPerBoxRule.CopyWithNewReference
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.IRule
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: IRule.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: IRule.CopyWithNewReference
    fullName: SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: IRule.CopyWithNewReference
    fullName: SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.MaxCountRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  parent: SudokuSpice.RuleBased.Rules.MaxCountRule
  name: TryInit(IReadOnlyPuzzle, BitVector)
  nameWithType: MaxCountRule.TryInit(IReadOnlyPuzzle, BitVector)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.TryInit(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
    name: TryInit
    nameWithType: MaxCountRule.TryInit
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.TryInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.BitVector
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
    name: TryInit
    nameWithType: MaxCountRule.TryInit
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.TryInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.BitVector
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TryInit*
  commentId: Overload:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TryInit
  name: TryInit
  nameWithType: MaxCountPerBoxRule.TryInit
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.IRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  commentId: M:SudokuSpice.RuleBased.Rules.IRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  parent: SudokuSpice.RuleBased.Rules.IRule
  name: TryInit(IReadOnlyPuzzle, BitVector)
  nameWithType: IRule.TryInit(IReadOnlyPuzzle, BitVector)
  fullName: SudokuSpice.RuleBased.Rules.IRule.TryInit(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
    name: TryInit
    nameWithType: IRule.TryInit
    fullName: SudokuSpice.RuleBased.Rules.IRule.TryInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.BitVector
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
    name: TryInit
    nameWithType: IRule.TryInit
    fullName: SudokuSpice.RuleBased.Rules.IRule.TryInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.BitVector
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.BitVector
  commentId: T:SudokuSpice.BitVector
  parent: SudokuSpice
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.BitVector
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetMissingValuesForBox*
  commentId: Overload:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetMissingValuesForBox
  name: GetMissingValuesForBox
  nameWithType: MaxCountPerBoxRule.GetMissingValuesForBox
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetMissingValuesForBox
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  isExternal: true
  name: GetMissingValuesForBox(Int32)
  nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox(Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
    name: GetMissingValuesForBox
    nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox
    fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
    name: GetMissingValuesForBox
    nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox
    fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.RuleBased.Rules.MaxCountRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.MaxCountRule
  name: GetNumDimensions(IReadOnlyPuzzle)
  nameWithType: MaxCountRule.GetNumDimensions(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
    name: GetNumDimensions
    nameWithType: MaxCountRule.GetNumDimensions
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.GetNumDimensions
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
    name: GetNumDimensions
    nameWithType: MaxCountRule.GetNumDimensions
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.GetNumDimensions
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetNumDimensions*
  commentId: Overload:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetNumDimensions
  name: GetNumDimensions
  nameWithType: MaxCountPerBoxRule.GetNumDimensions
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetNumDimensions
- uid: SudokuSpice.RuleBased.Rules.MaxCountRule.GetDimension(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountRule.GetDimension(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.Rules.MaxCountRule
  name: GetDimension(Coordinate)
  nameWithType: MaxCountRule.GetDimension(Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.GetDimension(SudokuSpice.Coordinate)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.GetDimension(SudokuSpice.Coordinate@)
    name: GetDimension
    nameWithType: MaxCountRule.GetDimension
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.GetDimension
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.GetDimension(SudokuSpice.Coordinate@)
    name: GetDimension
    nameWithType: MaxCountRule.GetDimension
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.GetDimension
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetDimension*
  commentId: Overload:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetDimension
  name: GetDimension
  nameWithType: MaxCountPerBoxRule.GetDimension
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.GetDimension
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.RuleBased.Rules.MaxCountRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.MaxCountRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.MaxCountRule
  isExternal: true
  name: TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  nameWithType: MaxCountRule.TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
    name: TrackUnsetCoordinatesOnSameDimension
    nameWithType: MaxCountRule.TrackUnsetCoordinatesOnSameDimension
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.TrackUnsetCoordinatesOnSameDimension
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.MaxCountRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
    name: TrackUnsetCoordinatesOnSameDimension
    nameWithType: MaxCountRule.TrackUnsetCoordinatesOnSameDimension
    fullName: SudokuSpice.RuleBased.Rules.MaxCountRule.TrackUnsetCoordinatesOnSameDimension
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TrackUnsetCoordinatesOnSameDimension*
  commentId: Overload:SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TrackUnsetCoordinatesOnSameDimension
  name: TrackUnsetCoordinatesOnSameDimension
  nameWithType: MaxCountPerBoxRule.TrackUnsetCoordinatesOnSameDimension
  fullName: SudokuSpice.RuleBased.Rules.MaxCountPerBoxRule.TrackUnsetCoordinatesOnSameDimension
- uid: SudokuSpice.CoordinateTracker
  commentId: T:SudokuSpice.CoordinateTracker
  parent: SudokuSpice
  name: CoordinateTracker
  nameWithType: CoordinateTracker
  fullName: SudokuSpice.CoordinateTracker
