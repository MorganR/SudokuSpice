### YamlMime:ManagedReference
items:
- uid: SudokuSpice.Rules.DiagonalUniquenessRule
  commentId: T:SudokuSpice.Rules.DiagonalUniquenessRule
  id: DiagonalUniquenessRule
  parent: SudokuSpice.Rules
  children:
  - SudokuSpice.Rules.DiagonalUniquenessRule.#ctor(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  - SudokuSpice.Rules.DiagonalUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  - SudokuSpice.Rules.DiagonalUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  - SudokuSpice.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  - SudokuSpice.Rules.DiagonalUniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  langs:
  - csharp
  - vb
  name: DiagonalUniquenessRule
  nameWithType: DiagonalUniquenessRule
  fullName: SudokuSpice.Rules.DiagonalUniquenessRule
  type: Class
  source:
    remote:
      path: SudokuSpice/Rules/DiagonalUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: DiagonalUniquenessRule
    path: ../SudokuSpice/Rules/DiagonalUniquenessRule.cs
    startLine: 9
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  summary: "\nRestricts that the forward and backward diagonals each contain all unique values.\n"
  example: []
  syntax:
    content: 'public class DiagonalUniquenessRule : ISudokuRule'
    content.vb: >-
      Public Class DiagonalUniquenessRule
          Implements ISudokuRule
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.Rules.ISudokuRule
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.Rules.DiagonalUniquenessRule.#ctor(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  commentId: M:SudokuSpice.Rules.DiagonalUniquenessRule.#ctor(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  id: '#ctor(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)'
  parent: SudokuSpice.Rules.DiagonalUniquenessRule
  langs:
  - csharp
  - vb
  name: DiagonalUniquenessRule(IReadOnlyPuzzle, BitVector)
  nameWithType: DiagonalUniquenessRule.DiagonalUniquenessRule(IReadOnlyPuzzle, BitVector)
  fullName: SudokuSpice.Rules.DiagonalUniquenessRule.DiagonalUniquenessRule(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/Rules/DiagonalUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/Rules/DiagonalUniquenessRule.cs
    startLine: 16
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  syntax:
    content: public DiagonalUniquenessRule(IReadOnlyPuzzle puzzle, BitVector allUniqueValues)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
    - id: allUniqueValues
      type: SudokuSpice.BitVector
    content.vb: Public Sub New(puzzle As IReadOnlyPuzzle, allUniqueValues As BitVector)
  overload: SudokuSpice.Rules.DiagonalUniquenessRule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.Rules.DiagonalUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.Rules.DiagonalUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  id: CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.Rules.DiagonalUniquenessRule
  langs:
  - csharp
  - vb
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: DiagonalUniquenessRule.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.Rules.DiagonalUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/Rules/DiagonalUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CopyWithNewReference
    path: ../SudokuSpice/Rules/DiagonalUniquenessRule.cs
    startLine: 61
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  summary: "\nCreates a deep copy of this ISudokuRule, with any internal <code>IReadOnlyPuzzle</code>\nreferences updated to the given puzzle.\n"
  example: []
  syntax:
    content: public ISudokuRule CopyWithNewReference(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: "\nThe new puzzle reference to use. To ensure this rule&apos;s internal state is correct, this\npuzzle should contain the same data as the current puzzle referenced by this rule.\n"
    return:
      type: SudokuSpice.Rules.ISudokuRule
    content.vb: Public Function CopyWithNewReference(puzzle As IReadOnlyPuzzle) As ISudokuRule
  overload: SudokuSpice.Rules.DiagonalUniquenessRule.CopyWithNewReference*
  implements:
  - SudokuSpice.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.Rules.DiagonalUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.Rules.DiagonalUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  id: GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.Rules.DiagonalUniquenessRule
  langs:
  - csharp
  - vb
  name: GetPossibleValues(Coordinate)
  nameWithType: DiagonalUniquenessRule.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.Rules.DiagonalUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/Rules/DiagonalUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetPossibleValues
    path: ../SudokuSpice/Rules/DiagonalUniquenessRule.cs
    startLine: 67
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  summary: "\nGets the possible values for the given coordinate based on this rule.\n"
  remarks: "\nWhen implementing this method, avoid depending on dynamic information in the current\npuzzle being solved, such as the currently set values. This method must return\ninformation that reflects the most recent calls to\n<xref href=\"SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Coordinate%40%2cSystem.Int32%2cSudokuSpice.CoordinateTracker)\" data-throw-if-not-resolved=\"false\"></xref>\nor <xref href=\"SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate%40%2cSystem.Int32%2cSudokuSpice.CoordinateTracker)\" data-throw-if-not-resolved=\"false\"></xref>, as it can\nbe called before or after modifying the underlying puzzle&apos;s data.\n"
  example: []
  syntax:
    content: public BitVector GetPossibleValues(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    return:
      type: SudokuSpice.BitVector
      description: The possible values represented as a <xref href="SudokuSpice.BitVector" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function GetPossibleValues(ByRef c As Coordinate) As BitVector
  overload: SudokuSpice.Rules.DiagonalUniquenessRule.GetPossibleValues*
  implements:
  - SudokuSpice.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  nameWithType.vb: DiagonalUniquenessRule.GetPossibleValues(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.Rules.DiagonalUniquenessRule.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  name.vb: GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  id: Revert(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.Rules.DiagonalUniquenessRule
  langs:
  - csharp
  - vb
  name: Revert(Coordinate, Int32)
  nameWithType: DiagonalUniquenessRule.Revert(Coordinate, Int32)
  fullName: SudokuSpice.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/Rules/DiagonalUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Revert
    path: ../SudokuSpice/Rules/DiagonalUniquenessRule.cs
    startLine: 82
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  summary: "\nUndoes an update for the given value at the specified coordinate.\n<p>\nThis performs the same internal updates as\n<xref href=\"SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate%40%2cSystem.Int32%2cSudokuSpice.CoordinateTracker)\" data-throw-if-not-resolved=\"false\"></xref>, but without passing\naffected coordinates back to the caller. Therefore this is more efficient in cases\nwhere the caller already knows all the possible coordinates that could be affected.\n</p>\n"
  remarks: "\nThis method will always be called before reverting the value on the underlying puzzle.\n"
  example: []
  syntax:
    content: public void Revert(in Coordinate c, int val)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The coordinate where a value is being unset.
    - id: val
      type: System.Int32
      description: The value being unset.
    content.vb: Public Sub Revert(ByRef c As Coordinate, val As Integer)
  overload: SudokuSpice.Rules.DiagonalUniquenessRule.Revert*
  implements:
  - SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  nameWithType.vb: DiagonalUniquenessRule.Revert(ByRef Coordinate, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.Rules.DiagonalUniquenessRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  id: Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.Rules.DiagonalUniquenessRule
  langs:
  - csharp
  - vb
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: DiagonalUniquenessRule.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/Rules/DiagonalUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Revert
    path: ../SudokuSpice/Rules/DiagonalUniquenessRule.cs
    startLine: 96
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  summary: "\nUndoes an update for the given value at the specified coordinate. Tracks affected\ncoordinates in the given tracker.\n"
  remarks: "\nThis method will always be called before reverting the value on the underlying puzzle.\n"
  example: []
  syntax:
    content: public void Revert(in Coordinate c, int val, CoordinateTracker coordTracker)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The coordinate where a value is being unset.
    - id: val
      type: System.Int32
      description: The value being unset.
    - id: coordTracker
      type: SudokuSpice.CoordinateTracker
      description: "\nThe coordinates of unset squares impacted by this change will be tracked in this\ntracker.\n"
    content.vb: Public Sub Revert(ByRef c As Coordinate, val As Integer, coordTracker As CoordinateTracker)
  overload: SudokuSpice.Rules.DiagonalUniquenessRule.Revert*
  implements:
  - SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  nameWithType.vb: DiagonalUniquenessRule.Revert(ByRef Coordinate, Int32, CoordinateTracker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.Rules.DiagonalUniquenessRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.Rules.DiagonalUniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.Rules.DiagonalUniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  id: Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.Rules.DiagonalUniquenessRule
  langs:
  - csharp
  - vb
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: DiagonalUniquenessRule.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.Rules.DiagonalUniquenessRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/Rules/DiagonalUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Update
    path: ../SudokuSpice/Rules/DiagonalUniquenessRule.cs
    startLine: 112
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  summary: "\nUpdates possible values based on setting the given coordinate to the given value.\nTracks affected coordinates in the given tracker.\n"
  remarks: "\nThis method will always be called before setting the value on the underlying puzzle.\n"
  example: []
  syntax:
    content: public void Update(in Coordinate c, int val, CoordinateTracker coordTracker)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The coordinate to update.
    - id: val
      type: System.Int32
      description: The value to set <code>c</code> to.
    - id: coordTracker
      type: SudokuSpice.CoordinateTracker
      description: "\nThe coordinates of unset squares impacted by this change will be tracked in this\ntracker.\n"
    content.vb: Public Sub Update(ByRef c As Coordinate, val As Integer, coordTracker As CoordinateTracker)
  overload: SudokuSpice.Rules.DiagonalUniquenessRule.Update*
  implements:
  - SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  nameWithType.vb: DiagonalUniquenessRule.Update(ByRef Coordinate, Int32, CoordinateTracker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.Rules.DiagonalUniquenessRule.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
references:
- uid: SudokuSpice.Rules
  commentId: N:SudokuSpice.Rules
  name: SudokuSpice.Rules
  nameWithType: SudokuSpice.Rules
  fullName: SudokuSpice.Rules
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.Rules.ISudokuRule
  commentId: T:SudokuSpice.Rules.ISudokuRule
  parent: SudokuSpice.Rules
  name: ISudokuRule
  nameWithType: ISudokuRule
  fullName: SudokuSpice.Rules.ISudokuRule
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.Rules.DiagonalUniquenessRule.#ctor*
  commentId: Overload:SudokuSpice.Rules.DiagonalUniquenessRule.#ctor
  name: DiagonalUniquenessRule
  nameWithType: DiagonalUniquenessRule.DiagonalUniquenessRule
  fullName: SudokuSpice.Rules.DiagonalUniquenessRule.DiagonalUniquenessRule
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice.BitVector
  commentId: T:SudokuSpice.BitVector
  parent: SudokuSpice
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.BitVector
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.Rules.DiagonalUniquenessRule.CopyWithNewReference*
  commentId: Overload:SudokuSpice.Rules.DiagonalUniquenessRule.CopyWithNewReference
  name: CopyWithNewReference
  nameWithType: DiagonalUniquenessRule.CopyWithNewReference
  fullName: SudokuSpice.Rules.DiagonalUniquenessRule.CopyWithNewReference
- uid: SudokuSpice.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.Rules.ISudokuRule
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: ISudokuRule.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: ISudokuRule.CopyWithNewReference
    fullName: SudokuSpice.Rules.ISudokuRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: ISudokuRule.CopyWithNewReference
    fullName: SudokuSpice.Rules.ISudokuRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Rules.DiagonalUniquenessRule.GetPossibleValues*
  commentId: Overload:SudokuSpice.Rules.DiagonalUniquenessRule.GetPossibleValues
  name: GetPossibleValues
  nameWithType: DiagonalUniquenessRule.GetPossibleValues
  fullName: SudokuSpice.Rules.DiagonalUniquenessRule.GetPossibleValues
- uid: SudokuSpice.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.Rules.ISudokuRule
  name: GetPossibleValues(Coordinate)
  nameWithType: ISudokuRule.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate)
  spec.csharp:
  - uid: SudokuSpice.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: ISudokuRule.GetPossibleValues
    fullName: SudokuSpice.Rules.ISudokuRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: ISudokuRule.GetPossibleValues
    fullName: SudokuSpice.Rules.ISudokuRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.Rules.DiagonalUniquenessRule.Revert*
  commentId: Overload:SudokuSpice.Rules.DiagonalUniquenessRule.Revert
  name: Revert
  nameWithType: DiagonalUniquenessRule.Revert
  fullName: SudokuSpice.Rules.DiagonalUniquenessRule.Revert
- uid: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.Rules.ISudokuRule
  isExternal: true
  name: Revert(Coordinate, Int32)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32)
  fullName: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate, System.Int32)
  spec.csharp:
  - uid: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.Rules.ISudokuRule
  isExternal: true
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.CoordinateTracker
  commentId: T:SudokuSpice.CoordinateTracker
  parent: SudokuSpice
  name: CoordinateTracker
  nameWithType: CoordinateTracker
  fullName: SudokuSpice.CoordinateTracker
- uid: SudokuSpice.Rules.DiagonalUniquenessRule.Update*
  commentId: Overload:SudokuSpice.Rules.DiagonalUniquenessRule.Update
  name: Update
  nameWithType: DiagonalUniquenessRule.Update
  fullName: SudokuSpice.Rules.DiagonalUniquenessRule.Update
- uid: SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.Rules.ISudokuRule
  isExternal: true
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Update
    nameWithType: ISudokuRule.Update
    fullName: SudokuSpice.Rules.ISudokuRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Update
    nameWithType: ISudokuRule.Update
    fullName: SudokuSpice.Rules.ISudokuRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
