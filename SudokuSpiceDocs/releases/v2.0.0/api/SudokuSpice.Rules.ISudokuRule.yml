### YamlMime:ManagedReference
items:
- uid: SudokuSpice.Rules.ISudokuRule
  commentId: T:SudokuSpice.Rules.ISudokuRule
  id: ISudokuRule
  parent: SudokuSpice.Rules
  children:
  - SudokuSpice.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  - SudokuSpice.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Data.Coordinate@)
  - SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate@,System.Int32)
  - SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
  - SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
  langs:
  - csharp
  - vb
  name: ISudokuRule
  nameWithType: ISudokuRule
  fullName: SudokuSpice.Rules.ISudokuRule
  type: Interface
  source:
    remote:
      path: SudokuSpice/Rules/ISudokuRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: ISudokuRule
    path: ../SudokuSpice/Rules/ISudokuRule.cs
    startLine: 10
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  summary: "\nEnforces a rule for a puzzle, such as &quot;all values must be unique within a row.&quot; This is\ndone by tracking possible values for each square specifically as determined by this rule.\nThese possible values are then enforced along with any other rules by an\n<xref href=\"SudokuSpice.Rules.ISudokuRuleKeeper\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public interface ISudokuRule
    content.vb: Public Interface ISudokuRule
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SudokuSpice.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Data.Coordinate@)
  commentId: M:SudokuSpice.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Data.Coordinate@)
  id: GetPossibleValues(SudokuSpice.Data.Coordinate@)
  parent: SudokuSpice.Rules.ISudokuRule
  langs:
  - csharp
  - vb
  name: GetPossibleValues(Coordinate)
  nameWithType: ISudokuRule.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Data.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/Rules/ISudokuRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetPossibleValues
    path: ../SudokuSpice/Rules/ISudokuRule.cs
    startLine: 24
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  summary: "\nGets the possible values for the given coordinate based on this rule.\n"
  remarks: "\nWhen implementing this method, avoid depending on dynamic information in the current\npuzzle being solved, such as the currently set values. This method must return\ninformation that reflects the most recent calls to\n<xref href=\"SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Data.Coordinate%40%2cSystem.Int32%2cSudokuSpice.Data.CoordinateTracker)\" data-throw-if-not-resolved=\"false\"></xref>\nor <xref href=\"SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate%40%2cSystem.Int32%2cSudokuSpice.Data.CoordinateTracker)\" data-throw-if-not-resolved=\"false\"></xref>, as it can\nbe called before or after modifying the underlying puzzle&apos;s data.\n"
  example: []
  syntax:
    content: BitVector GetPossibleValues(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Data.Coordinate
    return:
      type: SudokuSpice.Data.BitVector
      description: The possible values represented as a <xref href="SudokuSpice.Data.BitVector" data-throw-if-not-resolved="false"></xref>.
    content.vb: Function GetPossibleValues(ByRef c As Coordinate) As BitVector
  overload: SudokuSpice.Rules.ISudokuRule.GetPossibleValues*
  nameWithType.vb: ISudokuRule.GetPossibleValues(ByRef Coordinate)
  fullName.vb: SudokuSpice.Rules.ISudokuRule.GetPossibleValues(ByRef SudokuSpice.Data.Coordinate)
  name.vb: GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate@,System.Int32)
  id: Revert(SudokuSpice.Data.Coordinate@,System.Int32)
  parent: SudokuSpice.Rules.ISudokuRule
  langs:
  - csharp
  - vb
  name: Revert(Coordinate, Int32)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32)
  fullName: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/Rules/ISudokuRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Revert
    path: ../SudokuSpice/Rules/ISudokuRule.cs
    startLine: 39
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  summary: "\nUndoes an update for the given value at the specified coordinate.\n<p>\nThis performs the same internal updates as\n<xref href=\"SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate%40%2cSystem.Int32%2cSudokuSpice.Data.CoordinateTracker)\" data-throw-if-not-resolved=\"false\"></xref>, but without passing\naffected coordinates back to the caller. Therefore this is more efficient in cases\nwhere the caller already knows all the possible coordinates that could be affected.\n</p>\n"
  remarks: "\nThis method will always be called before reverting the value on the underlying puzzle.\n"
  example: []
  syntax:
    content: void Revert(in Coordinate c, int val)
    parameters:
    - id: c
      type: SudokuSpice.Data.Coordinate
      description: The coordinate where a value is being unset.
    - id: val
      type: System.Int32
      description: The value being unset.
    content.vb: Sub Revert(ByRef c As Coordinate, val As Integer)
  overload: SudokuSpice.Rules.ISudokuRule.Revert*
  nameWithType.vb: ISudokuRule.Revert(ByRef Coordinate, Int32)
  fullName.vb: SudokuSpice.Rules.ISudokuRule.Revert(ByRef SudokuSpice.Data.Coordinate, System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
  commentId: M:SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
  id: Revert(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
  parent: SudokuSpice.Rules.ISudokuRule
  langs:
  - csharp
  - vb
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate, System.Int32, SudokuSpice.Data.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/Rules/ISudokuRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Revert
    path: ../SudokuSpice/Rules/ISudokuRule.cs
    startLine: 53
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  summary: "\nUndoes an update for the given value at the specified coordinate. Tracks affected\ncoordinates in the given tracker.\n"
  remarks: "\nThis method will always be called before reverting the value on the underlying puzzle.\n"
  example: []
  syntax:
    content: void Revert(in Coordinate c, int val, CoordinateTracker coordTracker)
    parameters:
    - id: c
      type: SudokuSpice.Data.Coordinate
      description: The coordinate where a value is being unset.
    - id: val
      type: System.Int32
      description: The value being unset.
    - id: coordTracker
      type: SudokuSpice.Data.CoordinateTracker
      description: "\nThe coordinates of unset squares impacted by this change will be tracked in this\ntracker.\n"
    content.vb: Sub Revert(ByRef c As Coordinate, val As Integer, coordTracker As CoordinateTracker)
  overload: SudokuSpice.Rules.ISudokuRule.Revert*
  nameWithType.vb: ISudokuRule.Revert(ByRef Coordinate, Int32, CoordinateTracker)
  fullName.vb: SudokuSpice.Rules.ISudokuRule.Revert(ByRef SudokuSpice.Data.Coordinate, System.Int32, SudokuSpice.Data.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
  commentId: M:SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
  id: Update(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
  parent: SudokuSpice.Rules.ISudokuRule
  langs:
  - csharp
  - vb
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Data.Coordinate, System.Int32, SudokuSpice.Data.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/Rules/ISudokuRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Update
    path: ../SudokuSpice/Rules/ISudokuRule.cs
    startLine: 67
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  summary: "\nUpdates possible values based on setting the given coordinate to the given value.\nTracks affected coordinates in the given tracker.\n"
  remarks: "\nThis method will always be called before setting the value on the underlying puzzle.\n"
  example: []
  syntax:
    content: void Update(in Coordinate c, int val, CoordinateTracker coordTracker)
    parameters:
    - id: c
      type: SudokuSpice.Data.Coordinate
      description: The coordinate to update.
    - id: val
      type: System.Int32
      description: The value to set <code>c</code> to.
    - id: coordTracker
      type: SudokuSpice.Data.CoordinateTracker
      description: "\nThe coordinates of unset squares impacted by this change will be tracked in this\ntracker.\n"
    content.vb: Sub Update(ByRef c As Coordinate, val As Integer, coordTracker As CoordinateTracker)
  overload: SudokuSpice.Rules.ISudokuRule.Update*
  nameWithType.vb: ISudokuRule.Update(ByRef Coordinate, Int32, CoordinateTracker)
  fullName.vb: SudokuSpice.Rules.ISudokuRule.Update(ByRef SudokuSpice.Data.Coordinate, System.Int32, SudokuSpice.Data.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  id: CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.Rules.ISudokuRule
  langs:
  - csharp
  - vb
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: ISudokuRule.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/Rules/ISudokuRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CopyWithNewReference
    path: ../SudokuSpice/Rules/ISudokuRule.cs
    startLine: 76
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Rules
  summary: "\nCreates a deep copy of this ISudokuRule, with any internal <code>IReadOnlyPuzzle</code>\nreferences updated to the given puzzle.\n"
  example: []
  syntax:
    content: ISudokuRule CopyWithNewReference(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: "\nThe new puzzle reference to use. To ensure this rule&apos;s internal state is correct, this\npuzzle should contain the same data as the current puzzle referenced by this rule.\n"
    return:
      type: SudokuSpice.Rules.ISudokuRule
    content.vb: Function CopyWithNewReference(puzzle As IReadOnlyPuzzle) As ISudokuRule
  overload: SudokuSpice.Rules.ISudokuRule.CopyWithNewReference*
references:
- uid: SudokuSpice.Rules.ISudokuRuleKeeper
  commentId: T:SudokuSpice.Rules.ISudokuRuleKeeper
  parent: SudokuSpice.Rules
  name: ISudokuRuleKeeper
  nameWithType: ISudokuRuleKeeper
  fullName: SudokuSpice.Rules.ISudokuRuleKeeper
- uid: SudokuSpice.Rules
  commentId: N:SudokuSpice.Rules
  name: SudokuSpice.Rules
  nameWithType: SudokuSpice.Rules
  fullName: SudokuSpice.Rules
- uid: SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
  commentId: M:SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
  parent: SudokuSpice.Rules.ISudokuRule
  isExternal: true
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Data.Coordinate, System.Int32, SudokuSpice.Data.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
    name: Update
    nameWithType: ISudokuRule.Update
    fullName: SudokuSpice.Rules.ISudokuRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Data.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Data.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.Data.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.Data.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.Rules.ISudokuRule.Update(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
    name: Update
    nameWithType: ISudokuRule.Update
    fullName: SudokuSpice.Rules.ISudokuRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Data.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Data.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.Data.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.Data.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
  commentId: M:SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
  parent: SudokuSpice.Rules.ISudokuRule
  isExternal: true
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate, System.Int32, SudokuSpice.Data.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Data.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Data.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.Data.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.Data.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.Rules.ISudokuRule.Revert(SudokuSpice.Data.Coordinate@,System.Int32,SudokuSpice.Data.CoordinateTracker)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Data.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Data.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.Data.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.Data.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Data.BitVector
  commentId: T:SudokuSpice.Data.BitVector
  parent: SudokuSpice.Data
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.Data.BitVector
- uid: SudokuSpice.Rules.ISudokuRule.GetPossibleValues*
  commentId: Overload:SudokuSpice.Rules.ISudokuRule.GetPossibleValues
  name: GetPossibleValues
  nameWithType: ISudokuRule.GetPossibleValues
  fullName: SudokuSpice.Rules.ISudokuRule.GetPossibleValues
- uid: SudokuSpice.Data.Coordinate
  commentId: T:SudokuSpice.Data.Coordinate
  parent: SudokuSpice.Data
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Data.Coordinate
- uid: SudokuSpice.Rules.ISudokuRule
  commentId: T:SudokuSpice.Rules.ISudokuRule
  parent: SudokuSpice.Rules
  name: ISudokuRule
  nameWithType: ISudokuRule
  fullName: SudokuSpice.Rules.ISudokuRule
- uid: SudokuSpice.Data
  commentId: N:SudokuSpice.Data
  name: SudokuSpice.Data
  nameWithType: SudokuSpice.Data
  fullName: SudokuSpice.Data
- uid: SudokuSpice.Rules.ISudokuRule.Revert*
  commentId: Overload:SudokuSpice.Rules.ISudokuRule.Revert
  name: Revert
  nameWithType: ISudokuRule.Revert
  fullName: SudokuSpice.Rules.ISudokuRule.Revert
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.Data.CoordinateTracker
  commentId: T:SudokuSpice.Data.CoordinateTracker
  parent: SudokuSpice.Data
  name: CoordinateTracker
  nameWithType: CoordinateTracker
  fullName: SudokuSpice.Data.CoordinateTracker
- uid: SudokuSpice.Rules.ISudokuRule.Update*
  commentId: Overload:SudokuSpice.Rules.ISudokuRule.Update
  name: Update
  nameWithType: ISudokuRule.Update
  fullName: SudokuSpice.Rules.ISudokuRule.Update
- uid: SudokuSpice.Rules.ISudokuRule.CopyWithNewReference*
  commentId: Overload:SudokuSpice.Rules.ISudokuRule.CopyWithNewReference
  name: CopyWithNewReference
  nameWithType: ISudokuRule.CopyWithNewReference
  fullName: SudokuSpice.Rules.ISudokuRule.CopyWithNewReference
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
