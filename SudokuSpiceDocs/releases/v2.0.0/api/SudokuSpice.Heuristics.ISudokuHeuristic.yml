### YamlMime:ManagedReference
items:
- uid: SudokuSpice.Heuristics.ISudokuHeuristic
  commentId: T:SudokuSpice.Heuristics.ISudokuHeuristic
  id: ISudokuHeuristic
  parent: SudokuSpice.Heuristics
  children:
  - SudokuSpice.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.Data.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.Rules.ISudokuRule})
  - SudokuSpice.Heuristics.ISudokuHeuristic.UndoLastUpdate
  - SudokuSpice.Heuristics.ISudokuHeuristic.UpdateAll
  langs:
  - csharp
  - vb
  name: ISudokuHeuristic
  nameWithType: ISudokuHeuristic
  fullName: SudokuSpice.Heuristics.ISudokuHeuristic
  type: Interface
  source:
    remote:
      path: SudokuSpice/Heuristics/ISudokuHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: ISudokuHeuristic
    path: ../SudokuSpice/Heuristics/ISudokuHeuristic.cs
    startLine: 11
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Heuristics
  summary: "\nPerforms some logical trickery to reduce the number of possible values for a square. Unlike\nan <code>ISudokuRule</code>, this depends on the current possible values in the puzzle, not just\nthe currently set values.\n"
  example: []
  syntax:
    content: public interface ISudokuHeuristic
    content.vb: Public Interface ISudokuHeuristic
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SudokuSpice.Heuristics.ISudokuHeuristic.UpdateAll
  commentId: M:SudokuSpice.Heuristics.ISudokuHeuristic.UpdateAll
  id: UpdateAll
  parent: SudokuSpice.Heuristics.ISudokuHeuristic
  langs:
  - csharp
  - vb
  name: UpdateAll()
  nameWithType: ISudokuHeuristic.UpdateAll()
  fullName: SudokuSpice.Heuristics.ISudokuHeuristic.UpdateAll()
  type: Method
  source:
    remote:
      path: SudokuSpice/Heuristics/ISudokuHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: UpdateAll
    path: ../SudokuSpice/Heuristics/ISudokuHeuristic.cs
    startLine: 17
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Heuristics
  summary: "\nUpdates all the current possible values.\n"
  example: []
  syntax:
    content: bool UpdateAll()
    return:
      type: System.Boolean
      description: Returns true if any modifications were made.
    content.vb: Function UpdateAll As Boolean
  overload: SudokuSpice.Heuristics.ISudokuHeuristic.UpdateAll*
- uid: SudokuSpice.Heuristics.ISudokuHeuristic.UndoLastUpdate
  commentId: M:SudokuSpice.Heuristics.ISudokuHeuristic.UndoLastUpdate
  id: UndoLastUpdate
  parent: SudokuSpice.Heuristics.ISudokuHeuristic
  langs:
  - csharp
  - vb
  name: UndoLastUpdate()
  nameWithType: ISudokuHeuristic.UndoLastUpdate()
  fullName: SudokuSpice.Heuristics.ISudokuHeuristic.UndoLastUpdate()
  type: Method
  source:
    remote:
      path: SudokuSpice/Heuristics/ISudokuHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: UndoLastUpdate
    path: ../SudokuSpice/Heuristics/ISudokuHeuristic.cs
    startLine: 22
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Heuristics
  summary: "\nUndoes the last modifications made by this heuristic.\n"
  example: []
  syntax:
    content: void UndoLastUpdate()
    content.vb: Sub UndoLastUpdate
  overload: SudokuSpice.Heuristics.ISudokuHeuristic.UndoLastUpdate*
- uid: SudokuSpice.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.Data.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.Rules.ISudokuRule})
  commentId: M:SudokuSpice.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.Data.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.Rules.ISudokuRule})
  id: CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.Data.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.Rules.ISudokuRule})
  parent: SudokuSpice.Heuristics.ISudokuHeuristic
  langs:
  - csharp
  - vb
  name: CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType: ISudokuHeuristic.CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues, IReadOnlyList<ISudokuRule>)
  fullName: SudokuSpice.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.Data.PossibleValues, System.Collections.Generic.IReadOnlyList<SudokuSpice.Rules.ISudokuRule>)
  type: Method
  source:
    remote:
      path: SudokuSpice/Heuristics/ISudokuHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CopyWithNewReferences
    path: ../SudokuSpice/Heuristics/ISudokuHeuristic.cs
    startLine: 29
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.Heuristics
  summary: "\nCreates a deep copy of this heuristic, replacing internal references with the ones\nprovided. These references may or may not be used during the copy, depending on the\nimplementation of the heuristic.\n"
  example: []
  syntax:
    content: ISudokuHeuristic CopyWithNewReferences(IReadOnlyPuzzle puzzle, PossibleValues possibleValues, IReadOnlyList<ISudokuRule> rules)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
    - id: possibleValues
      type: SudokuSpice.Data.PossibleValues
    - id: rules
      type: System.Collections.Generic.IReadOnlyList{SudokuSpice.Rules.ISudokuRule}
    return:
      type: SudokuSpice.Heuristics.ISudokuHeuristic
    content.vb: Function CopyWithNewReferences(puzzle As IReadOnlyPuzzle, possibleValues As PossibleValues, rules As IReadOnlyList(Of ISudokuRule)) As ISudokuHeuristic
  overload: SudokuSpice.Heuristics.ISudokuHeuristic.CopyWithNewReferences*
  nameWithType.vb: ISudokuHeuristic.CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues, IReadOnlyList(Of ISudokuRule))
  fullName.vb: SudokuSpice.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.Data.PossibleValues, System.Collections.Generic.IReadOnlyList(Of SudokuSpice.Rules.ISudokuRule))
  name.vb: CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues, IReadOnlyList(Of ISudokuRule))
references:
- uid: SudokuSpice.Heuristics
  commentId: N:SudokuSpice.Heuristics
  name: SudokuSpice.Heuristics
  nameWithType: SudokuSpice.Heuristics
  fullName: SudokuSpice.Heuristics
- uid: SudokuSpice.Heuristics.ISudokuHeuristic.UpdateAll*
  commentId: Overload:SudokuSpice.Heuristics.ISudokuHeuristic.UpdateAll
  name: UpdateAll
  nameWithType: ISudokuHeuristic.UpdateAll
  fullName: SudokuSpice.Heuristics.ISudokuHeuristic.UpdateAll
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.Heuristics.ISudokuHeuristic.UndoLastUpdate*
  commentId: Overload:SudokuSpice.Heuristics.ISudokuHeuristic.UndoLastUpdate
  name: UndoLastUpdate
  nameWithType: ISudokuHeuristic.UndoLastUpdate
  fullName: SudokuSpice.Heuristics.ISudokuHeuristic.UndoLastUpdate
- uid: SudokuSpice.Heuristics.ISudokuHeuristic.CopyWithNewReferences*
  commentId: Overload:SudokuSpice.Heuristics.ISudokuHeuristic.CopyWithNewReferences
  name: CopyWithNewReferences
  nameWithType: ISudokuHeuristic.CopyWithNewReferences
  fullName: SudokuSpice.Heuristics.ISudokuHeuristic.CopyWithNewReferences
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice.Data.PossibleValues
  commentId: T:SudokuSpice.Data.PossibleValues
  parent: SudokuSpice.Data
  name: PossibleValues
  nameWithType: PossibleValues
  fullName: SudokuSpice.Data.PossibleValues
- uid: System.Collections.Generic.IReadOnlyList{SudokuSpice.Rules.ISudokuRule}
  commentId: T:System.Collections.Generic.IReadOnlyList{SudokuSpice.Rules.ISudokuRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ISudokuRule>
  nameWithType: IReadOnlyList<ISudokuRule>
  fullName: System.Collections.Generic.IReadOnlyList<SudokuSpice.Rules.ISudokuRule>
  nameWithType.vb: IReadOnlyList(Of ISudokuRule)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of SudokuSpice.Rules.ISudokuRule)
  name.vb: IReadOnlyList(Of ISudokuRule)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.Rules.ISudokuRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.Rules.ISudokuRule
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Heuristics.ISudokuHeuristic
  commentId: T:SudokuSpice.Heuristics.ISudokuHeuristic
  parent: SudokuSpice.Heuristics
  name: ISudokuHeuristic
  nameWithType: ISudokuHeuristic
  fullName: SudokuSpice.Heuristics.ISudokuHeuristic
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.Data
  commentId: N:SudokuSpice.Data
  name: SudokuSpice.Data
  nameWithType: SudokuSpice.Data
  fullName: SudokuSpice.Data
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
