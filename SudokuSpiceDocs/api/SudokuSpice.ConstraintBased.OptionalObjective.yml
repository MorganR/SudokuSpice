### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.OptionalObjective
  commentId: T:SudokuSpice.ConstraintBased.OptionalObjective
  id: OptionalObjective
  parent: SudokuSpice.ConstraintBased
  children:
  - SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities(System.ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility},System.Int32)
  - SudokuSpice.ConstraintBased.OptionalObjective.GetUnknownDirectPossibilities
  - SudokuSpice.ConstraintBased.OptionalObjective.IsConcrete
  - SudokuSpice.ConstraintBased.OptionalObjective.State
  langs:
  - csharp
  - vb
  name: OptionalObjective
  nameWithType: OptionalObjective
  fullName: SudokuSpice.ConstraintBased.OptionalObjective
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/OptionalObjective.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: OptionalObjective
    path: ../SudokuSpice/ConstraintBased/OptionalObjective.cs
    startLine: 24
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nAn optional objective in an <xref href=\"SudokuSpice.ConstraintBased.ExactCoverGraph\" data-throw-if-not-resolved=\"false\"></xref>. An optional objective is both\nan <xref href=\"SudokuSpice.ConstraintBased.IObjective\" data-throw-if-not-resolved=\"false\"></xref> and an <xref href=\"SudokuSpice.ConstraintBased.IPossibility\" data-throw-if-not-resolved=\"false\"></xref>.\n\nThis can be satisfied if one or more attached <xref href=\"SudokuSpice.ConstraintBased.IPossibility\" data-throw-if-not-resolved=\"false\"></xref> objects are\nselected. Once satisfied, this drops any remaining unknown possibilities, and notifies\nparent objectives that to select this possibility.\n\nUnlike <xref href=\"SudokuSpice.ConstraintBased.Objective\" data-throw-if-not-resolved=\"false\"></xref>s, this class can be dropped. Dropping this objetive does\nnot immediately impact attached possibilities. These possibilities may still be dropped\nor selected, as long as this objective does not become satisfied. If selecting a\npossibility would satisfy a dropped optional objective, then the call to\n<xref href=\"SudokuSpice.ConstraintBased.IObjective.TrySelectPossibility(SudokuSpice.ConstraintBased.Link)\" data-throw-if-not-resolved=\"false\"></xref> will fail.\n\nAll <code>OptionalObjective</code> objects must eventually be descendents of at least one\n<xref href=\"SudokuSpice.ConstraintBased.Objective\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public sealed class OptionalObjective : IOptionalObjective, IObjective, IPossibility'
    content.vb: >-
      Public NotInheritable Class OptionalObjective
          Implements IOptionalObjective, IObjective, IPossibility
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.ConstraintBased.IOptionalObjective
  - SudokuSpice.ConstraintBased.IObjective
  - SudokuSpice.ConstraintBased.IPossibility
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: SudokuSpice.ConstraintBased.OptionalObjective.IsConcrete
  commentId: P:SudokuSpice.ConstraintBased.OptionalObjective.IsConcrete
  id: IsConcrete
  parent: SudokuSpice.ConstraintBased.OptionalObjective
  langs:
  - csharp
  - vb
  name: IsConcrete
  nameWithType: OptionalObjective.IsConcrete
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.IsConcrete
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/OptionalObjective.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: IsConcrete
    path: ../SudokuSpice/ConstraintBased/OptionalObjective.cs
    startLine: 62
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nTrue if this possibility is a concrete possibility, i.e. a leaf node in the graph, as\nopposed to a group of other possibilities.\n"
  example: []
  syntax:
    content: public bool IsConcrete { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsConcrete As Boolean
  overload: SudokuSpice.ConstraintBased.OptionalObjective.IsConcrete*
  implements:
  - SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.ConstraintBased.OptionalObjective.State
  commentId: P:SudokuSpice.ConstraintBased.OptionalObjective.State
  id: State
  parent: SudokuSpice.ConstraintBased.OptionalObjective
  langs:
  - csharp
  - vb
  name: State
  nameWithType: OptionalObjective.State
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.State
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/OptionalObjective.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: State
    path: ../SudokuSpice/ConstraintBased/OptionalObjective.cs
    startLine: 64
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nThe current state of this node in the <xref href=\"SudokuSpice.ConstraintBased.ExactCoverGraph\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public NodeState State { get; }
    parameters: []
    return:
      type: SudokuSpice.ConstraintBased.NodeState
    content.vb: Public ReadOnly Property State As NodeState
  overload: SudokuSpice.ConstraintBased.OptionalObjective.State*
  implements:
  - SudokuSpice.ConstraintBased.IObjective.State
  - SudokuSpice.ConstraintBased.IPossibility.State
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities(System.ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility},System.Int32)
  commentId: M:SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities(System.ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility},System.Int32)
  id: CreateWithPossibilities(System.ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility},System.Int32)
  parent: SudokuSpice.ConstraintBased.OptionalObjective
  langs:
  - csharp
  - vb
  name: CreateWithPossibilities(ReadOnlySpan<IPossibility>, Int32)
  nameWithType: OptionalObjective.CreateWithPossibilities(ReadOnlySpan<IPossibility>, Int32)
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities(System.ReadOnlySpan<SudokuSpice.ConstraintBased.IPossibility>, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/OptionalObjective.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CreateWithPossibilities
    path: ../SudokuSpice/ConstraintBased/OptionalObjective.cs
    startLine: 91
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nCreates an optional objective with the given possibilities attached. This objective\nwill be satisfied when <code data-dev-comment-type=\"paramref\" class=\"paramref\">countToSatisfy</code> of these possibilities are\nselected.\n\nNote that this results in an <xref href=\"SudokuSpice.ConstraintBased.OptionalObjective\" data-throw-if-not-resolved=\"false\"></xref> with no parent objectives.\nThe returned objective must eventually be connected to at least one top-level required\n<xref href=\"SudokuSpice.ConstraintBased.Objective\" data-throw-if-not-resolved=\"false\"></xref> object in order to behave correctly.\n"
  example: []
  syntax:
    content: public static OptionalObjective CreateWithPossibilities(ReadOnlySpan<IPossibility> possibilities, int countToSatisfy)
    parameters:
    - id: possibilities
      type: System.ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility}
      description: The possibilities that could satisfy this objective.
    - id: countToSatisfy
      type: System.Int32
      description: "\nThe number of possibilities that must be selected to satisfy this objective.\n"
    return:
      type: SudokuSpice.ConstraintBased.OptionalObjective
      description: The newly constructed optional objective.
    content.vb: Public Shared Function CreateWithPossibilities(possibilities As ReadOnlySpan(Of IPossibility), countToSatisfy As Integer) As OptionalObjective
  overload: SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIf the <code data-dev-comment-type=\"paramref\" class=\"paramref\">countToSatisfy</code> is less than 1 or is impossible with the\ngiven number of <code data-dev-comment-type=\"paramref\" class=\"paramref\">possibilities</code>.\n"
  nameWithType.vb: OptionalObjective.CreateWithPossibilities(ReadOnlySpan(Of IPossibility), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities(System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.IPossibility), System.Int32)
  name.vb: CreateWithPossibilities(ReadOnlySpan(Of IPossibility), Int32)
- uid: SudokuSpice.ConstraintBased.OptionalObjective.GetUnknownDirectPossibilities
  commentId: M:SudokuSpice.ConstraintBased.OptionalObjective.GetUnknownDirectPossibilities
  id: GetUnknownDirectPossibilities
  parent: SudokuSpice.ConstraintBased.OptionalObjective
  langs:
  - csharp
  - vb
  name: GetUnknownDirectPossibilities()
  nameWithType: OptionalObjective.GetUnknownDirectPossibilities()
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.GetUnknownDirectPossibilities()
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/OptionalObjective.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetUnknownDirectPossibilities
    path: ../SudokuSpice/ConstraintBased/OptionalObjective.cs
    startLine: 106
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nRetrieves any possibilities that are direct descendents of this objective and whose\nstates are unknown.\n"
  example: []
  syntax:
    content: public IEnumerable<IPossibility> GetUnknownDirectPossibilities()
    return:
      type: System.Collections.Generic.IEnumerable{SudokuSpice.ConstraintBased.IPossibility}
    content.vb: Public Function GetUnknownDirectPossibilities As IEnumerable(Of IPossibility)
  overload: SudokuSpice.ConstraintBased.OptionalObjective.GetUnknownDirectPossibilities*
  implements:
  - SudokuSpice.ConstraintBased.IObjective.GetUnknownDirectPossibilities
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverGraph
  parent: SudokuSpice.ConstraintBased
  name: ExactCoverGraph
  nameWithType: ExactCoverGraph
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph
- uid: SudokuSpice.ConstraintBased.IObjective
  commentId: T:SudokuSpice.ConstraintBased.IObjective
  parent: SudokuSpice.ConstraintBased
  name: IObjective
  nameWithType: IObjective
  fullName: SudokuSpice.ConstraintBased.IObjective
- uid: SudokuSpice.ConstraintBased.IPossibility
  commentId: T:SudokuSpice.ConstraintBased.IPossibility
  parent: SudokuSpice.ConstraintBased
  name: IPossibility
  nameWithType: IPossibility
  fullName: SudokuSpice.ConstraintBased.IPossibility
- uid: SudokuSpice.ConstraintBased.Objective
  commentId: T:SudokuSpice.ConstraintBased.Objective
  parent: SudokuSpice.ConstraintBased
  name: Objective
  nameWithType: Objective
  fullName: SudokuSpice.ConstraintBased.Objective
- uid: SudokuSpice.ConstraintBased.IObjective.TrySelectPossibility(SudokuSpice.ConstraintBased.Link)
  commentId: M:SudokuSpice.ConstraintBased.IObjective.TrySelectPossibility(SudokuSpice.ConstraintBased.Link)
  isExternal: true
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.ConstraintBased.IOptionalObjective
  commentId: T:SudokuSpice.ConstraintBased.IOptionalObjective
  parent: SudokuSpice.ConstraintBased
  name: IOptionalObjective
  nameWithType: IOptionalObjective
  fullName: SudokuSpice.ConstraintBased.IOptionalObjective
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.ConstraintBased.OptionalObjective.IsConcrete*
  commentId: Overload:SudokuSpice.ConstraintBased.OptionalObjective.IsConcrete
  name: IsConcrete
  nameWithType: OptionalObjective.IsConcrete
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.IsConcrete
- uid: SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  commentId: P:SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  parent: SudokuSpice.ConstraintBased.IPossibility
  name: IsConcrete
  nameWithType: IPossibility.IsConcrete
  fullName: SudokuSpice.ConstraintBased.IPossibility.IsConcrete
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.ConstraintBased.OptionalObjective.State*
  commentId: Overload:SudokuSpice.ConstraintBased.OptionalObjective.State
  name: State
  nameWithType: OptionalObjective.State
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.State
- uid: SudokuSpice.ConstraintBased.IObjective.State
  commentId: P:SudokuSpice.ConstraintBased.IObjective.State
  parent: SudokuSpice.ConstraintBased.IObjective
  name: State
  nameWithType: IObjective.State
  fullName: SudokuSpice.ConstraintBased.IObjective.State
- uid: SudokuSpice.ConstraintBased.IPossibility.State
  commentId: P:SudokuSpice.ConstraintBased.IPossibility.State
  parent: SudokuSpice.ConstraintBased.IPossibility
  name: State
  nameWithType: IPossibility.State
  fullName: SudokuSpice.ConstraintBased.IPossibility.State
- uid: SudokuSpice.ConstraintBased.NodeState
  commentId: T:SudokuSpice.ConstraintBased.NodeState
  parent: SudokuSpice.ConstraintBased
  name: NodeState
  nameWithType: NodeState
  fullName: SudokuSpice.ConstraintBased.NodeState
- uid: SudokuSpice.ConstraintBased.OptionalObjective
  commentId: T:SudokuSpice.ConstraintBased.OptionalObjective
  parent: SudokuSpice.ConstraintBased
  name: OptionalObjective
  nameWithType: OptionalObjective
  fullName: SudokuSpice.ConstraintBased.OptionalObjective
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities*
  commentId: Overload:SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities
  name: CreateWithPossibilities
  nameWithType: OptionalObjective.CreateWithPossibilities
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities
- uid: System.ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility}
  commentId: T:System.ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<IPossibility>
  nameWithType: ReadOnlySpan<IPossibility>
  fullName: System.ReadOnlySpan<SudokuSpice.ConstraintBased.IPossibility>
  nameWithType.vb: ReadOnlySpan(Of IPossibility)
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.IPossibility)
  name.vb: ReadOnlySpan(Of IPossibility)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.IPossibility
    name: IPossibility
    nameWithType: IPossibility
    fullName: SudokuSpice.ConstraintBased.IPossibility
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.IPossibility
    name: IPossibility
    nameWithType: IPossibility
    fullName: SudokuSpice.ConstraintBased.IPossibility
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.OptionalObjective.GetUnknownDirectPossibilities*
  commentId: Overload:SudokuSpice.ConstraintBased.OptionalObjective.GetUnknownDirectPossibilities
  name: GetUnknownDirectPossibilities
  nameWithType: OptionalObjective.GetUnknownDirectPossibilities
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.GetUnknownDirectPossibilities
- uid: SudokuSpice.ConstraintBased.IObjective.GetUnknownDirectPossibilities
  commentId: M:SudokuSpice.ConstraintBased.IObjective.GetUnknownDirectPossibilities
  parent: SudokuSpice.ConstraintBased.IObjective
  name: GetUnknownDirectPossibilities()
  nameWithType: IObjective.GetUnknownDirectPossibilities()
  fullName: SudokuSpice.ConstraintBased.IObjective.GetUnknownDirectPossibilities()
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.IObjective.GetUnknownDirectPossibilities
    name: GetUnknownDirectPossibilities
    nameWithType: IObjective.GetUnknownDirectPossibilities
    fullName: SudokuSpice.ConstraintBased.IObjective.GetUnknownDirectPossibilities
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.IObjective.GetUnknownDirectPossibilities
    name: GetUnknownDirectPossibilities
    nameWithType: IObjective.GetUnknownDirectPossibilities
    fullName: SudokuSpice.ConstraintBased.IObjective.GetUnknownDirectPossibilities
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SudokuSpice.ConstraintBased.IPossibility}
  commentId: T:System.Collections.Generic.IEnumerable{SudokuSpice.ConstraintBased.IPossibility}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IPossibility>
  nameWithType: IEnumerable<IPossibility>
  fullName: System.Collections.Generic.IEnumerable<SudokuSpice.ConstraintBased.IPossibility>
  nameWithType.vb: IEnumerable(Of IPossibility)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SudokuSpice.ConstraintBased.IPossibility)
  name.vb: IEnumerable(Of IPossibility)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.IPossibility
    name: IPossibility
    nameWithType: IPossibility
    fullName: SudokuSpice.ConstraintBased.IPossibility
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.IPossibility
    name: IPossibility
    nameWithType: IPossibility
    fullName: SudokuSpice.ConstraintBased.IPossibility
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
