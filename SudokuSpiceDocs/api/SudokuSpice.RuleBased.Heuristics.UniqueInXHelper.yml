### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
  id: UniqueInXHelper
  parent: SudokuSpice.RuleBased.Heuristics
  children:
  - SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.#ctor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  - SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  - SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate
  - SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique(SudokuSpice.ReadOnlySpan{SudokuSpice.BitVector},SudokuSpice.ReadOnlySpan{SudokuSpice.Coordinate[]})
  langs:
  - csharp
  - vb
  name: UniqueInXHelper
  nameWithType: UniqueInXHelper
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInXHelper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: UniqueInXHelper
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInXHelper.cs
    startLine: 5
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  syntax:
    content: 'public class UniqueInXHelper : object'
    content.vb: >-
      Public Class UniqueInXHelper
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.#ctor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.#ctor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  id: '#ctor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)'
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
  langs:
  - csharp
  - vb
  name: UniqueInXHelper(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInXHelper.UniqueInXHelper(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UniqueInXHelper(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInXHelper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInXHelper.cs
    startLine: 11
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  syntax:
    content: public UniqueInXHelper(IReadOnlyPuzzleWithMutablePossibleValues puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    content.vb: Public Sub New(puzzle As IReadOnlyPuzzleWithMutablePossibleValues)
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  id: CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
  langs:
  - csharp
  - vb
  name: CopyWithNewReference(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInXHelper.CopyWithNewReference(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInXHelper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CopyWithNewReference
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInXHelper.cs
    startLine: 25
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  syntax:
    content: public UniqueInXHelper CopyWithNewReference(IReadOnlyPuzzleWithMutablePossibleValues puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    return:
      type: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
    content.vb: Public Function CopyWithNewReference(puzzle As IReadOnlyPuzzleWithMutablePossibleValues) As UniqueInXHelper
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate
  id: UndoLastUpdate
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
  langs:
  - csharp
  - vb
  name: UndoLastUpdate()
  nameWithType: UniqueInXHelper.UndoLastUpdate()
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInXHelper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: UndoLastUpdate
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInXHelper.cs
    startLine: 30
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  syntax:
    content: public void UndoLastUpdate()
    content.vb: Public Sub UndoLastUpdate
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique(SudokuSpice.ReadOnlySpan{SudokuSpice.BitVector},SudokuSpice.ReadOnlySpan{SudokuSpice.Coordinate[]})
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique(SudokuSpice.ReadOnlySpan{SudokuSpice.BitVector},SudokuSpice.ReadOnlySpan{SudokuSpice.Coordinate[]})
  id: UpdateIfUnique(SudokuSpice.ReadOnlySpan{SudokuSpice.BitVector},SudokuSpice.ReadOnlySpan{SudokuSpice.Coordinate[]})
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
  langs:
  - csharp
  - vb
  name: UpdateIfUnique(ReadOnlySpan<BitVector>, ReadOnlySpan<Coordinate[]>)
  nameWithType: UniqueInXHelper.UpdateIfUnique(ReadOnlySpan<BitVector>, ReadOnlySpan<Coordinate[]>)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique(SudokuSpice.ReadOnlySpan<SudokuSpice.BitVector>, SudokuSpice.ReadOnlySpan<SudokuSpice.Coordinate[]>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInXHelper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: UpdateIfUnique
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInXHelper.cs
    startLine: 39
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  syntax:
    content: public bool UpdateIfUnique(ReadOnlySpan<BitVector> possibleValuesToCheck, ReadOnlySpan<Coordinate[]> coordinatesToCheck)
    parameters:
    - id: possibleValuesToCheck
      type: SudokuSpice.ReadOnlySpan{SudokuSpice.BitVector}
    - id: coordinatesToCheck
      type: SudokuSpice.ReadOnlySpan{SudokuSpice.Coordinate[]}
    return:
      type: System.Boolean
    content.vb: Public Function UpdateIfUnique(possibleValuesToCheck As ReadOnlySpan(Of BitVector), coordinatesToCheck As ReadOnlySpan(Of Coordinate())) As Boolean
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique*
  nameWithType.vb: UniqueInXHelper.UpdateIfUnique(ReadOnlySpan(Of BitVector), ReadOnlySpan(Of Coordinate()))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique(SudokuSpice.ReadOnlySpan(Of SudokuSpice.BitVector), SudokuSpice.ReadOnlySpan(Of SudokuSpice.Coordinate()))
  name.vb: UpdateIfUnique(ReadOnlySpan(Of BitVector), ReadOnlySpan(Of Coordinate()))
references:
- uid: SudokuSpice.RuleBased.Heuristics
  commentId: N:SudokuSpice.RuleBased.Heuristics
  name: SudokuSpice.RuleBased.Heuristics
  nameWithType: SudokuSpice.RuleBased.Heuristics
  fullName: SudokuSpice.RuleBased.Heuristics
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.#ctor
  name: UniqueInXHelper
  nameWithType: UniqueInXHelper.UniqueInXHelper
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UniqueInXHelper
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzleWithMutablePossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference
  name: CopyWithNewReference
  nameWithType: UniqueInXHelper.CopyWithNewReference
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
  parent: SudokuSpice.RuleBased.Heuristics
  name: UniqueInXHelper
  nameWithType: UniqueInXHelper
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate
  name: UndoLastUpdate
  nameWithType: UniqueInXHelper.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique
  name: UpdateIfUnique
  nameWithType: UniqueInXHelper.UpdateIfUnique
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique
- uid: SudokuSpice.ReadOnlySpan{SudokuSpice.BitVector}
  commentId: '!:SudokuSpice.ReadOnlySpan{SudokuSpice.BitVector}'
  definition: SudokuSpice.ReadOnlySpan`1
  name: ReadOnlySpan<BitVector>
  nameWithType: ReadOnlySpan<BitVector>
  fullName: SudokuSpice.ReadOnlySpan<SudokuSpice.BitVector>
  nameWithType.vb: ReadOnlySpan(Of BitVector)
  fullName.vb: SudokuSpice.ReadOnlySpan(Of SudokuSpice.BitVector)
  name.vb: ReadOnlySpan(Of BitVector)
  spec.csharp:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.BitVector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.BitVector
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ReadOnlySpan{SudokuSpice.Coordinate[]}
  commentId: '!:SudokuSpice.ReadOnlySpan{SudokuSpice.Coordinate[]}'
  definition: SudokuSpice.ReadOnlySpan`1
  name: ReadOnlySpan<Coordinate[]>
  nameWithType: ReadOnlySpan<Coordinate[]>
  fullName: SudokuSpice.ReadOnlySpan<SudokuSpice.Coordinate[]>
  nameWithType.vb: ReadOnlySpan(Of Coordinate())
  fullName.vb: SudokuSpice.ReadOnlySpan(Of SudokuSpice.Coordinate())
  name.vb: ReadOnlySpan(Of Coordinate())
  spec.csharp:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<>
  nameWithType: ReadOnlySpan<>
  fullName: SudokuSpice.ReadOnlySpan<>
  nameWithType.vb: ReadOnlySpan(Of )
  fullName.vb: SudokuSpice.ReadOnlySpan(Of )
  name.vb: ReadOnlySpan(Of )
  spec.csharp:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
