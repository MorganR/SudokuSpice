### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  commentId: T:SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  id: BoxUniquenessConstraint
  parent: SudokuSpice.ConstraintBased.Constraints
  children:
  - SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  langs:
  - csharp
  - vb
  name: BoxUniquenessConstraint
  nameWithType: BoxUniquenessConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/BoxUniquenessConstraint.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: BoxUniquenessConstraint
    path: ../SudokuSpice/ConstraintBased/Constraints/BoxUniquenessConstraint.cs
    startLine: 7
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nEnforces the constraint that all values in a box must be unique.\n"
  example: []
  syntax:
    content: 'public class BoxUniquenessConstraint : object, IConstraint'
    content.vb: >-
      Public Class BoxUniquenessConstraint
          Inherits Object
          Implements IConstraint
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.ConstraintBased.Constraints.IConstraint
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  id: Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  parent: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  langs:
  - csharp
  - vb
  name: Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
  nameWithType: BoxUniquenessConstraint.Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/BoxUniquenessConstraint.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Constrain
    path: ../SudokuSpice/ConstraintBased/Constraints/BoxUniquenessConstraint.cs
    startLine: 10
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nAdds necessary <xref href=\"SudokuSpice.ConstraintBased.ConstraintHeader\" data-throw-if-not-resolved=\"false\"></xref>s and links to the given\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">matrix</code>.\n"
  remarks: "\nThis skips adding <code>ConstraintHeaders</code> that are already satisfied by the given\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">puzzle</code>. Instead, it drops the corresponding\n<xref href=\"SudokuSpice.ConstraintBased.PossibleValue\" data-throw-if-not-resolved=\"false\"></xref>s that would have been included in these headers.\n\nNote: See <xref href=\"SudokuSpice.ConstraintBased.ExactCoverMatrix\" data-throw-if-not-resolved=\"false\"></xref> to understand how the matrix works.\n"
  example: []
  syntax:
    content: public void Constrain(IReadOnlyPuzzle puzzle, ExactCoverMatrix matrix)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: The puzzle to solve.
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: The exact-cover matrix to constrain.
    content.vb: Public Sub Constrain(puzzle As IReadOnlyPuzzle, matrix As ExactCoverMatrix)
  overload: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain*
  implements:
  - SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.ConstraintBased.Constraints
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint
  commentId: T:SudokuSpice.ConstraintBased.Constraints.IConstraint
  parent: SudokuSpice.ConstraintBased.Constraints
  name: IConstraint
  nameWithType: IConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain
  name: Constrain
  nameWithType: BoxUniquenessConstraint.Constrain
  fullName: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  parent: SudokuSpice.ConstraintBased.Constraints.IConstraint
  name: Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
  nameWithType: IConstraint.Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
    name: Constrain
    nameWithType: IConstraint.Constrain
    fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
    name: Constrain
    nameWithType: IConstraint.Constrain
    fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix
  parent: SudokuSpice.ConstraintBased
  name: ExactCoverMatrix
  nameWithType: ExactCoverMatrix
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
