### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  id: SudokuSpice.ConstraintBased
  children:
  - SudokuSpice.ConstraintBased.ConstraintBasedGenerator`1
  - SudokuSpice.ConstraintBased.ConstraintBasedSolver`1
  - SudokuSpice.ConstraintBased.ConstraintHeader`1
  - SudokuSpice.ConstraintBased.ExactCoverMatrix`1
  - SudokuSpice.ConstraintBased.PossibleSquareState
  - SudokuSpice.ConstraintBased.PossibleSquareValue`1
  - SudokuSpice.ConstraintBased.Square`1
  langs:
  - csharp
  - vb
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
  type: Namespace
  assemblies:
  - SudokuSpice
references:
- uid: SudokuSpice.ConstraintBased.ConstraintBasedGenerator`1
  commentId: T:SudokuSpice.ConstraintBased.ConstraintBasedGenerator`1
  name: ConstraintBasedGenerator<TPuzzle>
  nameWithType: ConstraintBasedGenerator<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.ConstraintBasedGenerator<TPuzzle>
  nameWithType.vb: ConstraintBasedGenerator(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.ConstraintBasedGenerator(Of TPuzzle)
  name.vb: ConstraintBasedGenerator(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.ConstraintBasedGenerator`1
    name: ConstraintBasedGenerator
    nameWithType: ConstraintBasedGenerator
    fullName: SudokuSpice.ConstraintBased.ConstraintBasedGenerator
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.ConstraintBasedGenerator`1
    name: ConstraintBasedGenerator
    nameWithType: ConstraintBasedGenerator
    fullName: SudokuSpice.ConstraintBased.ConstraintBasedGenerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ConstraintBasedSolver`1
  commentId: T:SudokuSpice.ConstraintBased.ConstraintBasedSolver`1
  name: ConstraintBasedSolver<TPuzzle>
  nameWithType: ConstraintBasedSolver<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.ConstraintBasedSolver<TPuzzle>
  nameWithType.vb: ConstraintBasedSolver(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.ConstraintBasedSolver(Of TPuzzle)
  name.vb: ConstraintBasedSolver(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.ConstraintBasedSolver`1
    name: ConstraintBasedSolver
    nameWithType: ConstraintBasedSolver
    fullName: SudokuSpice.ConstraintBased.ConstraintBasedSolver
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.ConstraintBasedSolver`1
    name: ConstraintBasedSolver
    nameWithType: ConstraintBasedSolver
    fullName: SudokuSpice.ConstraintBased.ConstraintBasedSolver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ConstraintHeader`1
  commentId: T:SudokuSpice.ConstraintBased.ConstraintHeader`1
  name: ConstraintHeader<TPuzzle>
  nameWithType: ConstraintHeader<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.ConstraintHeader<TPuzzle>
  nameWithType.vb: ConstraintHeader(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.ConstraintHeader(Of TPuzzle)
  name.vb: ConstraintHeader(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.ConstraintHeader`1
    name: ConstraintHeader
    nameWithType: ConstraintHeader
    fullName: SudokuSpice.ConstraintBased.ConstraintHeader
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.ConstraintHeader`1
    name: ConstraintHeader
    nameWithType: ConstraintHeader
    fullName: SudokuSpice.ConstraintBased.ConstraintHeader
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix`1
  name: ExactCoverMatrix<TPuzzle>
  nameWithType: ExactCoverMatrix<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix<TPuzzle>
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.ExactCoverMatrix(Of TPuzzle)
  name.vb: ExactCoverMatrix(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.PossibleSquareState
  commentId: T:SudokuSpice.ConstraintBased.PossibleSquareState
  parent: SudokuSpice.ConstraintBased
  name: PossibleSquareState
  nameWithType: PossibleSquareState
  fullName: SudokuSpice.ConstraintBased.PossibleSquareState
- uid: SudokuSpice.ConstraintBased.PossibleSquareValue`1
  commentId: T:SudokuSpice.ConstraintBased.PossibleSquareValue`1
  name: PossibleSquareValue<TPuzzle>
  nameWithType: PossibleSquareValue<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.PossibleSquareValue<TPuzzle>
  nameWithType.vb: PossibleSquareValue(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.PossibleSquareValue(Of TPuzzle)
  name.vb: PossibleSquareValue(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.PossibleSquareValue`1
    name: PossibleSquareValue
    nameWithType: PossibleSquareValue
    fullName: SudokuSpice.ConstraintBased.PossibleSquareValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.PossibleSquareValue`1
    name: PossibleSquareValue
    nameWithType: PossibleSquareValue
    fullName: SudokuSpice.ConstraintBased.PossibleSquareValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.Square`1
  commentId: T:SudokuSpice.ConstraintBased.Square`1
  name: Square<TPuzzle>
  nameWithType: Square<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.Square<TPuzzle>
  nameWithType.vb: Square(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.Square(Of TPuzzle)
  name.vb: Square(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.Square`1
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.Square`1
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
