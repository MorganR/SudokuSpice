### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  id: StandardHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  children:
  - SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker,SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker,SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  - SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  - SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  - SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
  - SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
  langs:
  - csharp
  - vb
  name: StandardHeuristic
  nameWithType: StandardHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/StandardHeuristic.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: StandardHeuristic
    path: ../SudokuSpice/RuleBased/Heuristics/StandardHeuristic.cs
    startLine: 8
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nProvides the standard <code>UniqueIn*</code> heuristics.\n"
  example: []
  syntax:
    content: 'public class StandardHeuristic : object, ISudokuHeuristic'
    content.vb: >-
      Public Class StandardHeuristic
          Inherits Object
          Implements ISudokuHeuristic
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker,SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker,SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker,SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker,SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  id: '#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker,SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker,SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)'
  parent: SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  langs:
  - csharp
  - vb
  name: StandardHeuristic(IMissingRowValuesTracker, IMissingColumnValuesTracker, IMissingBoxValuesTracker)
  nameWithType: StandardHeuristic.StandardHeuristic(IMissingRowValuesTracker, IMissingColumnValuesTracker, IMissingBoxValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.StandardHeuristic(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker, SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker, SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/StandardHeuristic.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/RuleBased/Heuristics/StandardHeuristic.cs
    startLine: 28
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nCreates a standard heuristic that combines the <xref href=\"SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public StandardHeuristic(IMissingRowValuesTracker rowValuesTracker, IMissingColumnValuesTracker columnValuesTracker, IMissingBoxValuesTracker boxValuesTracker)
    parameters:
    - id: rowValuesTracker
      type: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
      description: "\nSomething that tracks the possible values for each row.\n"
    - id: columnValuesTracker
      type: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
      description: "\nSomething that tracks the possible values for each column.\n"
    - id: boxValuesTracker
      type: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
      description: "\nSomething that tracks the possible values for each box.\n"
    content.vb: Public Sub New(rowValuesTracker As IMissingRowValuesTracker, columnValuesTracker As IMissingColumnValuesTracker, boxValuesTracker As IMissingBoxValuesTracker)
  overload: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  id: TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  langs:
  - csharp
  - vb
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: StandardHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/StandardHeuristic.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TryInitFor
    path: ../SudokuSpice/RuleBased/Heuristics/StandardHeuristic.cs
    startLine: 40
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nTries to initialize this heuristic for solving the given puzzle.\n"
  remarks: "\nIn general, it doesn&apos;t make sense to want to maintain the previous state if this method\nfails. Therefore, it is <em>not</em> guaranteed that the heuristic&apos;s state is unchanged\non failure.\n"
  example: []
  syntax:
    content: public bool TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
      description: The puzzle to solve.
    return:
      type: System.Boolean
      description: "\nFalse if this heuristic cannot be initialized for the given puzzle, else true.\n"
    content.vb: Public Function TryInitFor(puzzle As IReadOnlyPuzzleWithMutablePossibleValues) As Boolean
  overload: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor*
  implements:
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  id: CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  parent: SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  langs:
  - csharp
  - vb
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType: StandardHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/StandardHeuristic.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CopyWithNewReferences
    path: ../SudokuSpice/RuleBased/Heuristics/StandardHeuristic.cs
    startLine: 71
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nCreates a deep copy of this heuristic. Requires <code>rules</code> to contain an\n<xref href=\"SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker\" data-throw-if-not-resolved=\"false\"></xref>, an <xref href=\"SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker\" data-throw-if-not-resolved=\"false\"></xref>,\nand an <xref href=\"SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ISudokuHeuristic CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues puzzle, IReadOnlyList<ISudokuRule> rules)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    - id: rules
      type: IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
    return:
      type: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
    content.vb: Public Function CopyWithNewReferences(puzzle As IReadOnlyPuzzleWithMutablePossibleValues, rules As IReadOnlyList(Of ISudokuRule)) As ISudokuHeuristic
  overload: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences*
  implements:
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  nameWithType.vb: StandardHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
  id: UndoLastUpdate
  parent: SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  langs:
  - csharp
  - vb
  name: UndoLastUpdate()
  nameWithType: StandardHeuristic.UndoLastUpdate()
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/StandardHeuristic.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: UndoLastUpdate
    path: ../SudokuSpice/RuleBased/Heuristics/StandardHeuristic.cs
    startLine: 76
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nUndoes the last modifications made by this heuristic.\n"
  example: []
  syntax:
    content: public void UndoLastUpdate()
    content.vb: Public Sub UndoLastUpdate
  overload: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate*
  implements:
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
  id: UpdateAll
  parent: SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  langs:
  - csharp
  - vb
  name: UpdateAll()
  nameWithType: StandardHeuristic.UpdateAll()
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/StandardHeuristic.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: UpdateAll
    path: ../SudokuSpice/RuleBased/Heuristics/StandardHeuristic.cs
    startLine: 91
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nUpdates all the current possible values.\n"
  example: []
  syntax:
    content: public bool UpdateAll()
    return:
      type: System.Boolean
      description: Returns true if any modifications were made.
    content.vb: Public Function UpdateAll As Boolean
  overload: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll*
  implements:
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.RuleBased.Heuristics
  commentId: N:SudokuSpice.RuleBased.Heuristics
  name: SudokuSpice.RuleBased.Heuristics
  nameWithType: SudokuSpice.RuleBased.Heuristics
  fullName: SudokuSpice.RuleBased.Heuristics
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  name: ISudokuHeuristic
  nameWithType: ISudokuHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  name: UniqueInRowHeuristic
  nameWithType: UniqueInRowHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic
  name: UniqueInColumnHeuristic
  nameWithType: UniqueInColumnHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  name: UniqueInBoxHeuristic
  nameWithType: UniqueInBoxHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor
  name: StandardHeuristic
  nameWithType: StandardHeuristic.StandardHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.StandardHeuristic
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingRowValuesTracker
  nameWithType: IMissingRowValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingColumnValuesTracker
  nameWithType: IMissingColumnValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingBoxValuesTracker
  nameWithType: IMissingBoxValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
- uid: SudokuSpice.RuleBased.Rules
  commentId: N:SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor
  name: TryInitFor
  nameWithType: StandardHeuristic.TryInitFor
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: ISudokuHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: TryInitFor
    nameWithType: ISudokuHeuristic.TryInitFor
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: TryInitFor
    nameWithType: ISudokuHeuristic.TryInitFor
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzleWithMutablePossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences
  name: CopyWithNewReferences
  nameWithType: StandardHeuristic.CopyWithNewReferences
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  parent: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  isExternal: true
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType: ISudokuHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  nameWithType.vb: ISudokuHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  fullName.vb: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
    name: CopyWithNewReferences
    nameWithType: ISudokuHeuristic.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
    name: CopyWithNewReferences
    nameWithType: ISudokuHeuristic.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
  commentId: '!:IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<ISudokuRule>
  nameWithType: IReadOnlyList<ISudokuRule>
  fullName: IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>
  nameWithType.vb: IReadOnlyList(Of ISudokuRule)
  fullName.vb: IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule)
  name.vb: IReadOnlyList(Of ISudokuRule)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
  name: UndoLastUpdate
  nameWithType: StandardHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  parent: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  name: UndoLastUpdate()
  nameWithType: ISudokuHeuristic.UndoLastUpdate()
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
    name: UndoLastUpdate
    nameWithType: ISudokuHeuristic.UndoLastUpdate
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
    name: UndoLastUpdate
    nameWithType: ISudokuHeuristic.UndoLastUpdate
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
  name: UpdateAll
  nameWithType: StandardHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  parent: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  name: UpdateAll()
  nameWithType: ISudokuHeuristic.UpdateAll()
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
    name: UpdateAll
    nameWithType: ISudokuHeuristic.UpdateAll
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
    name: UpdateAll
    nameWithType: ISudokuHeuristic.UpdateAll
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
