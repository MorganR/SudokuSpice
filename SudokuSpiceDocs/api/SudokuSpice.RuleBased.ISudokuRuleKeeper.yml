### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper
  commentId: T:SudokuSpice.RuleBased.ISudokuRuleKeeper
  id: ISudokuRuleKeeper
  parent: SudokuSpice.RuleBased
  children:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  langs:
  - csharp
  - vb
  name: ISudokuRuleKeeper
  nameWithType: ISudokuRuleKeeper
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper
  type: Interface
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/ISudokuRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: ISudokuRuleKeeper
    path: ../SudokuSpice/RuleBased/framework/ISudokuRuleKeeper.cs
    startLine: 5
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public interface ISudokuRuleKeeper
    content.vb: Public Interface ISudokuRuleKeeper
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  id: TrySet(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  langs:
  - csharp
  - vb
  name: TrySet(Coordinate, Int32)
  nameWithType: ISudokuRuleKeeper.TrySet(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/ISudokuRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: TrySet
    path: ../SudokuSpice/RuleBased/framework/ISudokuRuleKeeper.cs
    startLine: 17
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nUpdates possible values based on setting the given coordinate to the given value. If\nthis update fails (i.e. it leads to an unset square with no possible values), then it\nreturns false and leaves the possible values unchanged.\n"
  example: []
  syntax:
    content: bool TrySet(in Coordinate c, int value)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The coordinate to update.
    - id: value
      type: System.Int32
      description: The value to set <code>c</code> to.
    return:
      type: System.Boolean
      description: "\nTrue if the possible values have been updated and the rules are still satisfied.\n"
    content.vb: Function TrySet(ByRef c As Coordinate, value As Integer) As Boolean
  overload: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet*
  nameWithType.vb: ISudokuRuleKeeper.TrySet(ByRef Coordinate, Int32)
  fullName.vb: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: TrySet(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  id: Unset(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  langs:
  - csharp
  - vb
  name: Unset(Coordinate, Int32)
  nameWithType: ISudokuRuleKeeper.Unset(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/ISudokuRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Unset
    path: ../SudokuSpice/RuleBased/framework/ISudokuRuleKeeper.cs
    startLine: 24
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nUndoes an update for the given value at the specified coordinate.\n"
  example: []
  syntax:
    content: void Unset(in Coordinate c, int value)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The coordinate where a value is being unset.
    - id: value
      type: System.Int32
      description: The value being unset.
    content.vb: Sub Unset(ByRef c As Coordinate, value As Integer)
  overload: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset*
  nameWithType.vb: ISudokuRuleKeeper.Unset(ByRef Coordinate, Int32)
  fullName.vb: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: Unset(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  id: GetRules
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  langs:
  - csharp
  - vb
  name: GetRules()
  nameWithType: ISudokuRuleKeeper.GetRules()
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/ISudokuRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetRules
    path: ../SudokuSpice/RuleBased/framework/ISudokuRuleKeeper.cs
    startLine: 29
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGets the <xref href=\"SudokuSpice.RuleBased.Rules.ISudokuRule\" data-throw-if-not-resolved=\"false\"></xref>s enforced by this rule keeper.\n"
  example: []
  syntax:
    content: IReadOnlyList<ISudokuRule> GetRules()
    return:
      type: System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
    content.vb: Function GetRules As IReadOnlyList(Of ISudokuRule)
  overload: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules*
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
  id: CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  langs:
  - csharp
  - vb
  name: CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues)
  nameWithType: ISudokuRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.RuleBased.PossibleValues)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/ISudokuRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CopyWithNewReferences
    path: ../SudokuSpice/RuleBased/framework/ISudokuRuleKeeper.cs
    startLine: 43
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nCreates a deep copy of this rule keeper, including copies of any\n<xref href=\"SudokuSpice.RuleBased.Rules.ISudokuRule\" data-throw-if-not-resolved=\"false\"></xref>s it contains, with updated internal\n<xref href=\"SudokuSpice.IReadOnlyPuzzle\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SudokuSpice.RuleBased.PossibleValues\" data-throw-if-not-resolved=\"false\"></xref> references.\n"
  example: []
  syntax:
    content: ISudokuRuleKeeper CopyWithNewReferences(IReadOnlyPuzzle puzzle, PossibleValues possibleValues)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: "\nThe new puzzle reference. Should contain the same data as the current puzzle instance.\n"
    - id: possibleValues
      type: SudokuSpice.RuleBased.PossibleValues
      description: "\nThe new possible values reference. Should contain the same data as the current possible\nvalues instance.\n"
    return:
      type: SudokuSpice.RuleBased.ISudokuRuleKeeper
    content.vb: Function CopyWithNewReferences(puzzle As IReadOnlyPuzzle, possibleValues As PossibleValues) As ISudokuRuleKeeper
  overload: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences*
references:
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet*
  commentId: Overload:SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet
  name: TrySet
  nameWithType: ISudokuRuleKeeper.TrySet
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset*
  commentId: Overload:SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset
  name: Unset
  nameWithType: ISudokuRuleKeeper.Unset
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule
  commentId: T:SudokuSpice.RuleBased.Rules.ISudokuRule
  parent: SudokuSpice.RuleBased.Rules
  name: ISudokuRule
  nameWithType: ISudokuRule
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules*
  commentId: Overload:SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  name: GetRules
  nameWithType: ISudokuRuleKeeper.GetRules
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
- uid: System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
  commentId: T:System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ISudokuRule>
  nameWithType: IReadOnlyList<ISudokuRule>
  fullName: System.Collections.Generic.IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>
  nameWithType.vb: IReadOnlyList(Of ISudokuRule)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule)
  name.vb: IReadOnlyList(Of ISudokuRule)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules
  commentId: N:SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice.RuleBased.PossibleValues
  commentId: T:SudokuSpice.RuleBased.PossibleValues
  parent: SudokuSpice.RuleBased
  name: PossibleValues
  nameWithType: PossibleValues
  fullName: SudokuSpice.RuleBased.PossibleValues
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences*
  commentId: Overload:SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences
  name: CopyWithNewReferences
  nameWithType: ISudokuRuleKeeper.CopyWithNewReferences
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper
  commentId: T:SudokuSpice.RuleBased.ISudokuRuleKeeper
  parent: SudokuSpice.RuleBased
  name: ISudokuRuleKeeper
  nameWithType: ISudokuRuleKeeper
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper
