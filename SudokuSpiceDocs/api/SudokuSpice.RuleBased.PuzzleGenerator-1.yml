### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.PuzzleGenerator`1
  commentId: T:SudokuSpice.RuleBased.PuzzleGenerator`1
  id: PuzzleGenerator`1
  parent: SudokuSpice.RuleBased
  children:
  - SudokuSpice.RuleBased.PuzzleGenerator`1.#ctor(System.Func{`0},System.Func{`0,SudokuSpice.RuleBased.PuzzleSolver})
  - SudokuSpice.RuleBased.PuzzleGenerator`1.Generate(System.Int32,System.TimeSpan)
  langs:
  - csharp
  - vb
  name: PuzzleGenerator<TPuzzle>
  nameWithType: PuzzleGenerator<TPuzzle>
  fullName: SudokuSpice.RuleBased.PuzzleGenerator<TPuzzle>
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleGenerator.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: PuzzleGenerator
    path: ../SudokuSpice/RuleBased/PuzzleGenerator.cs
    startLine: 6
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: >-
      public class PuzzleGenerator<TPuzzle>
          where TPuzzle : IPuzzle
    typeParameters:
    - id: TPuzzle
    content.vb: Public Class PuzzleGenerator(Of TPuzzle As IPuzzle)
  inheritance:
  - System.Object
  derivedClasses:
  - SudokuSpice.RuleBased.StandardPuzzleGenerator
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: PuzzleGenerator(Of TPuzzle)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SudokuSpice.RuleBased.PuzzleGenerator(Of TPuzzle)
  name.vb: PuzzleGenerator(Of TPuzzle)
- uid: SudokuSpice.RuleBased.PuzzleGenerator`1.#ctor(System.Func{`0},System.Func{`0,SudokuSpice.RuleBased.PuzzleSolver})
  commentId: M:SudokuSpice.RuleBased.PuzzleGenerator`1.#ctor(System.Func{`0},System.Func{`0,SudokuSpice.RuleBased.PuzzleSolver})
  id: '#ctor(System.Func{`0},System.Func{`0,SudokuSpice.RuleBased.PuzzleSolver})'
  parent: SudokuSpice.RuleBased.PuzzleGenerator`1
  langs:
  - csharp
  - vb
  name: PuzzleGenerator(Func<TPuzzle>, Func<TPuzzle, PuzzleSolver>)
  nameWithType: PuzzleGenerator<TPuzzle>.PuzzleGenerator(Func<TPuzzle>, Func<TPuzzle, PuzzleSolver>)
  fullName: SudokuSpice.RuleBased.PuzzleGenerator<TPuzzle>.PuzzleGenerator(System.Func<TPuzzle>, System.Func<TPuzzle, SudokuSpice.RuleBased.PuzzleSolver>)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleGenerator.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/PuzzleGenerator.cs
    startLine: 22
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nCreates a puzzle generator to create puzzles with custom rules and type.\n"
  example: []
  syntax:
    content: public PuzzleGenerator(Func<TPuzzle> puzzleFactory, Func<TPuzzle, PuzzleSolver> solverFactory)
    parameters:
    - id: puzzleFactory
      type: System.Func{{TPuzzle}}
      description: "\nA function that constructs an empty <xref href=\"SudokuSpice.IPuzzle\" data-throw-if-not-resolved=\"false\"></xref> of the desired type and shape.\n"
    - id: solverFactory
      type: System.Func{{TPuzzle},SudokuSpice.RuleBased.PuzzleSolver}
      description: "\nA function that constructs a <xref href=\"SudokuSpice.RuleBased.SquareTracker\" data-throw-if-not-resolved=\"false\"></xref> for the desired puzzle type.\nThis allows callers to use non-standard rules and heuristics.\n"
    content.vb: Public Sub New(puzzleFactory As Func(Of TPuzzle), solverFactory As Func(Of TPuzzle, PuzzleSolver))
  overload: SudokuSpice.RuleBased.PuzzleGenerator`1.#ctor*
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).PuzzleGenerator(Func(Of TPuzzle), Func(Of TPuzzle, PuzzleSolver))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleGenerator(Of TPuzzle).PuzzleGenerator(System.Func(Of TPuzzle), System.Func(Of TPuzzle, SudokuSpice.RuleBased.PuzzleSolver))
  name.vb: PuzzleGenerator(Func(Of TPuzzle), Func(Of TPuzzle, PuzzleSolver))
- uid: SudokuSpice.RuleBased.PuzzleGenerator`1.Generate(System.Int32,System.TimeSpan)
  commentId: M:SudokuSpice.RuleBased.PuzzleGenerator`1.Generate(System.Int32,System.TimeSpan)
  id: Generate(System.Int32,System.TimeSpan)
  parent: SudokuSpice.RuleBased.PuzzleGenerator`1
  langs:
  - csharp
  - vb
  name: Generate(Int32, TimeSpan)
  nameWithType: PuzzleGenerator<TPuzzle>.Generate(Int32, TimeSpan)
  fullName: SudokuSpice.RuleBased.PuzzleGenerator<TPuzzle>.Generate(System.Int32, System.TimeSpan)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleGenerator.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Generate
    path: ../SudokuSpice/RuleBased/PuzzleGenerator.cs
    startLine: 52
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGenerates a puzzle that has a unique solution with the given number of squares set.\n"
  remarks: "\nBe careful calling this with low values, as it can take a very long time to generate\nunique puzzles as numSquaresToSet approaches the minimum number of clues necessary to\nprovide a unique puzzle for this generator&apos;s size.\n"
  example: []
  syntax:
    content: public TPuzzle Generate(int numSquaresToSet, TimeSpan timeout)
    parameters:
    - id: numSquaresToSet
      type: System.Int32
      description: "\nThe number of squares that will be preset in the generated puzzle.\n"
    - id: timeout
      type: System.TimeSpan
      description: "\nThe maximum timeout during which this function can search for a unique puzzle.\nEspecially useful when trying to generate puzzles with low\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numSquaresToSet</code>.\n"
    return:
      type: '{TPuzzle}'
      description: "\nA puzzle of type <code>TPuzzle</code> with a unique solution and\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numSquaresToSet</code> preset squares.\n"
    content.vb: Public Function Generate(numSquaresToSet As Integer, timeout As TimeSpan) As TPuzzle
  overload: SudokuSpice.RuleBased.PuzzleGenerator`1.Generate*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\nThrown if no valid unique puzzle is found within the specified\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">timeout</code>.\n"
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).Generate(Int32, TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleGenerator(Of TPuzzle).Generate(System.Int32, System.TimeSpan)
references:
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.IPuzzle
  commentId: T:SudokuSpice.IPuzzle
  parent: SudokuSpice
  name: IPuzzle
  nameWithType: IPuzzle
  fullName: SudokuSpice.IPuzzle
- uid: SudokuSpice.RuleBased.SquareTracker
  commentId: T:SudokuSpice.RuleBased.SquareTracker
  isExternal: true
- uid: SudokuSpice.RuleBased.PuzzleGenerator`1.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleGenerator`1.#ctor
  name: PuzzleGenerator
  nameWithType: PuzzleGenerator<TPuzzle>.PuzzleGenerator
  fullName: SudokuSpice.RuleBased.PuzzleGenerator<TPuzzle>.PuzzleGenerator
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).PuzzleGenerator
  fullName.vb: SudokuSpice.RuleBased.PuzzleGenerator(Of TPuzzle).PuzzleGenerator
- uid: System.Func{{TPuzzle}}
  commentId: T:System.Func{`0}
  parent: System
  definition: System.Func`1
  name: Func<TPuzzle>
  nameWithType: Func<TPuzzle>
  fullName: System.Func<TPuzzle>
  nameWithType.vb: Func(Of TPuzzle)
  fullName.vb: System.Func(Of TPuzzle)
  name.vb: Func(Of TPuzzle)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TPuzzle},SudokuSpice.RuleBased.PuzzleSolver}
  commentId: T:System.Func{`0,SudokuSpice.RuleBased.PuzzleSolver}
  parent: System
  definition: System.Func`2
  name: Func<TPuzzle, PuzzleSolver>
  nameWithType: Func<TPuzzle, PuzzleSolver>
  fullName: System.Func<TPuzzle, SudokuSpice.RuleBased.PuzzleSolver>
  nameWithType.vb: Func(Of TPuzzle, PuzzleSolver)
  fullName.vb: System.Func(Of TPuzzle, SudokuSpice.RuleBased.PuzzleSolver)
  name.vb: Func(Of TPuzzle, PuzzleSolver)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.PuzzleSolver
    name: PuzzleSolver
    nameWithType: PuzzleSolver
    fullName: SudokuSpice.RuleBased.PuzzleSolver
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.PuzzleSolver
    name: PuzzleSolver
    nameWithType: PuzzleSolver
    fullName: SudokuSpice.RuleBased.PuzzleSolver
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
  isExternal: true
- uid: SudokuSpice.RuleBased.PuzzleGenerator`1.Generate*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleGenerator`1.Generate
  name: Generate
  nameWithType: PuzzleGenerator<TPuzzle>.Generate
  fullName: SudokuSpice.RuleBased.PuzzleGenerator<TPuzzle>.Generate
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).Generate
  fullName.vb: SudokuSpice.RuleBased.PuzzleGenerator(Of TPuzzle).Generate
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: '{TPuzzle}'
  commentId: '!:TPuzzle'
  definition: TPuzzle
  name: TPuzzle
  nameWithType: TPuzzle
  fullName: TPuzzle
- uid: TPuzzle
  name: TPuzzle
  nameWithType: TPuzzle
  fullName: TPuzzle
