### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.PossibleValues
  commentId: T:SudokuSpice.RuleBased.PossibleValues
  id: PossibleValues
  parent: SudokuSpice.RuleBased
  children:
  - SudokuSpice.RuleBased.PossibleValues.#ctor(SudokuSpice.RuleBased.PossibleValues)
  - SudokuSpice.RuleBased.PossibleValues.#ctor(System.Int32,SudokuSpice.BitVector)
  - SudokuSpice.RuleBased.PossibleValues.AllPossible
  - SudokuSpice.RuleBased.PossibleValues.Intersect(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  - SudokuSpice.RuleBased.PossibleValues.Item(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.PossibleValues.Reset(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.PossibleValues.Reset(System.ReadOnlySpan{SudokuSpice.Coordinate})
  langs:
  - csharp
  - vb
  name: PossibleValues
  nameWithType: PossibleValues
  fullName: SudokuSpice.RuleBased.PossibleValues
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/PossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: PossibleValues
    path: ../SudokuSpice/RuleBased/PossibleValues.cs
    startLine: 9
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nTracks per-square possible values for a puzzle.\n"
  example: []
  syntax:
    content: public class PossibleValues
    content.vb: Public Class PossibleValues
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.PossibleValues.AllPossible
  commentId: P:SudokuSpice.RuleBased.PossibleValues.AllPossible
  id: AllPossible
  parent: SudokuSpice.RuleBased.PossibleValues
  langs:
  - csharp
  - vb
  name: AllPossible
  nameWithType: PossibleValues.AllPossible
  fullName: SudokuSpice.RuleBased.PossibleValues.AllPossible
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/PossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: AllPossible
    path: ../SudokuSpice/RuleBased/PossibleValues.cs
    startLine: 17
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nReturns a <xref href=\"SudokuSpice.BitVector\" data-throw-if-not-resolved=\"false\"></xref> for the complete set of possible values for any given\nsquare in the puzzle represented by this <code>PossibleValues</code> object.\n"
  example: []
  syntax:
    content: public BitVector AllPossible { get; }
    parameters: []
    return:
      type: SudokuSpice.BitVector
    content.vb: Public ReadOnly Property AllPossible As BitVector
  overload: SudokuSpice.RuleBased.PossibleValues.AllPossible*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.PossibleValues.#ctor(System.Int32,SudokuSpice.BitVector)
  commentId: M:SudokuSpice.RuleBased.PossibleValues.#ctor(System.Int32,SudokuSpice.BitVector)
  id: '#ctor(System.Int32,SudokuSpice.BitVector)'
  parent: SudokuSpice.RuleBased.PossibleValues
  langs:
  - csharp
  - vb
  name: PossibleValues(Int32, BitVector)
  nameWithType: PossibleValues.PossibleValues(Int32, BitVector)
  fullName: SudokuSpice.RuleBased.PossibleValues.PossibleValues(System.Int32, SudokuSpice.BitVector)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/PossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/PossibleValues.cs
    startLine: 30
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nConstructs a <code>PossibleValues</code> object to track possible values for a size-x-size\npuzzle. All coordinates are initialized to <code data-dev-comment-type=\"paramref\" class=\"paramref\">uniquePossibleValues</code>\npossible values.\n"
  example: []
  syntax:
    content: public PossibleValues(int size, BitVector uniquePossibleValues)
    parameters:
    - id: size
      type: System.Int32
      description: "\nThe size of the puzzle for which we want to track possible values.\n"
    - id: uniquePossibleValues
      type: SudokuSpice.BitVector
      description: "\nThe full set of possible values for any given square in this puzzle.\n"
    content.vb: Public Sub New(size As Integer, uniquePossibleValues As BitVector)
  overload: SudokuSpice.RuleBased.PossibleValues.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.PossibleValues.#ctor(SudokuSpice.RuleBased.PossibleValues)
  commentId: M:SudokuSpice.RuleBased.PossibleValues.#ctor(SudokuSpice.RuleBased.PossibleValues)
  id: '#ctor(SudokuSpice.RuleBased.PossibleValues)'
  parent: SudokuSpice.RuleBased.PossibleValues
  langs:
  - csharp
  - vb
  name: PossibleValues(PossibleValues)
  nameWithType: PossibleValues.PossibleValues(PossibleValues)
  fullName: SudokuSpice.RuleBased.PossibleValues.PossibleValues(SudokuSpice.RuleBased.PossibleValues)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/PossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/PossibleValues.cs
    startLine: 47
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nCopy-constructor to provide a deep copy.\n"
  example: []
  syntax:
    content: public PossibleValues(PossibleValues existing)
    parameters:
    - id: existing
      type: SudokuSpice.RuleBased.PossibleValues
      description: "\nThe existing <code>PossibleValues</code> object that you want to copy.\n"
    content.vb: Public Sub New(existing As PossibleValues)
  overload: SudokuSpice.RuleBased.PossibleValues.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.PossibleValues.Item(SudokuSpice.Coordinate@)
  commentId: P:SudokuSpice.RuleBased.PossibleValues.Item(SudokuSpice.Coordinate@)
  id: Item(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.PossibleValues
  langs:
  - csharp
  - vb
  name: Item[Coordinate]
  nameWithType: PossibleValues.Item[Coordinate]
  fullName: SudokuSpice.RuleBased.PossibleValues.Item[SudokuSpice.Coordinate]
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/PossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: this[]
    path: ../SudokuSpice/RuleBased/PossibleValues.cs
    startLine: 63
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nProvides read and write access to the possible values for the given square.\n"
  example: []
  syntax:
    content: public BitVector this[in Coordinate c] { get; set; }
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The <xref href="SudokuSpice.Coordinate" data-throw-if-not-resolved="false"></xref> of the square.
    return:
      type: SudokuSpice.BitVector
      description: The possible values for that square as a <xref href="SudokuSpice.BitVector" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Property Item(ByRef c As Coordinate) As BitVector
  overload: SudokuSpice.RuleBased.PossibleValues.Item*
  nameWithType.vb: PossibleValues.Item(ByRef Coordinate)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PossibleValues.Item(ByRef SudokuSpice.Coordinate)
  name.vb: Item(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.PossibleValues.Intersect(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  commentId: M:SudokuSpice.RuleBased.PossibleValues.Intersect(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  id: Intersect(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  parent: SudokuSpice.RuleBased.PossibleValues
  langs:
  - csharp
  - vb
  name: Intersect(Coordinate, BitVector)
  nameWithType: PossibleValues.Intersect(Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.PossibleValues.Intersect(SudokuSpice.Coordinate, SudokuSpice.BitVector)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Intersect
    path: ../SudokuSpice/RuleBased/PossibleValues.cs
    startLine: 76
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nUpdates the possible values for the square at the given <xref href=\"SudokuSpice.Coordinate\" data-throw-if-not-resolved=\"false\"></xref> to be\nthe intersect of their current value and the given <code>possibleValues</code>.\n"
  example: []
  syntax:
    content: public void Intersect(in Coordinate c, BitVector possibleValues)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The <xref href="SudokuSpice.Coordinate" data-throw-if-not-resolved="false"></xref> of the square to update.
    - id: possibleValues
      type: SudokuSpice.BitVector
      description: The possible values to intersect with.
    content.vb: Public Sub Intersect(ByRef c As Coordinate, possibleValues As BitVector)
  overload: SudokuSpice.RuleBased.PossibleValues.Intersect*
  nameWithType.vb: PossibleValues.Intersect(ByRef Coordinate, BitVector)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PossibleValues.Intersect(ByRef SudokuSpice.Coordinate, SudokuSpice.BitVector)
  name.vb: Intersect(ByRef Coordinate, BitVector)
- uid: SudokuSpice.RuleBased.PossibleValues.Reset(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.PossibleValues.Reset(SudokuSpice.Coordinate@)
  id: Reset(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.PossibleValues
  langs:
  - csharp
  - vb
  name: Reset(Coordinate)
  nameWithType: PossibleValues.Reset(Coordinate)
  fullName: SudokuSpice.RuleBased.PossibleValues.Reset(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Reset
    path: ../SudokuSpice/RuleBased/PossibleValues.cs
    startLine: 87
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nResets the possible values for the given <xref href=\"SudokuSpice.Coordinate\" data-throw-if-not-resolved=\"false\"></xref> to the full set of\npossible values for this puzzle.\n"
  example: []
  syntax:
    content: public void Reset(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The <code>Coordinate</code> of the square to reset.
    content.vb: Public Sub Reset(ByRef c As Coordinate)
  overload: SudokuSpice.RuleBased.PossibleValues.Reset*
  nameWithType.vb: PossibleValues.Reset(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PossibleValues.Reset(ByRef SudokuSpice.Coordinate)
  name.vb: Reset(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.PossibleValues.Reset(System.ReadOnlySpan{SudokuSpice.Coordinate})
  commentId: M:SudokuSpice.RuleBased.PossibleValues.Reset(System.ReadOnlySpan{SudokuSpice.Coordinate})
  id: Reset(System.ReadOnlySpan{SudokuSpice.Coordinate})
  parent: SudokuSpice.RuleBased.PossibleValues
  langs:
  - csharp
  - vb
  name: Reset(ReadOnlySpan<Coordinate>)
  nameWithType: PossibleValues.Reset(ReadOnlySpan<Coordinate>)
  fullName: SudokuSpice.RuleBased.PossibleValues.Reset(System.ReadOnlySpan<SudokuSpice.Coordinate>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Reset
    path: ../SudokuSpice/RuleBased/PossibleValues.cs
    startLine: 92
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nResets the possible values to <xref href=\"SudokuSpice.RuleBased.PossibleValues.AllPossible\" data-throw-if-not-resolved=\"false\"></xref> at the given coordinates.\n"
  example: []
  syntax:
    content: public void Reset(ReadOnlySpan<Coordinate> coordinates)
    parameters:
    - id: coordinates
      type: System.ReadOnlySpan{SudokuSpice.Coordinate}
    content.vb: Public Sub Reset(coordinates As ReadOnlySpan(Of Coordinate))
  overload: SudokuSpice.RuleBased.PossibleValues.Reset*
  nameWithType.vb: PossibleValues.Reset(ReadOnlySpan(Of Coordinate))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PossibleValues.Reset(System.ReadOnlySpan(Of SudokuSpice.Coordinate))
  name.vb: Reset(ReadOnlySpan(Of Coordinate))
references:
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.BitVector
  commentId: T:SudokuSpice.BitVector
  parent: SudokuSpice
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.BitVector
- uid: SudokuSpice.RuleBased.PossibleValues.AllPossible*
  commentId: Overload:SudokuSpice.RuleBased.PossibleValues.AllPossible
  name: AllPossible
  nameWithType: PossibleValues.AllPossible
  fullName: SudokuSpice.RuleBased.PossibleValues.AllPossible
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.RuleBased.PossibleValues.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.PossibleValues.#ctor
  name: PossibleValues
  nameWithType: PossibleValues.PossibleValues
  fullName: SudokuSpice.RuleBased.PossibleValues.PossibleValues
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.RuleBased.PossibleValues
  commentId: T:SudokuSpice.RuleBased.PossibleValues
  parent: SudokuSpice.RuleBased
  name: PossibleValues
  nameWithType: PossibleValues
  fullName: SudokuSpice.RuleBased.PossibleValues
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.RuleBased.PossibleValues.Item*
  commentId: Overload:SudokuSpice.RuleBased.PossibleValues.Item
  name: Item
  nameWithType: PossibleValues.Item
  fullName: SudokuSpice.RuleBased.PossibleValues.Item
- uid: SudokuSpice.RuleBased.PossibleValues.Intersect*
  commentId: Overload:SudokuSpice.RuleBased.PossibleValues.Intersect
  name: Intersect
  nameWithType: PossibleValues.Intersect
  fullName: SudokuSpice.RuleBased.PossibleValues.Intersect
- uid: SudokuSpice.RuleBased.PossibleValues.Reset*
  commentId: Overload:SudokuSpice.RuleBased.PossibleValues.Reset
  name: Reset
  nameWithType: PossibleValues.Reset
  fullName: SudokuSpice.RuleBased.PossibleValues.Reset
- uid: SudokuSpice.RuleBased.PossibleValues.AllPossible
  commentId: P:SudokuSpice.RuleBased.PossibleValues.AllPossible
  isExternal: true
- uid: System.ReadOnlySpan{SudokuSpice.Coordinate}
  commentId: T:System.ReadOnlySpan{SudokuSpice.Coordinate}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Coordinate>
  nameWithType: ReadOnlySpan<Coordinate>
  fullName: System.ReadOnlySpan<SudokuSpice.Coordinate>
  nameWithType.vb: ReadOnlySpan(Of Coordinate)
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.Coordinate)
  name.vb: ReadOnlySpan(Of Coordinate)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
