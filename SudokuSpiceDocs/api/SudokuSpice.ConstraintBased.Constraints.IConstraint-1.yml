### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint`1
  commentId: T:SudokuSpice.ConstraintBased.Constraints.IConstraint`1
  id: IConstraint`1
  parent: SudokuSpice.ConstraintBased.Constraints
  children:
  - SudokuSpice.ConstraintBased.Constraints.IConstraint`1.Constrain(`0,SudokuSpice.ConstraintBased.ExactCoverMatrix{`0})
  langs:
  - csharp
  - vb
  name: IConstraint<TPuzzle>
  nameWithType: IConstraint<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint<TPuzzle>
  type: Interface
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/IConstraint.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: IConstraint
    path: ../SudokuSpice/ConstraintBased/Constraints/IConstraint.cs
    startLine: 2
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  syntax:
    content: >-
      public interface IConstraint<TPuzzle>
          where TPuzzle : IReadOnlyPuzzle
    typeParameters:
    - id: TPuzzle
    content.vb: Public Interface IConstraint(Of TPuzzle As IReadOnlyPuzzle)
  nameWithType.vb: IConstraint(Of TPuzzle)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.IConstraint(Of TPuzzle)
  name.vb: IConstraint(Of TPuzzle)
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint`1.Constrain(`0,SudokuSpice.ConstraintBased.ExactCoverMatrix{`0})
  commentId: M:SudokuSpice.ConstraintBased.Constraints.IConstraint`1.Constrain(`0,SudokuSpice.ConstraintBased.ExactCoverMatrix{`0})
  id: Constrain(`0,SudokuSpice.ConstraintBased.ExactCoverMatrix{`0})
  parent: SudokuSpice.ConstraintBased.Constraints.IConstraint`1
  langs:
  - csharp
  - vb
  name: Constrain(TPuzzle, ExactCoverMatrix<TPuzzle>)
  nameWithType: IConstraint<TPuzzle>.Constrain(TPuzzle, ExactCoverMatrix<TPuzzle>)
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint<TPuzzle>.Constrain(TPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix<TPuzzle>)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/IConstraint.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Constrain
    path: ../SudokuSpice/ConstraintBased/Constraints/IConstraint.cs
    startLine: 17
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nAdds necessary <xref href=\"SudokuSpice.ConstraintBased.ConstraintHeader%601\" data-throw-if-not-resolved=\"false\"></xref>s and links to the given\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">matrix</code>.\n"
  remarks: "\nThis skips adding <code>ConstraintHeader</code>s that are already satisfied by the given\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">puzzle</code>. Instead, it drops the corresponding\n<xref href=\"SudokuSpice.ConstraintBased.PossibleSquareValue%601\" data-throw-if-not-resolved=\"false\"></xref>s that would have been included in these headers.\n\nNote: See <xref href=\"SudokuSpice.ConstraintBased.ExactCoverMatrix%601\" data-throw-if-not-resolved=\"false\"></xref> to understand how the matrix works.\n"
  example: []
  syntax:
    content: void Constrain(TPuzzle puzzle, ExactCoverMatrix<TPuzzle> matrix)
    parameters:
    - id: puzzle
      type: '{TPuzzle}'
      description: The puzzle to solve.
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix{{TPuzzle}}
      description: The exact-cover matrix to constrain.
    content.vb: Sub Constrain(puzzle As TPuzzle, matrix As ExactCoverMatrix(Of TPuzzle))
  overload: SudokuSpice.ConstraintBased.Constraints.IConstraint`1.Constrain*
  nameWithType.vb: IConstraint(Of TPuzzle).Constrain(TPuzzle, ExactCoverMatrix(Of TPuzzle))
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.IConstraint(Of TPuzzle).Constrain(TPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix(Of TPuzzle))
  name.vb: Constrain(TPuzzle, ExactCoverMatrix(Of TPuzzle))
references:
- uid: SudokuSpice.ConstraintBased.Constraints
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
- uid: SudokuSpice.ConstraintBased.ConstraintHeader`1
  commentId: T:SudokuSpice.ConstraintBased.ConstraintHeader`1
  name: ConstraintHeader<TPuzzle>
  nameWithType: ConstraintHeader<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.ConstraintHeader<TPuzzle>
  nameWithType.vb: ConstraintHeader(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.ConstraintHeader(Of TPuzzle)
  name.vb: ConstraintHeader(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.ConstraintHeader`1
    name: ConstraintHeader
    nameWithType: ConstraintHeader
    fullName: SudokuSpice.ConstraintBased.ConstraintHeader
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.ConstraintHeader`1
    name: ConstraintHeader
    nameWithType: ConstraintHeader
    fullName: SudokuSpice.ConstraintBased.ConstraintHeader
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.PossibleSquareValue`1
  commentId: T:SudokuSpice.ConstraintBased.PossibleSquareValue`1
  name: PossibleSquareValue<TPuzzle>
  nameWithType: PossibleSquareValue<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.PossibleSquareValue<TPuzzle>
  nameWithType.vb: PossibleSquareValue(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.PossibleSquareValue(Of TPuzzle)
  name.vb: PossibleSquareValue(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.PossibleSquareValue`1
    name: PossibleSquareValue
    nameWithType: PossibleSquareValue
    fullName: SudokuSpice.ConstraintBased.PossibleSquareValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.PossibleSquareValue`1
    name: PossibleSquareValue
    nameWithType: PossibleSquareValue
    fullName: SudokuSpice.ConstraintBased.PossibleSquareValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix`1
  name: ExactCoverMatrix<TPuzzle>
  nameWithType: ExactCoverMatrix<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix<TPuzzle>
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.ExactCoverMatrix(Of TPuzzle)
  name.vb: ExactCoverMatrix(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint`1.Constrain*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.IConstraint`1.Constrain
  name: Constrain
  nameWithType: IConstraint<TPuzzle>.Constrain
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint<TPuzzle>.Constrain
  nameWithType.vb: IConstraint(Of TPuzzle).Constrain
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.IConstraint(Of TPuzzle).Constrain
- uid: '{TPuzzle}'
  commentId: '!:TPuzzle'
  definition: TPuzzle
  name: TPuzzle
  nameWithType: TPuzzle
  fullName: TPuzzle
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix{{TPuzzle}}
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix{`0}
  parent: SudokuSpice.ConstraintBased
  definition: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
  name: ExactCoverMatrix<TPuzzle>
  nameWithType: ExactCoverMatrix<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix<TPuzzle>
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.ExactCoverMatrix(Of TPuzzle)
  name.vb: ExactCoverMatrix(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: TPuzzle
  name: TPuzzle
  nameWithType: TPuzzle
  fullName: TPuzzle
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
