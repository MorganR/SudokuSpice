### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator
  commentId: T:SudokuSpice.RuleBased.StandardPuzzleGenerator
  id: StandardPuzzleGenerator
  parent: SudokuSpice.RuleBased
  children:
  - SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor
  - SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate(System.Int32,System.Int32,TimeSpan)
  langs:
  - csharp
  - vb
  name: StandardPuzzleGenerator
  nameWithType: StandardPuzzleGenerator
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/StandardPuzzleGenerator.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: StandardPuzzleGenerator
    path: ../SudokuSpice/RuleBased/StandardPuzzleGenerator.cs
    startLine: 7
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGenerates standard Sudoku puzzles.\n"
  example: []
  syntax:
    content: 'public class StandardPuzzleGenerator : PuzzleGenerator'
    content.vb: >-
      Public Class StandardPuzzleGenerator
          Inherits PuzzleGenerator
  inheritance:
  - System.Object
  - SudokuSpice.RuleBased.PuzzleGenerator
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor
  commentId: M:SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor
  id: '#ctor'
  parent: SudokuSpice.RuleBased.StandardPuzzleGenerator
  langs:
  - csharp
  - vb
  name: StandardPuzzleGenerator()
  nameWithType: StandardPuzzleGenerator.StandardPuzzleGenerator()
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator.StandardPuzzleGenerator()
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/StandardPuzzleGenerator.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/RuleBased/StandardPuzzleGenerator.cs
    startLine: 12
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nCreates a puzzle generator to create standard Sudoku puzzles.\n"
  example: []
  syntax:
    content: public StandardPuzzleGenerator()
    content.vb: Public Sub New
  overload: SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate(System.Int32,System.Int32,TimeSpan)
  commentId: M:SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate(System.Int32,System.Int32,TimeSpan)
  id: Generate(System.Int32,System.Int32,TimeSpan)
  parent: SudokuSpice.RuleBased.StandardPuzzleGenerator
  langs:
  - csharp
  - vb
  name: Generate(Int32, Int32, TimeSpan)
  nameWithType: StandardPuzzleGenerator.Generate(Int32, Int32, TimeSpan)
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate(System.Int32, System.Int32, TimeSpan)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/StandardPuzzleGenerator.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Generate
    path: ../SudokuSpice/RuleBased/StandardPuzzleGenerator.cs
    startLine: 49
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public override int? [, ] Generate(int puzzleSize, int numSquaresToSet, TimeSpan timeout)
    parameters:
    - id: puzzleSize
      type: System.Int32
    - id: numSquaresToSet
      type: System.Int32
    - id: timeout
      type: TimeSpan
    return:
      type: System.Nullable{System.Int32}[,]
    content.vb: Public Overrides Function Generate(puzzleSize As Integer, numSquaresToSet As Integer, timeout As TimeSpan) As Integer?(,)
  overridden: SudokuSpice.RuleBased.PuzzleGenerator.Generate(System.Int32,System.Int32,TimeSpan)
  overload: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.PuzzleGenerator
  commentId: T:SudokuSpice.RuleBased.PuzzleGenerator
  parent: SudokuSpice.RuleBased
  name: PuzzleGenerator
  nameWithType: PuzzleGenerator
  fullName: SudokuSpice.RuleBased.PuzzleGenerator
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor
  name: StandardPuzzleGenerator
  nameWithType: StandardPuzzleGenerator.StandardPuzzleGenerator
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator.StandardPuzzleGenerator
- uid: SudokuSpice.RuleBased.PuzzleGenerator.Generate(System.Int32,System.Int32,TimeSpan)
  commentId: M:SudokuSpice.RuleBased.PuzzleGenerator.Generate(System.Int32,System.Int32,TimeSpan)
  parent: SudokuSpice.RuleBased.PuzzleGenerator
  isExternal: true
  name: Generate(Int32, Int32, TimeSpan)
  nameWithType: PuzzleGenerator.Generate(Int32, Int32, TimeSpan)
  fullName: SudokuSpice.RuleBased.PuzzleGenerator.Generate(System.Int32, System.Int32, TimeSpan)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.PuzzleGenerator.Generate(System.Int32,System.Int32,TimeSpan)
    name: Generate
    nameWithType: PuzzleGenerator.Generate
    fullName: SudokuSpice.RuleBased.PuzzleGenerator.Generate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.PuzzleGenerator.Generate(System.Int32,System.Int32,TimeSpan)
    name: Generate
    nameWithType: PuzzleGenerator.Generate
    fullName: SudokuSpice.RuleBased.PuzzleGenerator.Generate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate*
  commentId: Overload:SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate
  name: Generate
  nameWithType: StandardPuzzleGenerator.Generate
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: System.Nullable{System.Int32}[,]
  isExternal: true
  name: Nullable<Int32>[,]
  nameWithType: Nullable<Int32>[,]
  fullName: System.Nullable<System.Int32>[,]
  nameWithType.vb: Nullable(Of Int32)(,)
  fullName.vb: System.Nullable(Of System.Int32)(,)
  name.vb: Nullable(Of Int32)(,)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: (,)
    nameWithType: (,)
    fullName: (,)
