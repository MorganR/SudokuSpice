### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper
  commentId: T:SudokuSpice.RuleBased.DynamicRuleKeeper
  id: DynamicRuleKeeper
  parent: SudokuSpice.RuleBased
  children:
  - SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor(IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  - SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  - SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
  - SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  - SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  langs:
  - csharp
  - vb
  name: DynamicRuleKeeper
  nameWithType: DynamicRuleKeeper
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/DynamicRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: DynamicRuleKeeper
    path: ../SudokuSpice/RuleBased/DynamicRuleKeeper.cs
    startLine: 10
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nEnforces an arbitrary injected set of rules.\n"
  example: []
  syntax:
    content: 'public class DynamicRuleKeeper : object, ISudokuRuleKeeper'
    content.vb: >-
      Public Class DynamicRuleKeeper
          Inherits Object
          Implements ISudokuRuleKeeper
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor(IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor(IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  id: '#ctor(IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})'
  parent: SudokuSpice.RuleBased.DynamicRuleKeeper
  langs:
  - csharp
  - vb
  name: DynamicRuleKeeper(IReadOnlyList<ISudokuRule>)
  nameWithType: DynamicRuleKeeper.DynamicRuleKeeper(IReadOnlyList<ISudokuRule>)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.DynamicRuleKeeper(IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/DynamicRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/RuleBased/DynamicRuleKeeper.cs
    startLine: 20
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nConstructs a rule keeper that will enforce all the given rules.\n"
  example: []
  syntax:
    content: public DynamicRuleKeeper(IReadOnlyList<ISudokuRule> rules)
    parameters:
    - id: rules
      type: IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
      description: The rules to enforce.
    content.vb: Public Sub New(rules As IReadOnlyList(Of ISudokuRule))
  overload: SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor*
  nameWithType.vb: DynamicRuleKeeper.DynamicRuleKeeper(IReadOnlyList(Of ISudokuRule))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.DynamicRuleKeeper.DynamicRuleKeeper(IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  name.vb: DynamicRuleKeeper(IReadOnlyList(Of ISudokuRule))
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  id: CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.DynamicRuleKeeper
  langs:
  - csharp
  - vb
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: DynamicRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/DynamicRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CopyWithNewReferences
    path: ../SudokuSpice/RuleBased/DynamicRuleKeeper.cs
    startLine: 38
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nCreates a deep copy of this rule keeper, including copies of any\n<xref href=\"SudokuSpice.RuleBased.Rules.ISudokuRule\" data-throw-if-not-resolved=\"false\"></xref>s it contains, with updated internal\n<xref href=\"SudokuSpice.RuleBased.IReadOnlyPuzzle\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SudokuSpice.RuleBased.PossibleValues\" data-throw-if-not-resolved=\"false\"></xref> references.\n"
  example: []
  syntax:
    content: public ISudokuRuleKeeper CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
      description: "\nThe new puzzle reference. Should contain the same data as the current puzzle instance.\n"
    return:
      type: SudokuSpice.RuleBased.ISudokuRuleKeeper
    content.vb: Public Function CopyWithNewReferences(puzzle As IReadOnlyPuzzleWithMutablePossibleValues) As ISudokuRuleKeeper
  overload: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  id: TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.DynamicRuleKeeper
  langs:
  - csharp
  - vb
  name: TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: DynamicRuleKeeper.TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/DynamicRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TryInit
    path: ../SudokuSpice/RuleBased/DynamicRuleKeeper.cs
    startLine: 44
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nTries to initialize this rule keeper to solve the given puzzle.\n\nWhen reusing a rule keeper to solve multiple puzzles, this must be called with each new\npuzzle to be solved.\n"
  remarks: "\nIn general, it doesn&apos;t make sense to want to maintain the previous state if this method\nfails. Therefore, it is <em>not</em> guaranteed that the rule keeper&apos;s state is\nunchanged on failure.\n"
  example: []
  syntax:
    content: public bool TryInit(IReadOnlyPuzzleWithMutablePossibleValues puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
      description: The puzzle to be solved.
    return:
      type: System.Boolean
      description: "\nFalse if the rule keeper couldn&apos;t be initialized, for example if the puzzle already\nviolates one of the rules. Else returns true.\n"
    content.vb: Public Function TryInit(puzzle As IReadOnlyPuzzleWithMutablePossibleValues) As Boolean
  overload: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
  id: GetRules
  parent: SudokuSpice.RuleBased.DynamicRuleKeeper
  langs:
  - csharp
  - vb
  name: GetRules()
  nameWithType: DynamicRuleKeeper.GetRules()
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/DynamicRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetRules
    path: ../SudokuSpice/RuleBased/DynamicRuleKeeper.cs
    startLine: 73
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGets the <xref href=\"SudokuSpice.RuleBased.Rules.ISudokuRule\" data-throw-if-not-resolved=\"false\"></xref>s enforced by this rule keeper.\n"
  example: []
  syntax:
    content: public IReadOnlyList<ISudokuRule> GetRules()
    return:
      type: IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
    content.vb: Public Function GetRules As IReadOnlyList(Of ISudokuRule)
  overload: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  id: TrySet(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.DynamicRuleKeeper
  langs:
  - csharp
  - vb
  name: TrySet(Coordinate, Int32)
  nameWithType: DynamicRuleKeeper.TrySet(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/DynamicRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TrySet
    path: ../SudokuSpice/RuleBased/DynamicRuleKeeper.cs
    startLine: 76
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nUpdates possible values based on setting the given coordinate to the given value. If\nthis update fails (i.e. it leads to an unset square with no possible values), then it\nreturns false and leaves the possible values unchanged.\n"
  example: []
  syntax:
    content: public bool TrySet(in Coordinate c, int value)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The coordinate to update.
    - id: value
      type: System.Int32
      description: The value to set <code>c</code> to.
    return:
      type: System.Boolean
      description: "\nTrue if the possible values have been updated and the rules are still satisfied.\n"
    content.vb: Public Function TrySet(ByRef c As Coordinate, value As Integer) As Boolean
  overload: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  nameWithType.vb: DynamicRuleKeeper.TrySet(ByRef Coordinate, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: TrySet(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  id: Unset(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.DynamicRuleKeeper
  langs:
  - csharp
  - vb
  name: Unset(Coordinate, Int32)
  nameWithType: DynamicRuleKeeper.Unset(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/DynamicRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Unset
    path: ../SudokuSpice/RuleBased/DynamicRuleKeeper.cs
    startLine: 120
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nUndoes an update for the given value at the specified coordinate.\n"
  example: []
  syntax:
    content: public void Unset(in Coordinate c, int value)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The coordinate where a value is being unset.
    - id: value
      type: System.Int32
      description: The value being unset.
    content.vb: Public Sub Unset(ByRef c As Coordinate, value As Integer)
  overload: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  nameWithType.vb: DynamicRuleKeeper.Unset(ByRef Coordinate, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: Unset(ByRef Coordinate, Int32)
references:
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper
  commentId: T:SudokuSpice.RuleBased.ISudokuRuleKeeper
  parent: SudokuSpice.RuleBased
  name: ISudokuRuleKeeper
  nameWithType: ISudokuRuleKeeper
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor
  name: DynamicRuleKeeper
  nameWithType: DynamicRuleKeeper.DynamicRuleKeeper
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.DynamicRuleKeeper
- uid: IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
  commentId: '!:IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<ISudokuRule>
  nameWithType: IReadOnlyList<ISudokuRule>
  fullName: IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>
  nameWithType.vb: IReadOnlyList(Of ISudokuRule)
  fullName.vb: IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule)
  name.vb: IReadOnlyList(Of ISudokuRule)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences*
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences
  name: CopyWithNewReferences
  nameWithType: DynamicRuleKeeper.CopyWithNewReferences
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: ISudokuRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: CopyWithNewReferences
    nameWithType: ISudokuRuleKeeper.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: CopyWithNewReferences
    nameWithType: ISudokuRuleKeeper.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzleWithMutablePossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit*
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit
  name: TryInit
  nameWithType: DynamicRuleKeeper.TryInit
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  name: TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: ISudokuRuleKeeper.TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: TryInit
    nameWithType: ISudokuRuleKeeper.TryInit
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: TryInit
    nameWithType: ISudokuRuleKeeper.TryInit
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules*
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
  name: GetRules
  nameWithType: DynamicRuleKeeper.GetRules
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  name: GetRules()
  nameWithType: ISudokuRuleKeeper.GetRules()
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
    name: GetRules
    nameWithType: ISudokuRuleKeeper.GetRules
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
    name: GetRules
    nameWithType: ISudokuRuleKeeper.GetRules
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet*
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet
  name: TrySet
  nameWithType: DynamicRuleKeeper.TrySet
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  isExternal: true
  name: TrySet(Coordinate, Int32)
  nameWithType: ISudokuRuleKeeper.TrySet(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
    name: TrySet
    nameWithType: ISudokuRuleKeeper.TrySet
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
    name: TrySet
    nameWithType: ISudokuRuleKeeper.TrySet
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset*
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.Unset
  name: Unset
  nameWithType: DynamicRuleKeeper.Unset
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  isExternal: true
  name: Unset(Coordinate, Int32)
  nameWithType: ISudokuRuleKeeper.Unset(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
    name: Unset
    nameWithType: ISudokuRuleKeeper.Unset
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
    name: Unset
    nameWithType: ISudokuRuleKeeper.Unset
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
