### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  commentId: T:SudokuSpice.RuleBased.PuzzleWithPossibleValues
  id: PuzzleWithPossibleValues
  parent: SudokuSpice.RuleBased
  children:
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(SudokuSpice.Puzzle)
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(SudokuSpice.RuleBased.PuzzleWithPossibleValues)
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(System.Int32)
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(System.Nullable{System.Int32}[][])
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable{System.Int32}[][])
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.CountPerUniqueValue
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(System.Int32,System.Int32)
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size
  - SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString
  langs:
  - csharp
  - vb
  name: PuzzleWithPossibleValues
  nameWithType: PuzzleWithPossibleValues
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: PuzzleWithPossibleValues
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 7
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: Stores a puzzle&apos;s data and associated possible values.
  example: []
  syntax:
    content: 'public class PuzzleWithPossibleValues : IPuzzleWithPossibleValues<PuzzleWithPossibleValues>, IPuzzle<PuzzleWithPossibleValues>, IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyPuzzleWithPossibleValues, IReadOnlyPuzzle, IPossibleValues, IReadOnlyPossibleValues'
    content.vb: >-
      Public Class PuzzleWithPossibleValues
          Implements IPuzzleWithPossibleValues(Of PuzzleWithPossibleValues), IPuzzle(Of PuzzleWithPossibleValues), IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyPuzzleWithPossibleValues, IReadOnlyPuzzle, IPossibleValues, IReadOnlyPossibleValues
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.RuleBased.IPuzzleWithPossibleValues{SudokuSpice.RuleBased.PuzzleWithPossibleValues}
  - SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}
  - SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - SudokuSpice.RuleBased.IReadOnlyPuzzleWithPossibleValues
  - SudokuSpice.IReadOnlyPuzzle
  - SudokuSpice.RuleBased.IPossibleValues
  - SudokuSpice.RuleBased.IReadOnlyPossibleValues
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size
  id: Size
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: PuzzleWithPossibleValues.Size
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Size
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 13
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nProvides read-only access to a puzzle&apos;s data.\n"
  example: []
  syntax:
    content: public int Size { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Size As Integer
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size*
  implements:
  - SudokuSpice.IReadOnlyPuzzle.Size
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares
  id: NumSquares
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: NumSquares
  nameWithType: PuzzleWithPossibleValues.NumSquares
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: NumSquares
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 15
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nProvides read-only access to a puzzle&apos;s data.\n"
  example: []
  syntax:
    content: public int NumSquares { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumSquares As Integer
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares*
  implements:
  - SudokuSpice.IReadOnlyPuzzle.NumSquares
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares
  id: NumEmptySquares
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: NumEmptySquares
  nameWithType: PuzzleWithPossibleValues.NumEmptySquares
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: NumEmptySquares
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 17
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nProvides read-only access to a puzzle&apos;s data.\n"
  example: []
  syntax:
    content: public int NumEmptySquares { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumEmptySquares As Integer
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares*
  implements:
  - SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares
  id: NumSetSquares
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: NumSetSquares
  nameWithType: PuzzleWithPossibleValues.NumSetSquares
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: NumSetSquares
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 19
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nProvides read-only access to a puzzle&apos;s data.\n"
  example: []
  syntax:
    content: public int NumSetSquares { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumSetSquares As Integer
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares*
  implements:
  - SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues
  id: AllPossibleValues
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: AllPossibleValues
  nameWithType: PuzzleWithPossibleValues.AllPossibleValues
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: AllPossibleValues
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 21
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nProvides read-only access to a puzzle&apos;s data.\n"
  example: []
  syntax:
    content: public BitVector AllPossibleValues { get; }
    parameters: []
    return:
      type: SudokuSpice.BitVector
    content.vb: Public ReadOnly Property AllPossibleValues As BitVector
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPossibleValues.AllPossibleValues
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan
  id: AllPossibleValuesSpan
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: AllPossibleValuesSpan
  nameWithType: PuzzleWithPossibleValues.AllPossibleValuesSpan
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: AllPossibleValuesSpan
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 23
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGets all the possible values for this puzzle.\n\nIf a value can be repeated n times in a region, then there should be n instances of it\nin the span.\n"
  example: []
  syntax:
    content: public ReadOnlySpan<int> AllPossibleValuesSpan { get; }
    parameters: []
    return:
      type: System.ReadOnlySpan{System.Int32}
    content.vb: Public ReadOnly Property AllPossibleValuesSpan As ReadOnlySpan(Of Integer)
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan*
  implements:
  - SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CountPerUniqueValue
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.CountPerUniqueValue
  id: CountPerUniqueValue
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: CountPerUniqueValue
  nameWithType: PuzzleWithPossibleValues.CountPerUniqueValue
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CountPerUniqueValue
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CountPerUniqueValue
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 25
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nThe count of times each unique value is expected to be included in a region.\n"
  example: []
  syntax:
    content: public IReadOnlyDictionary<int, int> CountPerUniqueValue { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Int32}
    content.vb: Public ReadOnly Property CountPerUniqueValue As IReadOnlyDictionary(Of Integer, Integer)
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CountPerUniqueValue*
  implements:
  - SudokuSpice.IReadOnlyPuzzle.CountPerUniqueValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(System.Int32)
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: PuzzleWithPossibleValues(Int32)
  nameWithType: PuzzleWithPossibleValues.PuzzleWithPossibleValues(Int32)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.PuzzleWithPossibleValues(System.Int32)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 36
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nConstructs a new puzzle of the given side length.\n"
  example: []
  syntax:
    content: public PuzzleWithPossibleValues(int size)
    parameters:
    - id: size
      type: System.Int32
      description: "\nThe side-length for this Sudoku puzzle. Must be in the inclusive range [1, 31].\n"
    content.vb: Public Sub New(size As Integer)
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThrown if size is not the square of a whole number, or is outside the range [1, 31].\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(System.Nullable{System.Int32}[][])
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(System.Nullable{System.Int32}[][])
  id: '#ctor(System.Nullable{System.Int32}[][])'
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: PuzzleWithPossibleValues(Nullable<Int32>[][])
  nameWithType: PuzzleWithPossibleValues.PuzzleWithPossibleValues(Nullable<Int32>[][])
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.PuzzleWithPossibleValues(System.Nullable<System.Int32>[][])
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 61
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nConstructs a new puzzle backed by the given array.\n\nThe puzzle is backed directly by this array (i.e. modifying the array\nmodifies the puzzle, and vice-versa). If this is not what you want, see\n<xref href=\"SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable%7bSystem.Int32%7d%5b0%3a%2c0%3a%5d)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable%7bSystem.Int32%7d%5b%5d%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>. Note that all\nfuture modifications should be done through this puzzle object, else this will be in an\nincorrect state.\n"
  example: []
  syntax:
    content: public PuzzleWithPossibleValues(int? [][] puzzleMatrix)
    parameters:
    - id: puzzleMatrix
      type: System.Nullable{System.Int32}[][]
      description: "\nThe data for this Sudoku puzzle. Preset squares should be set, and unset squares should\nbe null. The puzzle maintains a reference to this array.\n"
    content.vb: Public Sub New(puzzleMatrix As Integer?()())
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor*
  nameWithType.vb: PuzzleWithPossibleValues.PuzzleWithPossibleValues(Nullable(Of Int32)()())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.PuzzleWithPossibleValues(System.Nullable(Of System.Int32)()())
  name.vb: PuzzleWithPossibleValues(Nullable(Of Int32)()())
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(SudokuSpice.Puzzle)
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(SudokuSpice.Puzzle)
  id: '#ctor(SudokuSpice.Puzzle)'
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: PuzzleWithPossibleValues(Puzzle)
  nameWithType: PuzzleWithPossibleValues.PuzzleWithPossibleValues(Puzzle)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.PuzzleWithPossibleValues(SudokuSpice.Puzzle)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 76
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nConstructs a puzzle backed by the given <xref href=\"SudokuSpice.Puzzle\" data-throw-if-not-resolved=\"false\"></xref> object, but now with the\nability to track possible values.\n"
  example: []
  syntax:
    content: public PuzzleWithPossibleValues(Puzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.Puzzle
      description: "\nThe puzzle data to use. The puzzle maintains a reference to this object.\n"
    content.vb: Public Sub New(puzzle As Puzzle)
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(SudokuSpice.RuleBased.PuzzleWithPossibleValues)
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(SudokuSpice.RuleBased.PuzzleWithPossibleValues)
  id: '#ctor(SudokuSpice.RuleBased.PuzzleWithPossibleValues)'
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: PuzzleWithPossibleValues(PuzzleWithPossibleValues)
  nameWithType: PuzzleWithPossibleValues.PuzzleWithPossibleValues(PuzzleWithPossibleValues)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.PuzzleWithPossibleValues(SudokuSpice.RuleBased.PuzzleWithPossibleValues)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 87
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nA deep copy constructor for an existing puzzle.\n"
  example: []
  syntax:
    content: public PuzzleWithPossibleValues(PuzzleWithPossibleValues existing)
    parameters:
    - id: existing
      type: SudokuSpice.RuleBased.PuzzleWithPossibleValues
    content.vb: Public Sub New(existing As PuzzleWithPossibleValues)
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  id: CopyFrom(System.Nullable{System.Int32}[0:,0:])
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: CopyFrom(Nullable<Int32>[,])
  nameWithType: PuzzleWithPossibleValues.CopyFrom(Nullable<Int32>[,])
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable<System.Int32>[,])
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CopyFrom
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 94
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: Creates a new puzzle with a copy of the given matrix.
  example: []
  syntax:
    content: public static PuzzleWithPossibleValues CopyFrom(int? [, ] matrix)
    parameters:
    - id: matrix
      type: System.Nullable{System.Int32}[,]
    return:
      type: SudokuSpice.RuleBased.PuzzleWithPossibleValues
    content.vb: Public Shared Function CopyFrom(matrix As Integer?(,)) As PuzzleWithPossibleValues
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom*
  nameWithType.vb: PuzzleWithPossibleValues.CopyFrom(Nullable(Of Int32)(,))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable(Of System.Int32)(,))
  name.vb: CopyFrom(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable{System.Int32}[][])
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable{System.Int32}[][])
  id: CopyFrom(System.Nullable{System.Int32}[][])
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: CopyFrom(Nullable<Int32>[][])
  nameWithType: PuzzleWithPossibleValues.CopyFrom(Nullable<Int32>[][])
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable<System.Int32>[][])
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CopyFrom
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 101
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: Creates a new puzzle with a copy of the given matrix.
  example: []
  syntax:
    content: public static PuzzleWithPossibleValues CopyFrom(int? [][] matrix)
    parameters:
    - id: matrix
      type: System.Nullable{System.Int32}[][]
    return:
      type: SudokuSpice.RuleBased.PuzzleWithPossibleValues
    content.vb: Public Shared Function CopyFrom(matrix As Integer?()()) As PuzzleWithPossibleValues
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom*
  nameWithType.vb: PuzzleWithPossibleValues.CopyFrom(Nullable(Of Int32)()())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable(Of System.Int32)()())
  name.vb: CopyFrom(Nullable(Of Int32)()())
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy
  id: DeepCopy
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: DeepCopy()
  nameWithType: PuzzleWithPossibleValues.DeepCopy()
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: DeepCopy
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 107
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nCreates a deep-copy of this puzzle.\n"
  example: []
  syntax:
    content: public PuzzleWithPossibleValues DeepCopy()
    return:
      type: SudokuSpice.RuleBased.PuzzleWithPossibleValues
    content.vb: Public Function DeepCopy As PuzzleWithPossibleValues
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy*
  implements:
  - SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}.DeepCopy
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(System.Int32,System.Int32)
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(System.Int32,System.Int32)
  id: Item(System.Int32,System.Int32)
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: Item[Int32, Int32]
  nameWithType: PuzzleWithPossibleValues.Item[Int32, Int32]
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item[System.Int32, System.Int32]
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: this[]
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 110
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGets or sets the current value of a given square. A square can be &apos;unset&apos; by setting\nits value to <code>null</code>.\n"
  example: []
  syntax:
    content: public int? this[int row, int col] { get; set; }
    parameters:
    - id: row
      type: System.Int32
    - id: col
      type: System.Int32
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property Item(row As Integer, col As Integer) As Integer?
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item*
  implements:
  - SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}.Item(System.Int32,System.Int32)
  - SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  nameWithType.vb: PuzzleWithPossibleValues.Item(Int32, Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(System.Int32, System.Int32)
  name.vb: Item(Int32, Int32)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(SudokuSpice.Coordinate@)
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(SudokuSpice.Coordinate@)
  id: Item(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: Item[Coordinate]
  nameWithType: PuzzleWithPossibleValues.Item[Coordinate]
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item[SudokuSpice.Coordinate]
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: this[]
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 123
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nProvides read and write access to a Sudoku puzzle.\n"
  example: []
  syntax:
    content: public int? this[in Coordinate c] { get; set; }
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The location of the square to get/set the value of.
    return:
      type: System.Nullable{System.Int32}
      description: The value of the square at <code data-dev-comment-type="paramref" class="paramref">c</code>
    content.vb: Public Property Item(ByRef c As Coordinate) As Integer?
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item*
  implements:
  - SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}.Item(SudokuSpice.Coordinate@)
  - SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  nameWithType.vb: PuzzleWithPossibleValues.Item(ByRef Coordinate)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(ByRef SudokuSpice.Coordinate)
  name.vb: Item(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords
  id: GetUnsetCoords
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: GetUnsetCoords()
  nameWithType: PuzzleWithPossibleValues.GetUnsetCoords()
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetUnsetCoords
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 137
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: Gets a span of coordinates for all the unset squares.
  example: []
  syntax:
    content: public ReadOnlySpan<Coordinate> GetUnsetCoords()
    return:
      type: System.ReadOnlySpan{SudokuSpice.Coordinate}
    content.vb: Public Function GetUnsetCoords As ReadOnlySpan(Of Coordinate)
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords*
  implements:
  - SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString
  id: ToString
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: PuzzleWithPossibleValues.ToString()
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: ToString
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 143
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nReturns the puzzle in a pretty string format, with boxes and rows separated by pipes\nand dashes.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  id: IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: IntersectPossibleValues(Coordinate, BitVector)
  nameWithType: PuzzleWithPossibleValues.IntersectPossibleValues(Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate, SudokuSpice.BitVector)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: IntersectPossibleValues
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 146
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nModifies the possible values for a square to be the intersect of the current possible\nvalues and the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">possibleValues</code>.\n"
  example: []
  syntax:
    content: public void IntersectPossibleValues(in Coordinate c, BitVector possibleValues)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: possibleValues
      type: SudokuSpice.BitVector
    content.vb: Public Sub IntersectPossibleValues(ByRef c As Coordinate, possibleValues As BitVector)
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues*
  implements:
  - SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  nameWithType.vb: PuzzleWithPossibleValues.IntersectPossibleValues(ByRef Coordinate, BitVector)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues(ByRef SudokuSpice.Coordinate, SudokuSpice.BitVector)
  name.vb: IntersectPossibleValues(ByRef Coordinate, BitVector)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  id: ResetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: ResetPossibleValues(Coordinate)
  nameWithType: PuzzleWithPossibleValues.ResetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: ResetPossibleValues
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 149
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nResets the possible values at the given location to be all possible values for this\npuzzle.\n"
  example: []
  syntax:
    content: public void ResetPossibleValues(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    content.vb: Public Sub ResetPossibleValues(ByRef c As Coordinate)
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues*
  implements:
  - SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  nameWithType.vb: PuzzleWithPossibleValues.ResetPossibleValues(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues(ByRef SudokuSpice.Coordinate)
  name.vb: ResetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues(SudokuSpice.Coordinate@)
  id: GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: GetPossibleValues(Coordinate)
  nameWithType: PuzzleWithPossibleValues.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetPossibleValues
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 151
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGets the current possible values for a given coordinate.\n\nIf the value is already set for the given coordinate, the result is undefined.\n"
  example: []
  syntax:
    content: public BitVector GetPossibleValues(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    return:
      type: SudokuSpice.BitVector
    content.vb: Public Function GetPossibleValues(ByRef c As Coordinate) As BitVector
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues(SudokuSpice.Coordinate@)
  nameWithType.vb: PuzzleWithPossibleValues.GetPossibleValues(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  name.vb: GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  id: SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  parent: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  langs:
  - csharp
  - vb
  name: SetPossibleValues(Coordinate, BitVector)
  nameWithType: PuzzleWithPossibleValues.SetPossibleValues(Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues(SudokuSpice.Coordinate, SudokuSpice.BitVector)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: SetPossibleValues
    path: ../SudokuSpice/RuleBased/PuzzleWithPossibleValues.cs
    startLine: 153
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nSets the possible values for a square.\n"
  example: []
  syntax:
    content: public void SetPossibleValues(in Coordinate c, BitVector possibleValues)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: possibleValues
      type: SudokuSpice.BitVector
    content.vb: Public Sub SetPossibleValues(ByRef c As Coordinate, possibleValues As BitVector)
  overload: SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues*
  implements:
  - SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  nameWithType.vb: PuzzleWithPossibleValues.SetPossibleValues(ByRef Coordinate, BitVector)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues(ByRef SudokuSpice.Coordinate, SudokuSpice.BitVector)
  name.vb: SetPossibleValues(ByRef Coordinate, BitVector)
references:
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.RuleBased.IPuzzleWithPossibleValues{SudokuSpice.RuleBased.PuzzleWithPossibleValues}
  commentId: T:SudokuSpice.RuleBased.IPuzzleWithPossibleValues{SudokuSpice.RuleBased.PuzzleWithPossibleValues}
  parent: SudokuSpice.RuleBased
  definition: SudokuSpice.RuleBased.IPuzzleWithPossibleValues`1
  name: IPuzzleWithPossibleValues<PuzzleWithPossibleValues>
  nameWithType: IPuzzleWithPossibleValues<PuzzleWithPossibleValues>
  fullName: SudokuSpice.RuleBased.IPuzzleWithPossibleValues<SudokuSpice.RuleBased.PuzzleWithPossibleValues>
  nameWithType.vb: IPuzzleWithPossibleValues(Of PuzzleWithPossibleValues)
  fullName.vb: SudokuSpice.RuleBased.IPuzzleWithPossibleValues(Of SudokuSpice.RuleBased.PuzzleWithPossibleValues)
  name.vb: IPuzzleWithPossibleValues(Of PuzzleWithPossibleValues)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IPuzzleWithPossibleValues`1
    name: IPuzzleWithPossibleValues
    nameWithType: IPuzzleWithPossibleValues
    fullName: SudokuSpice.RuleBased.IPuzzleWithPossibleValues
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues
    name: PuzzleWithPossibleValues
    nameWithType: PuzzleWithPossibleValues
    fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.RuleBased.IPuzzleWithPossibleValues`1
    name: IPuzzleWithPossibleValues
    nameWithType: IPuzzleWithPossibleValues
    fullName: SudokuSpice.RuleBased.IPuzzleWithPossibleValues
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues
    name: PuzzleWithPossibleValues
    nameWithType: PuzzleWithPossibleValues
    fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}
  commentId: T:SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}
  parent: SudokuSpice
  definition: SudokuSpice.IPuzzle`1
  name: IPuzzle<PuzzleWithPossibleValues>
  nameWithType: IPuzzle<PuzzleWithPossibleValues>
  fullName: SudokuSpice.IPuzzle<SudokuSpice.RuleBased.PuzzleWithPossibleValues>
  nameWithType.vb: IPuzzle(Of PuzzleWithPossibleValues)
  fullName.vb: SudokuSpice.IPuzzle(Of SudokuSpice.RuleBased.PuzzleWithPossibleValues)
  name.vb: IPuzzle(Of PuzzleWithPossibleValues)
  spec.csharp:
  - uid: SudokuSpice.IPuzzle`1
    name: IPuzzle
    nameWithType: IPuzzle
    fullName: SudokuSpice.IPuzzle
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues
    name: PuzzleWithPossibleValues
    nameWithType: PuzzleWithPossibleValues
    fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.IPuzzle`1
    name: IPuzzle
    nameWithType: IPuzzle
    fullName: SudokuSpice.IPuzzle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues
    name: PuzzleWithPossibleValues
    nameWithType: PuzzleWithPossibleValues
    fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzleWithMutablePossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithPossibleValues
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithPossibleValues
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzleWithPossibleValues
  nameWithType: IReadOnlyPuzzleWithPossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithPossibleValues
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice.RuleBased.IPossibleValues
  commentId: T:SudokuSpice.RuleBased.IPossibleValues
  parent: SudokuSpice.RuleBased
  name: IPossibleValues
  nameWithType: IPossibleValues
  fullName: SudokuSpice.RuleBased.IPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPossibleValues
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPossibleValues
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPossibleValues
  nameWithType: IReadOnlyPossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPossibleValues
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.RuleBased.IPuzzleWithPossibleValues`1
  commentId: T:SudokuSpice.RuleBased.IPuzzleWithPossibleValues`1
  name: IPuzzleWithPossibleValues<T>
  nameWithType: IPuzzleWithPossibleValues<T>
  fullName: SudokuSpice.RuleBased.IPuzzleWithPossibleValues<T>
  nameWithType.vb: IPuzzleWithPossibleValues(Of T)
  fullName.vb: SudokuSpice.RuleBased.IPuzzleWithPossibleValues(Of T)
  name.vb: IPuzzleWithPossibleValues(Of T)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IPuzzleWithPossibleValues`1
    name: IPuzzleWithPossibleValues
    nameWithType: IPuzzleWithPossibleValues
    fullName: SudokuSpice.RuleBased.IPuzzleWithPossibleValues
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.RuleBased.IPuzzleWithPossibleValues`1
    name: IPuzzleWithPossibleValues
    nameWithType: IPuzzleWithPossibleValues
    fullName: SudokuSpice.RuleBased.IPuzzleWithPossibleValues
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IPuzzle`1
  commentId: T:SudokuSpice.IPuzzle`1
  name: IPuzzle<T>
  nameWithType: IPuzzle<T>
  fullName: SudokuSpice.IPuzzle<T>
  nameWithType.vb: IPuzzle(Of T)
  fullName.vb: SudokuSpice.IPuzzle(Of T)
  name.vb: IPuzzle(Of T)
  spec.csharp:
  - uid: SudokuSpice.IPuzzle`1
    name: IPuzzle
    nameWithType: IPuzzle
    fullName: SudokuSpice.IPuzzle
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.IPuzzle`1
    name: IPuzzle
    nameWithType: IPuzzle
    fullName: SudokuSpice.IPuzzle
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size
  name: Size
  nameWithType: PuzzleWithPossibleValues.Size
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size
- uid: SudokuSpice.IReadOnlyPuzzle.Size
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Size
  parent: SudokuSpice.IReadOnlyPuzzle
  name: Size
  nameWithType: IReadOnlyPuzzle.Size
  fullName: SudokuSpice.IReadOnlyPuzzle.Size
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares
  name: NumSquares
  nameWithType: PuzzleWithPossibleValues.NumSquares
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumSquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumSquares
  parent: SudokuSpice.IReadOnlyPuzzle
  name: NumSquares
  nameWithType: IReadOnlyPuzzle.NumSquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSquares
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares
  name: NumEmptySquares
  nameWithType: PuzzleWithPossibleValues.NumEmptySquares
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  parent: SudokuSpice.IReadOnlyPuzzle
  name: NumEmptySquares
  nameWithType: IReadOnlyPuzzle.NumEmptySquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares
  name: NumSetSquares
  nameWithType: PuzzleWithPossibleValues.NumSetSquares
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  parent: SudokuSpice.IReadOnlyPuzzle
  name: NumSetSquares
  nameWithType: IReadOnlyPuzzle.NumSetSquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSetSquares
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues
  name: AllPossibleValues
  nameWithType: PuzzleWithPossibleValues.AllPossibleValues
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPossibleValues.AllPossibleValues
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPossibleValues.AllPossibleValues
  parent: SudokuSpice.RuleBased.IReadOnlyPossibleValues
  name: AllPossibleValues
  nameWithType: IReadOnlyPossibleValues.AllPossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPossibleValues.AllPossibleValues
- uid: SudokuSpice.BitVector
  commentId: T:SudokuSpice.BitVector
  parent: SudokuSpice
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.BitVector
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan
  name: AllPossibleValuesSpan
  nameWithType: PuzzleWithPossibleValues.AllPossibleValuesSpan
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan
- uid: SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  commentId: P:SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  parent: SudokuSpice.IReadOnlyPuzzle
  name: AllPossibleValuesSpan
  nameWithType: IReadOnlyPuzzle.AllPossibleValuesSpan
  fullName: SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
- uid: System.ReadOnlySpan{System.Int32}
  commentId: T:System.ReadOnlySpan{System.Int32}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Int32>
  nameWithType: ReadOnlySpan<Int32>
  fullName: System.ReadOnlySpan<System.Int32>
  nameWithType.vb: ReadOnlySpan(Of Int32)
  fullName.vb: System.ReadOnlySpan(Of System.Int32)
  name.vb: ReadOnlySpan(Of Int32)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CountPerUniqueValue*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.CountPerUniqueValue
  name: CountPerUniqueValue
  nameWithType: PuzzleWithPossibleValues.CountPerUniqueValue
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CountPerUniqueValue
- uid: SudokuSpice.IReadOnlyPuzzle.CountPerUniqueValue
  commentId: P:SudokuSpice.IReadOnlyPuzzle.CountPerUniqueValue
  parent: SudokuSpice.IReadOnlyPuzzle
  name: CountPerUniqueValue
  nameWithType: IReadOnlyPuzzle.CountPerUniqueValue
  fullName: SudokuSpice.IReadOnlyPuzzle.CountPerUniqueValue
- uid: System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Int32}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<Int32, Int32>
  nameWithType: IReadOnlyDictionary<Int32, Int32>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.Int32, System.Int32>
  nameWithType.vb: IReadOnlyDictionary(Of Int32, Int32)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.Int32, System.Int32)
  name.vb: IReadOnlyDictionary(Of Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor
  name: PuzzleWithPossibleValues
  nameWithType: PuzzleWithPossibleValues.PuzzleWithPossibleValues
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.PuzzleWithPossibleValues
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  isExternal: true
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable{System.Int32}[][])
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable{System.Int32}[][])
  isExternal: true
- uid: System.Nullable{System.Int32}[][]
  isExternal: true
  name: Nullable<Int32>[][]
  nameWithType: Nullable<Int32>[][]
  fullName: System.Nullable<System.Int32>[][]
  nameWithType.vb: Nullable(Of Int32)()()
  fullName.vb: System.Nullable(Of System.Int32)()()
  name.vb: Nullable(Of Int32)()()
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: SudokuSpice.Puzzle
  commentId: T:SudokuSpice.Puzzle
  parent: SudokuSpice
  name: Puzzle
  nameWithType: Puzzle
  fullName: SudokuSpice.Puzzle
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  commentId: T:SudokuSpice.RuleBased.PuzzleWithPossibleValues
  parent: SudokuSpice.RuleBased
  name: PuzzleWithPossibleValues
  nameWithType: PuzzleWithPossibleValues
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom
  name: CopyFrom
  nameWithType: PuzzleWithPossibleValues.CopyFrom
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom
- uid: System.Nullable{System.Int32}[,]
  isExternal: true
  name: Nullable<Int32>[,]
  nameWithType: Nullable<Int32>[,]
  fullName: System.Nullable<System.Int32>[,]
  nameWithType.vb: Nullable(Of Int32)(,)
  fullName.vb: System.Nullable(Of System.Int32)(,)
  name.vb: Nullable(Of Int32)(,)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: (,)
    nameWithType: (,)
    fullName: (,)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy
  name: DeepCopy
  nameWithType: PuzzleWithPossibleValues.DeepCopy
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy
- uid: SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}.DeepCopy
  commentId: M:SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}.DeepCopy
  parent: SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}
  definition: SudokuSpice.IPuzzle`1.DeepCopy
  name: DeepCopy()
  nameWithType: IPuzzle<PuzzleWithPossibleValues>.DeepCopy()
  fullName: SudokuSpice.IPuzzle<SudokuSpice.RuleBased.PuzzleWithPossibleValues>.DeepCopy()
  nameWithType.vb: IPuzzle(Of PuzzleWithPossibleValues).DeepCopy()
  fullName.vb: SudokuSpice.IPuzzle(Of SudokuSpice.RuleBased.PuzzleWithPossibleValues).DeepCopy()
  spec.csharp:
  - uid: SudokuSpice.IPuzzle`1.DeepCopy
    name: DeepCopy
    nameWithType: IPuzzle<PuzzleWithPossibleValues>.DeepCopy
    fullName: SudokuSpice.IPuzzle<SudokuSpice.RuleBased.PuzzleWithPossibleValues>.DeepCopy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IPuzzle`1.DeepCopy
    name: DeepCopy
    nameWithType: IPuzzle(Of PuzzleWithPossibleValues).DeepCopy
    fullName: SudokuSpice.IPuzzle(Of SudokuSpice.RuleBased.PuzzleWithPossibleValues).DeepCopy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IPuzzle`1.DeepCopy
  commentId: M:SudokuSpice.IPuzzle`1.DeepCopy
  name: DeepCopy()
  nameWithType: IPuzzle<T>.DeepCopy()
  fullName: SudokuSpice.IPuzzle<T>.DeepCopy()
  nameWithType.vb: IPuzzle(Of T).DeepCopy()
  fullName.vb: SudokuSpice.IPuzzle(Of T).DeepCopy()
  spec.csharp:
  - uid: SudokuSpice.IPuzzle`1.DeepCopy
    name: DeepCopy
    nameWithType: IPuzzle<T>.DeepCopy
    fullName: SudokuSpice.IPuzzle<T>.DeepCopy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IPuzzle`1.DeepCopy
    name: DeepCopy
    nameWithType: IPuzzle(Of T).DeepCopy
    fullName: SudokuSpice.IPuzzle(Of T).DeepCopy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item
  name: Item
  nameWithType: PuzzleWithPossibleValues.Item
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item
- uid: SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}.Item(System.Int32,System.Int32)
  commentId: P:SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}.Item(System.Int32,System.Int32)
  parent: SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}
  definition: SudokuSpice.IPuzzle`1.Item(System.Int32,System.Int32)
  name: Item[Int32, Int32]
  nameWithType: IPuzzle<PuzzleWithPossibleValues>.Item[Int32, Int32]
  fullName: SudokuSpice.IPuzzle<SudokuSpice.RuleBased.PuzzleWithPossibleValues>.Item[System.Int32, System.Int32]
  nameWithType.vb: IPuzzle(Of PuzzleWithPossibleValues).Item(Int32, Int32)
  fullName.vb: SudokuSpice.IPuzzle(Of SudokuSpice.RuleBased.PuzzleWithPossibleValues).Item(System.Int32, System.Int32)
  name.vb: Item(Int32, Int32)
  spec.csharp:
  - uid: SudokuSpice.IPuzzle`1.Item(System.Int32,System.Int32)
    name: Item
    nameWithType: IPuzzle<PuzzleWithPossibleValues>.Item
    fullName: SudokuSpice.IPuzzle<SudokuSpice.RuleBased.PuzzleWithPossibleValues>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: SudokuSpice.IPuzzle`1.Item(System.Int32,System.Int32)
    name: Item
    nameWithType: IPuzzle(Of PuzzleWithPossibleValues).Item
    fullName: SudokuSpice.IPuzzle(Of SudokuSpice.RuleBased.PuzzleWithPossibleValues).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  parent: SudokuSpice.IReadOnlyPuzzle
  isExternal: true
  name: Item[Int32, Int32]
  nameWithType: IReadOnlyPuzzle.Item[Int32, Int32]
  fullName: SudokuSpice.IReadOnlyPuzzle.Item[System.Int32, System.Int32]
  nameWithType.vb: IReadOnlyPuzzle.Item(Int32, Int32)
  fullName.vb: SudokuSpice.IReadOnlyPuzzle.Item(System.Int32, System.Int32)
  name.vb: Item(Int32, Int32)
  spec.csharp:
  - uid: SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
    name: Item
    nameWithType: IReadOnlyPuzzle.Item
    fullName: SudokuSpice.IReadOnlyPuzzle.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
    name: Item
    nameWithType: IReadOnlyPuzzle.Item
    fullName: SudokuSpice.IReadOnlyPuzzle.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IPuzzle`1.Item(System.Int32,System.Int32)
  commentId: P:SudokuSpice.IPuzzle`1.Item(System.Int32,System.Int32)
  isExternal: true
  name: Item[Int32, Int32]
  nameWithType: IPuzzle<T>.Item[Int32, Int32]
  fullName: SudokuSpice.IPuzzle<T>.Item[System.Int32, System.Int32]
  nameWithType.vb: IPuzzle(Of T).Item(Int32, Int32)
  fullName.vb: SudokuSpice.IPuzzle(Of T).Item(System.Int32, System.Int32)
  name.vb: Item(Int32, Int32)
  spec.csharp:
  - uid: SudokuSpice.IPuzzle`1.Item(System.Int32,System.Int32)
    name: Item
    nameWithType: IPuzzle<T>.Item
    fullName: SudokuSpice.IPuzzle<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: SudokuSpice.IPuzzle`1.Item(System.Int32,System.Int32)
    name: Item
    nameWithType: IPuzzle(Of T).Item
    fullName: SudokuSpice.IPuzzle(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}.Item(SudokuSpice.Coordinate@)
  commentId: P:SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}.Item(SudokuSpice.Coordinate@)
  parent: SudokuSpice.IPuzzle{SudokuSpice.RuleBased.PuzzleWithPossibleValues}
  definition: SudokuSpice.IPuzzle`1.Item(SudokuSpice.Coordinate@)
  name: Item[Coordinate]
  nameWithType: IPuzzle<PuzzleWithPossibleValues>.Item[Coordinate]
  fullName: SudokuSpice.IPuzzle<SudokuSpice.RuleBased.PuzzleWithPossibleValues>.Item[SudokuSpice.Coordinate]
  nameWithType.vb: IPuzzle(Of PuzzleWithPossibleValues).Item(Coordinate)
  fullName.vb: SudokuSpice.IPuzzle(Of SudokuSpice.RuleBased.PuzzleWithPossibleValues).Item(SudokuSpice.Coordinate)
  name.vb: Item(Coordinate)
  spec.csharp:
  - uid: SudokuSpice.IPuzzle`1.Item(SudokuSpice.Coordinate@)
    name: Item
    nameWithType: IPuzzle<PuzzleWithPossibleValues>.Item
    fullName: SudokuSpice.IPuzzle<SudokuSpice.RuleBased.PuzzleWithPossibleValues>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: SudokuSpice.IPuzzle`1.Item(SudokuSpice.Coordinate@)
    name: Item
    nameWithType: IPuzzle(Of PuzzleWithPossibleValues).Item
    fullName: SudokuSpice.IPuzzle(Of SudokuSpice.RuleBased.PuzzleWithPossibleValues).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  parent: SudokuSpice.IReadOnlyPuzzle
  name: Item[Coordinate]
  nameWithType: IReadOnlyPuzzle.Item[Coordinate]
  fullName: SudokuSpice.IReadOnlyPuzzle.Item[SudokuSpice.Coordinate]
  nameWithType.vb: IReadOnlyPuzzle.Item(Coordinate)
  fullName.vb: SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate)
  name.vb: Item(Coordinate)
  spec.csharp:
  - uid: SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
    name: Item
    nameWithType: IReadOnlyPuzzle.Item
    fullName: SudokuSpice.IReadOnlyPuzzle.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
    name: Item
    nameWithType: IReadOnlyPuzzle.Item
    fullName: SudokuSpice.IReadOnlyPuzzle.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.IPuzzle`1.Item(SudokuSpice.Coordinate@)
  commentId: P:SudokuSpice.IPuzzle`1.Item(SudokuSpice.Coordinate@)
  name: Item[Coordinate]
  nameWithType: IPuzzle<T>.Item[Coordinate]
  fullName: SudokuSpice.IPuzzle<T>.Item[SudokuSpice.Coordinate]
  nameWithType.vb: IPuzzle(Of T).Item(Coordinate)
  fullName.vb: SudokuSpice.IPuzzle(Of T).Item(SudokuSpice.Coordinate)
  name.vb: Item(Coordinate)
  spec.csharp:
  - uid: SudokuSpice.IPuzzle`1.Item(SudokuSpice.Coordinate@)
    name: Item
    nameWithType: IPuzzle<T>.Item
    fullName: SudokuSpice.IPuzzle<T>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: SudokuSpice.IPuzzle`1.Item(SudokuSpice.Coordinate@)
    name: Item
    nameWithType: IPuzzle(Of T).Item
    fullName: SudokuSpice.IPuzzle(Of T).Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords
  name: GetUnsetCoords
  nameWithType: PuzzleWithPossibleValues.GetUnsetCoords
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords
- uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  commentId: M:SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  parent: SudokuSpice.IReadOnlyPuzzle
  name: GetUnsetCoords()
  nameWithType: IReadOnlyPuzzle.GetUnsetCoords()
  fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords()
  spec.csharp:
  - uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
    name: GetUnsetCoords
    nameWithType: IReadOnlyPuzzle.GetUnsetCoords
    fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
    name: GetUnsetCoords
    nameWithType: IReadOnlyPuzzle.GetUnsetCoords
    fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ReadOnlySpan{SudokuSpice.Coordinate}
  commentId: T:System.ReadOnlySpan{SudokuSpice.Coordinate}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Coordinate>
  nameWithType: ReadOnlySpan<Coordinate>
  fullName: System.ReadOnlySpan<SudokuSpice.Coordinate>
  nameWithType.vb: ReadOnlySpan(Of Coordinate)
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.Coordinate)
  name.vb: ReadOnlySpan(Of Coordinate)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString
  name: ToString
  nameWithType: PuzzleWithPossibleValues.ToString
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues
  name: IntersectPossibleValues
  nameWithType: PuzzleWithPossibleValues.IntersectPossibleValues
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues
- uid: SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  commentId: M:SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  parent: SudokuSpice.RuleBased.IPossibleValues
  name: IntersectPossibleValues(Coordinate, BitVector)
  nameWithType: IPossibleValues.IntersectPossibleValues(Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate, SudokuSpice.BitVector)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
    name: IntersectPossibleValues
    nameWithType: IPossibleValues.IntersectPossibleValues
    fullName: SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.BitVector
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
    name: IntersectPossibleValues
    nameWithType: IPossibleValues.IntersectPossibleValues
    fullName: SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.BitVector
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues
  name: ResetPossibleValues
  nameWithType: PuzzleWithPossibleValues.ResetPossibleValues
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues
- uid: SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.IPossibleValues
  name: ResetPossibleValues(Coordinate)
  nameWithType: IPossibleValues.ResetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
    name: ResetPossibleValues
    nameWithType: IPossibleValues.ResetPossibleValues
    fullName: SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
    name: ResetPossibleValues
    nameWithType: IPossibleValues.ResetPossibleValues
    fullName: SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues
  name: GetPossibleValues
  nameWithType: PuzzleWithPossibleValues.GetPossibleValues
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.IReadOnlyPossibleValues
  name: GetPossibleValues(Coordinate)
  nameWithType: IReadOnlyPossibleValues.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues(SudokuSpice.Coordinate)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: IReadOnlyPossibleValues.GetPossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: IReadOnlyPossibleValues.GetPossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues
  name: SetPossibleValues
  nameWithType: PuzzleWithPossibleValues.SetPossibleValues
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues
- uid: SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  commentId: M:SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  parent: SudokuSpice.RuleBased.IPossibleValues
  name: SetPossibleValues(Coordinate, BitVector)
  nameWithType: IPossibleValues.SetPossibleValues(Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues(SudokuSpice.Coordinate, SudokuSpice.BitVector)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
    name: SetPossibleValues
    nameWithType: IPossibleValues.SetPossibleValues
    fullName: SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.BitVector
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
    name: SetPossibleValues
    nameWithType: IPossibleValues.SetPossibleValues
    fullName: SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.BitVector
  - name: )
    nameWithType: )
    fullName: )
