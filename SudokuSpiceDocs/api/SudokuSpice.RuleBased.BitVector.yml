### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.BitVector
  commentId: T:SudokuSpice.RuleBased.BitVector
  id: BitVector
  parent: SudokuSpice.RuleBased
  children:
  - SudokuSpice.RuleBased.BitVector.#ctor(System.UInt32)
  - SudokuSpice.RuleBased.BitVector.Count
  - SudokuSpice.RuleBased.BitVector.CreateWithSize(System.Int32)
  - SudokuSpice.RuleBased.BitVector.Data
  - SudokuSpice.RuleBased.BitVector.Equals(SudokuSpice.RuleBased.BitVector)
  - SudokuSpice.RuleBased.BitVector.Equals(System.Object)
  - SudokuSpice.RuleBased.BitVector.FindIntersect(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  - SudokuSpice.RuleBased.BitVector.FindUnion(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  - SudokuSpice.RuleBased.BitVector.GetHashCode
  - SudokuSpice.RuleBased.BitVector.GetSetBits
  - SudokuSpice.RuleBased.BitVector.IsBitSet(System.Int32)
  - SudokuSpice.RuleBased.BitVector.IsEmpty
  - SudokuSpice.RuleBased.BitVector.op_Equality(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  - SudokuSpice.RuleBased.BitVector.op_Inequality(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  - SudokuSpice.RuleBased.BitVector.PopulateSetBits(System.Span{System.Int32})
  - SudokuSpice.RuleBased.BitVector.SetBit(System.Int32)
  - SudokuSpice.RuleBased.BitVector.ToString
  - SudokuSpice.RuleBased.BitVector.UnsetBit(System.Int32)
  langs:
  - csharp
  - vb
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.RuleBased.BitVector
  type: Struct
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: BitVector
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 9
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nA 32-bit vector with simple operations for getting and setting bits.\n"
  example: []
  syntax:
    content: 'public struct BitVector : IEquatable<BitVector>'
    content.vb: >-
      Public Structure BitVector
          Implements IEquatable(Of BitVector)
  implements:
  - System.IEquatable{SudokuSpice.RuleBased.BitVector}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: SudokuSpice.RuleBased.BitVector.Data
  commentId: P:SudokuSpice.RuleBased.BitVector.Data
  id: Data
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: BitVector.Data
  fullName: SudokuSpice.RuleBased.BitVector.Data
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: Data
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 27
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGets the data stored in this bit vector as an unsigned int.\n"
  example: []
  syntax:
    content: public uint Data { get; }
    parameters: []
    return:
      type: System.UInt32
    content.vb: Public ReadOnly Property Data As UInteger
  overload: SudokuSpice.RuleBased.BitVector.Data*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.BitVector.Count
  commentId: P:SudokuSpice.RuleBased.BitVector.Count
  id: Count
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: BitVector.Count
  fullName: SudokuSpice.RuleBased.BitVector.Count
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: Count
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 37
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGets the count of bits that are set.\n"
  remarks: "\nThis relies on the <xref href=\"System.Runtime.Intrinsics.X86.Popcnt\" data-throw-if-not-resolved=\"false\"></xref> hardware intrinsic to be efficient. If this\noperation is not available on your hardware, then this function falls back to a\nconsiderably less efficient iterative count over all the bits in the vector.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: SudokuSpice.RuleBased.BitVector.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.BitVector.#ctor(System.UInt32)
  commentId: M:SudokuSpice.RuleBased.BitVector.#ctor(System.UInt32)
  id: '#ctor(System.UInt32)'
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: BitVector(UInt32)
  nameWithType: BitVector.BitVector(UInt32)
  fullName: SudokuSpice.RuleBased.BitVector.BitVector(System.UInt32)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 60
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nConstructs a bit vector with the given data.\n"
  example: []
  syntax:
    content: public BitVector(uint data)
    parameters:
    - id: data
      type: System.UInt32
      description: The data to use for this bit vector.
    content.vb: Public Sub New(data As UInteger)
  overload: SudokuSpice.RuleBased.BitVector.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.BitVector.CreateWithSize(System.Int32)
  commentId: M:SudokuSpice.RuleBased.BitVector.CreateWithSize(System.Int32)
  id: CreateWithSize(System.Int32)
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: CreateWithSize(Int32)
  nameWithType: BitVector.CreateWithSize(Int32)
  fullName: SudokuSpice.RuleBased.BitVector.CreateWithSize(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: CreateWithSize
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 69
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nCreates a bit vector with only the first <code>size</code> bits set to true.\n"
  example: []
  syntax:
    content: public static BitVector CreateWithSize(int size)
    parameters:
    - id: size
      type: System.Int32
      description: The number of bits to set.
    return:
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public Shared Function CreateWithSize(size As Integer) As BitVector
  overload: SudokuSpice.RuleBased.BitVector.CreateWithSize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SudokuSpice.RuleBased.BitVector.FindIntersect(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  commentId: M:SudokuSpice.RuleBased.BitVector.FindIntersect(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  id: FindIntersect(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: FindIntersect(BitVector, BitVector)
  nameWithType: BitVector.FindIntersect(BitVector, BitVector)
  fullName: SudokuSpice.RuleBased.BitVector.FindIntersect(SudokuSpice.RuleBased.BitVector, SudokuSpice.RuleBased.BitVector)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: FindIntersect
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 88
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nCreates a bit vector that is the intersect of the given vectors.\n"
  example: []
  syntax:
    content: public static BitVector FindIntersect(BitVector a, BitVector b)
    parameters:
    - id: a
      type: SudokuSpice.RuleBased.BitVector
      description: One bit vector.
    - id: b
      type: SudokuSpice.RuleBased.BitVector
      description: The other bit vector.
    return:
      type: SudokuSpice.RuleBased.BitVector
      description: A new <code>BitVector</code> that is the intersect of the given vectors.
    content.vb: Public Shared Function FindIntersect(a As BitVector, b As BitVector) As BitVector
  overload: SudokuSpice.RuleBased.BitVector.FindIntersect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SudokuSpice.RuleBased.BitVector.FindUnion(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  commentId: M:SudokuSpice.RuleBased.BitVector.FindUnion(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  id: FindUnion(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: FindUnion(BitVector, BitVector)
  nameWithType: BitVector.FindUnion(BitVector, BitVector)
  fullName: SudokuSpice.RuleBased.BitVector.FindUnion(SudokuSpice.RuleBased.BitVector, SudokuSpice.RuleBased.BitVector)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: FindUnion
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 96
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nCreates a bit vector that is the union of the given vectors.\n"
  example: []
  syntax:
    content: public static BitVector FindUnion(BitVector a, BitVector b)
    parameters:
    - id: a
      type: SudokuSpice.RuleBased.BitVector
      description: One bit vector.
    - id: b
      type: SudokuSpice.RuleBased.BitVector
      description: The other bit vector.
    return:
      type: SudokuSpice.RuleBased.BitVector
      description: A new <code>BitVector</code> that is the union of the given vectors.
    content.vb: Public Shared Function FindUnion(a As BitVector, b As BitVector) As BitVector
  overload: SudokuSpice.RuleBased.BitVector.FindUnion*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SudokuSpice.RuleBased.BitVector.UnsetBit(System.Int32)
  commentId: M:SudokuSpice.RuleBased.BitVector.UnsetBit(System.Int32)
  id: UnsetBit(System.Int32)
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: UnsetBit(Int32)
  nameWithType: BitVector.UnsetBit(Int32)
  fullName: SudokuSpice.RuleBased.BitVector.UnsetBit(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: UnsetBit
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 102
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nUnsets the given bit index in the given vector. Leaves other bits unchanged.\n"
  example: []
  syntax:
    content: public void UnsetBit(int bit)
    parameters:
    - id: bit
      type: System.Int32
      description: The zero-based index of the bit to unset.
    content.vb: Public Sub UnsetBit(bit As Integer)
  overload: SudokuSpice.RuleBased.BitVector.UnsetBit*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.BitVector.SetBit(System.Int32)
  commentId: M:SudokuSpice.RuleBased.BitVector.SetBit(System.Int32)
  id: SetBit(System.Int32)
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: SetBit(Int32)
  nameWithType: BitVector.SetBit(Int32)
  fullName: SudokuSpice.RuleBased.BitVector.SetBit(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: SetBit
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 108
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nSets the given bit index in the given vector. Leaves other bits unchanged.\n"
  example: []
  syntax:
    content: public void SetBit(int bit)
    parameters:
    - id: bit
      type: System.Int32
      description: The zero-based index of the bit to set.
    content.vb: Public Sub SetBit(bit As Integer)
  overload: SudokuSpice.RuleBased.BitVector.SetBit*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.BitVector.IsEmpty
  commentId: M:SudokuSpice.RuleBased.BitVector.IsEmpty
  id: IsEmpty
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: IsEmpty()
  nameWithType: BitVector.IsEmpty()
  fullName: SudokuSpice.RuleBased.BitVector.IsEmpty()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: IsEmpty
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 114
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nChecks if this vector is empty (i.e. no bits are set).\n"
  example: []
  syntax:
    content: public bool IsEmpty()
    return:
      type: System.Boolean
      description: True if empty.
    content.vb: Public Function IsEmpty As Boolean
  overload: SudokuSpice.RuleBased.BitVector.IsEmpty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.BitVector.IsBitSet(System.Int32)
  commentId: M:SudokuSpice.RuleBased.BitVector.IsBitSet(System.Int32)
  id: IsBitSet(System.Int32)
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: IsBitSet(Int32)
  nameWithType: BitVector.IsBitSet(Int32)
  fullName: SudokuSpice.RuleBased.BitVector.IsBitSet(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: IsBitSet
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 121
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nChecks if the bit is true at the given index.\n"
  example: []
  syntax:
    content: public bool IsBitSet(int bit)
    parameters:
    - id: bit
      type: System.Int32
      description: The zero-based index of the bit to check.
    return:
      type: System.Boolean
      description: True if set.
    content.vb: Public Function IsBitSet(bit As Integer) As Boolean
  overload: SudokuSpice.RuleBased.BitVector.IsBitSet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.BitVector.GetSetBits
  commentId: M:SudokuSpice.RuleBased.BitVector.GetSetBits
  id: GetSetBits
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: GetSetBits()
  nameWithType: BitVector.GetSetBits()
  fullName: SudokuSpice.RuleBased.BitVector.GetSetBits()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: GetSetBits
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 131
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGets a list of the bits set in this bit vector.\n"
  remarks: "\nThis operation is slightly more efficient on average when <xref href=\"System.Runtime.Intrinsics.X86.Popcnt\" data-throw-if-not-resolved=\"false\"></xref> is\nsupported. Worst case performance is roughly the same.\n"
  example: []
  syntax:
    content: public List<int> GetSetBits()
    return:
      type: System.Collections.Generic.List{System.Int32}
      description: A list of the bits that are set.
    content.vb: Public Function GetSetBits As List(Of Integer)
  overload: SudokuSpice.RuleBased.BitVector.GetSetBits*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.BitVector.PopulateSetBits(System.Span{System.Int32})
  commentId: M:SudokuSpice.RuleBased.BitVector.PopulateSetBits(System.Span{System.Int32})
  id: PopulateSetBits(System.Span{System.Int32})
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: PopulateSetBits(Span<Int32>)
  nameWithType: BitVector.PopulateSetBits(Span<Int32>)
  fullName: SudokuSpice.RuleBased.BitVector.PopulateSetBits(System.Span<System.Int32>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: PopulateSetBits
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 177
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nPopulates a provided Span with the indices of set bits, and returns the number of set \nbits it populated.\n\nThis method will return if it reaches the end of the provided\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">setIndices</code> span, so if <code data-dev-comment-type=\"paramref\" class=\"paramref\">setIndices</code> has size N,\nthen this will only populate the indices for the first N set bits, and will return N.\nIf there are less setBits than N, say M, the values of <code data-dev-comment-type=\"paramref\" class=\"paramref\">setIndices</code>\nfrom setIndices[M] to setIndices[N-1] are left unchanged.\n"
  remarks: "\nThis operation is slightly more efficient on average when <xref href=\"System.Runtime.Intrinsics.X86.Popcnt\" data-throw-if-not-resolved=\"false\"></xref> is\nsupported. Worst case performance is roughly the same.\n"
  example: []
  syntax:
    content: public int PopulateSetBits(Span<int> setIndices)
    parameters:
    - id: setIndices
      type: System.Span{System.Int32}
      description: "\nA span to fill with the indices of set bits. All values will be written to \n"
    return:
      type: System.Int32
      description: "\nThe number of set bits that have been populated into <code data-dev-comment-type=\"paramref\" class=\"paramref\">setIndices</code>\n"
    content.vb: Public Function PopulateSetBits(setIndices As Span(Of Integer)) As Integer
  overload: SudokuSpice.RuleBased.BitVector.PopulateSetBits*
  nameWithType.vb: BitVector.PopulateSetBits(Span(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.BitVector.PopulateSetBits(System.Span(Of System.Int32))
  name.vb: PopulateSetBits(Span(Of Int32))
- uid: SudokuSpice.RuleBased.BitVector.Equals(SudokuSpice.RuleBased.BitVector)
  commentId: M:SudokuSpice.RuleBased.BitVector.Equals(SudokuSpice.RuleBased.BitVector)
  id: Equals(SudokuSpice.RuleBased.BitVector)
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: Equals(BitVector)
  nameWithType: BitVector.Equals(BitVector)
  fullName: SudokuSpice.RuleBased.BitVector.Equals(SudokuSpice.RuleBased.BitVector)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: Equals
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 199
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public bool Equals(BitVector other)
    parameters:
    - id: other
      type: SudokuSpice.RuleBased.BitVector
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As BitVector) As Boolean
  overload: SudokuSpice.RuleBased.BitVector.Equals*
  implements:
  - System.IEquatable{SudokuSpice.RuleBased.BitVector}.Equals(SudokuSpice.RuleBased.BitVector)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.BitVector.Equals(System.Object)
  commentId: M:SudokuSpice.RuleBased.BitVector.Equals(System.Object)
  id: Equals(System.Object)
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: BitVector.Equals(Object)
  fullName: SudokuSpice.RuleBased.BitVector.Equals(System.Object)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: Equals
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 201
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: SudokuSpice.RuleBased.BitVector.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SudokuSpice.RuleBased.BitVector.GetHashCode
  commentId: M:SudokuSpice.RuleBased.BitVector.GetHashCode
  id: GetHashCode
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: BitVector.GetHashCode()
  fullName: SudokuSpice.RuleBased.BitVector.GetHashCode()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: GetHashCode
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 210
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: SudokuSpice.RuleBased.BitVector.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SudokuSpice.RuleBased.BitVector.ToString
  commentId: M:SudokuSpice.RuleBased.BitVector.ToString
  id: ToString
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BitVector.ToString()
  fullName: SudokuSpice.RuleBased.BitVector.ToString()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: ToString
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 215
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nReturns this bitvector as a binary-formatted string (eg. 1011).\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: SudokuSpice.RuleBased.BitVector.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SudokuSpice.RuleBased.BitVector.op_Equality(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  commentId: M:SudokuSpice.RuleBased.BitVector.op_Equality(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  id: op_Equality(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: Equality(BitVector, BitVector)
  nameWithType: BitVector.Equality(BitVector, BitVector)
  fullName: SudokuSpice.RuleBased.BitVector.Equality(SudokuSpice.RuleBased.BitVector, SudokuSpice.RuleBased.BitVector)
  type: Operator
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: op_Equality
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 217
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public static bool operator ==(BitVector a, BitVector b)
    parameters:
    - id: a
      type: SudokuSpice.RuleBased.BitVector
    - id: b
      type: SudokuSpice.RuleBased.BitVector
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(a As BitVector, b As BitVector) As Boolean
  overload: SudokuSpice.RuleBased.BitVector.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SudokuSpice.RuleBased.BitVector.op_Inequality(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  commentId: M:SudokuSpice.RuleBased.BitVector.op_Inequality(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  id: op_Inequality(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  parent: SudokuSpice.RuleBased.BitVector
  langs:
  - csharp
  - vb
  name: Inequality(BitVector, BitVector)
  nameWithType: BitVector.Inequality(BitVector, BitVector)
  fullName: SudokuSpice.RuleBased.BitVector.Inequality(SudokuSpice.RuleBased.BitVector, SudokuSpice.RuleBased.BitVector)
  type: Operator
  source:
    remote:
      path: SudokuSpice/RuleBased/BitVector.cs
      branch: init-or-not-init
      repo: https://github.com/MorganR/SudokuSpice
    id: op_Inequality
    path: ../SudokuSpice/RuleBased/BitVector.cs
    startLine: 218
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public static bool operator !=(BitVector a, BitVector b)
    parameters:
    - id: a
      type: SudokuSpice.RuleBased.BitVector
    - id: b
      type: SudokuSpice.RuleBased.BitVector
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(a As BitVector, b As BitVector) As Boolean
  overload: SudokuSpice.RuleBased.BitVector.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: System.IEquatable{SudokuSpice.RuleBased.BitVector}
  commentId: T:System.IEquatable{SudokuSpice.RuleBased.BitVector}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<BitVector>
  nameWithType: IEquatable<BitVector>
  fullName: System.IEquatable<SudokuSpice.RuleBased.BitVector>
  nameWithType.vb: IEquatable(Of BitVector)
  fullName.vb: System.IEquatable(Of SudokuSpice.RuleBased.BitVector)
  name.vb: IEquatable(Of BitVector)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.RuleBased.BitVector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.RuleBased.BitVector
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.RuleBased.BitVector.Data*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.Data
  name: Data
  nameWithType: BitVector.Data
  fullName: SudokuSpice.RuleBased.BitVector.Data
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Runtime.Intrinsics.X86.Popcnt
  commentId: T:System.Runtime.Intrinsics.X86.Popcnt
  isExternal: true
- uid: SudokuSpice.RuleBased.BitVector.Count*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.Count
  name: Count
  nameWithType: BitVector.Count
  fullName: SudokuSpice.RuleBased.BitVector.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.RuleBased.BitVector.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.#ctor
  name: BitVector
  nameWithType: BitVector.BitVector
  fullName: SudokuSpice.RuleBased.BitVector.BitVector
- uid: SudokuSpice.RuleBased.BitVector.CreateWithSize*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.CreateWithSize
  name: CreateWithSize
  nameWithType: BitVector.CreateWithSize
  fullName: SudokuSpice.RuleBased.BitVector.CreateWithSize
- uid: SudokuSpice.RuleBased.BitVector
  commentId: T:SudokuSpice.RuleBased.BitVector
  parent: SudokuSpice.RuleBased
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.RuleBased.BitVector
- uid: SudokuSpice.RuleBased.BitVector.FindIntersect*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.FindIntersect
  name: FindIntersect
  nameWithType: BitVector.FindIntersect
  fullName: SudokuSpice.RuleBased.BitVector.FindIntersect
- uid: SudokuSpice.RuleBased.BitVector.FindUnion*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.FindUnion
  name: FindUnion
  nameWithType: BitVector.FindUnion
  fullName: SudokuSpice.RuleBased.BitVector.FindUnion
- uid: SudokuSpice.RuleBased.BitVector.UnsetBit*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.UnsetBit
  name: UnsetBit
  nameWithType: BitVector.UnsetBit
  fullName: SudokuSpice.RuleBased.BitVector.UnsetBit
- uid: SudokuSpice.RuleBased.BitVector.SetBit*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.SetBit
  name: SetBit
  nameWithType: BitVector.SetBit
  fullName: SudokuSpice.RuleBased.BitVector.SetBit
- uid: SudokuSpice.RuleBased.BitVector.IsEmpty*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.IsEmpty
  name: IsEmpty
  nameWithType: BitVector.IsEmpty
  fullName: SudokuSpice.RuleBased.BitVector.IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased.BitVector.IsBitSet*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.IsBitSet
  name: IsBitSet
  nameWithType: BitVector.IsBitSet
  fullName: SudokuSpice.RuleBased.BitVector.IsBitSet
- uid: SudokuSpice.RuleBased.BitVector.GetSetBits*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.GetSetBits
  name: GetSetBits
  nameWithType: BitVector.GetSetBits
  fullName: SudokuSpice.RuleBased.BitVector.GetSetBits
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SudokuSpice.RuleBased.BitVector.PopulateSetBits*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.PopulateSetBits
  name: PopulateSetBits
  nameWithType: BitVector.PopulateSetBits
  fullName: SudokuSpice.RuleBased.BitVector.PopulateSetBits
- uid: System.Span{System.Int32}
  commentId: T:System.Span{System.Int32}
  parent: System
  definition: System.Span`1
  name: Span<Int32>
  nameWithType: Span<Int32>
  fullName: System.Span<System.Int32>
  nameWithType.vb: Span(Of Int32)
  fullName.vb: System.Span(Of System.Int32)
  name.vb: Span(Of Int32)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.BitVector.Equals*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.Equals
  name: Equals
  nameWithType: BitVector.Equals
  fullName: SudokuSpice.RuleBased.BitVector.Equals
- uid: System.IEquatable{SudokuSpice.RuleBased.BitVector}.Equals(SudokuSpice.RuleBased.BitVector)
  commentId: M:System.IEquatable{SudokuSpice.RuleBased.BitVector}.Equals(SudokuSpice.RuleBased.BitVector)
  parent: System.IEquatable{SudokuSpice.RuleBased.BitVector}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(BitVector)
  nameWithType: IEquatable<BitVector>.Equals(BitVector)
  fullName: System.IEquatable<SudokuSpice.RuleBased.BitVector>.Equals(SudokuSpice.RuleBased.BitVector)
  nameWithType.vb: IEquatable(Of BitVector).Equals(BitVector)
  fullName.vb: System.IEquatable(Of SudokuSpice.RuleBased.BitVector).Equals(SudokuSpice.RuleBased.BitVector)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<BitVector>.Equals
    fullName: System.IEquatable<SudokuSpice.RuleBased.BitVector>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.RuleBased.BitVector
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of BitVector).Equals
    fullName: System.IEquatable(Of SudokuSpice.RuleBased.BitVector).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.RuleBased.BitVector
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.BitVector.GetHashCode*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.GetHashCode
  name: GetHashCode
  nameWithType: BitVector.GetHashCode
  fullName: SudokuSpice.RuleBased.BitVector.GetHashCode
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.BitVector.ToString*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.ToString
  name: ToString
  nameWithType: BitVector.ToString
  fullName: SudokuSpice.RuleBased.BitVector.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SudokuSpice.RuleBased.BitVector.op_Equality*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.op_Equality
  name: Equality
  nameWithType: BitVector.Equality
  fullName: SudokuSpice.RuleBased.BitVector.Equality
- uid: SudokuSpice.RuleBased.BitVector.op_Inequality*
  commentId: Overload:SudokuSpice.RuleBased.BitVector.op_Inequality
  name: Inequality
  nameWithType: BitVector.Inequality
  fullName: SudokuSpice.RuleBased.BitVector.Inequality
