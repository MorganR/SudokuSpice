### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.PuzzleSolver
  commentId: T:SudokuSpice.RuleBased.PuzzleSolver
  id: PuzzleSolver
  parent: SudokuSpice.RuleBased
  children:
  - SudokuSpice.RuleBased.PuzzleSolver.#ctor(SudokuSpice.RuleBased.ISudokuRuleKeeper,SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)
  - SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(System.Nullable{System.Int32}[0:,0:],System.Nullable{CancellationToken})
  - SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(System.Nullable{System.Int32}[0:,0:],System.Nullable{CancellationToken})
  - SudokuSpice.RuleBased.PuzzleSolver.Solve(System.Nullable{System.Int32}[0:,0:])
  - SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly(System.Nullable{System.Int32}[0:,0:])
  - SudokuSpice.RuleBased.PuzzleSolver.TrySolve(System.Nullable{System.Int32}[0:,0:])
  - SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(System.Nullable{System.Int32}[0:,0:])
  langs:
  - csharp
  - vb
  name: PuzzleSolver
  nameWithType: PuzzleSolver
  fullName: SudokuSpice.RuleBased.PuzzleSolver
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: PuzzleSolver
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 10
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nSolves puzzles according to a set of rules and heuristics.\n"
  example: []
  syntax:
    content: 'public class PuzzleSolver : object'
    content.vb: >-
      Public Class PuzzleSolver
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.PuzzleSolver.#ctor(SudokuSpice.RuleBased.ISudokuRuleKeeper,SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.#ctor(SudokuSpice.RuleBased.ISudokuRuleKeeper,SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)
  id: '#ctor(SudokuSpice.RuleBased.ISudokuRuleKeeper,SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)'
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: PuzzleSolver(ISudokuRuleKeeper, ISudokuHeuristic)
  nameWithType: PuzzleSolver.PuzzleSolver(ISudokuRuleKeeper, ISudokuHeuristic)
  fullName: SudokuSpice.RuleBased.PuzzleSolver.PuzzleSolver(SudokuSpice.RuleBased.ISudokuRuleKeeper, SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 19
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nConstructs a solver based on the given rules and heuristics.\n"
  example: []
  syntax:
    content: public PuzzleSolver(ISudokuRuleKeeper ruleKeeper, ISudokuHeuristic heuristic = null)
    parameters:
    - id: ruleKeeper
      type: SudokuSpice.RuleBased.ISudokuRuleKeeper
      description: The rule keeper that will enforce the puzzle&apos;s rules.
    - id: heuristic
      type: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
      description: An optional heuristic to assist in solving the puzzle.
    content.vb: Public Sub New(ruleKeeper As ISudokuRuleKeeper, heuristic As ISudokuHeuristic = Nothing)
  overload: SudokuSpice.RuleBased.PuzzleSolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolve(System.Nullable{System.Int32}[0:,0:])
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.TrySolve(System.Nullable{System.Int32}[0:,0:])
  id: TrySolve(System.Nullable{System.Int32}[0:,0:])
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: TrySolve(Nullable<Int32>[,])
  nameWithType: PuzzleSolver.TrySolve(Nullable<Int32>[,])
  fullName: SudokuSpice.RuleBased.PuzzleSolver.TrySolve(System.Nullable<System.Int32>[,])
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TrySolve
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 34
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nAttempts to solve the given puzzle. Unlike <see cref=\"!:TrySolveRandomly(IPuzzle)\"></see>,\nwhen it has to guess, this will try values in guaranteed order.\n"
  example: []
  syntax:
    content: public bool TrySolve(int? [, ] puzzle)
    parameters:
    - id: puzzle
      type: System.Nullable{System.Int32}[,]
      description: The puzzle to solve. This will be solved in place.
    return:
      type: System.Boolean
    content.vb: Public Function TrySolve(puzzle As Integer?(,)) As Boolean
  overload: SudokuSpice.RuleBased.PuzzleSolver.TrySolve*
  nameWithType.vb: PuzzleSolver.TrySolve(Nullable(Of Int32)(,))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.TrySolve(System.Nullable(Of System.Int32)(,))
  name.vb: TrySolve(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(System.Nullable{System.Int32}[0:,0:])
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(System.Nullable{System.Int32}[0:,0:])
  id: TrySolveRandomly(System.Nullable{System.Int32}[0:,0:])
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: TrySolveRandomly(Nullable<Int32>[,])
  nameWithType: PuzzleSolver.TrySolveRandomly(Nullable<Int32>[,])
  fullName: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(System.Nullable<System.Int32>[,])
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TrySolveRandomly
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 47
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nAttempts to solve the given puzzle. Unlike <see cref=\"!:TrySolve(IPuzzle)\"></see>, this will\ntry values in a random order when it has to guess the value for a square.\n"
  example: []
  syntax:
    content: public bool TrySolveRandomly(int? [, ] puzzle)
    parameters:
    - id: puzzle
      type: System.Nullable{System.Int32}[,]
      description: The puzzle to solve. This will be solved in place.
    return:
      type: System.Boolean
    content.vb: Public Function TrySolveRandomly(puzzle As Integer?(,)) As Boolean
  overload: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly*
  nameWithType.vb: PuzzleSolver.TrySolveRandomly(Nullable(Of Int32)(,))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(System.Nullable(Of System.Int32)(,))
  name.vb: TrySolveRandomly(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleSolver.Solve(System.Nullable{System.Int32}[0:,0:])
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.Solve(System.Nullable{System.Int32}[0:,0:])
  id: Solve(System.Nullable{System.Int32}[0:,0:])
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: Solve(Nullable<Int32>[,])
  nameWithType: PuzzleSolver.Solve(Nullable<Int32>[,])
  fullName: SudokuSpice.RuleBased.PuzzleSolver.Solve(System.Nullable<System.Int32>[,])
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Solve
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 60
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nSolves the given puzzle in place. Unlike <see cref=\"!:SolveRandomly(IPuzzle)\"></see>,\nwhen it has to guess, this will try values in the order they are given.\n"
  example: []
  syntax:
    content: public void Solve(int? [, ] puzzle)
    parameters:
    - id: puzzle
      type: System.Nullable{System.Int32}[,]
      description: The puzzle to solve. This will be solved in place.
    content.vb: Public Sub Solve(puzzle As Integer?(,))
  overload: SudokuSpice.RuleBased.PuzzleSolver.Solve*
  nameWithType.vb: PuzzleSolver.Solve(Nullable(Of Int32)(,))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.Solve(System.Nullable(Of System.Int32)(,))
  name.vb: Solve(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly(System.Nullable{System.Int32}[0:,0:])
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly(System.Nullable{System.Int32}[0:,0:])
  id: SolveRandomly(System.Nullable{System.Int32}[0:,0:])
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: SolveRandomly(Nullable<Int32>[,])
  nameWithType: PuzzleSolver.SolveRandomly(Nullable<Int32>[,])
  fullName: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly(System.Nullable<System.Int32>[,])
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: SolveRandomly
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 76
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nSolves the given puzzle in place. Unlike <see cref=\"!:Solve(IPuzzle)\"></see>, this will\ntry values in a random order when it has to guess the value for a square.\n"
  example: []
  syntax:
    content: public void SolveRandomly(int? [, ] puzzle)
    parameters:
    - id: puzzle
      type: System.Nullable{System.Int32}[,]
      description: The puzzle to solve. This will be solved in place.
    content.vb: Public Sub SolveRandomly(puzzle As Integer?(,))
  overload: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly*
  nameWithType.vb: PuzzleSolver.SolveRandomly(Nullable(Of Int32)(,))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly(System.Nullable(Of System.Int32)(,))
  name.vb: SolveRandomly(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(System.Nullable{System.Int32}[0:,0:],System.Nullable{CancellationToken})
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(System.Nullable{System.Int32}[0:,0:],System.Nullable{CancellationToken})
  id: GetStatsForAllSolutions(System.Nullable{System.Int32}[0:,0:],System.Nullable{CancellationToken})
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: GetStatsForAllSolutions(Nullable<Int32>[,], Nullable<CancellationToken>)
  nameWithType: PuzzleSolver.GetStatsForAllSolutions(Nullable<Int32>[,], Nullable<CancellationToken>)
  fullName: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(System.Nullable<System.Int32>[,], System.Nullable<CancellationToken>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetStatsForAllSolutions
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 90
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nFinds stats for all the solutions to the given puzzle. The puzzle is left unchanged.\n"
  example: []
  syntax:
    content: public SolveStats GetStatsForAllSolutions(int? [, ] puzzle, CancellationToken? token = null)
    parameters:
    - id: puzzle
      type: System.Nullable{System.Int32}[,]
    - id: token
      type: System.Nullable{CancellationToken}
    return:
      type: SudokuSpice.SolveStats
    content.vb: Public Function GetStatsForAllSolutions(puzzle As Integer?(,), token As CancellationToken? = Nothing) As SolveStats
  overload: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions*
  nameWithType.vb: PuzzleSolver.GetStatsForAllSolutions(Nullable(Of Int32)(,), Nullable(Of CancellationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(System.Nullable(Of System.Int32)(,), System.Nullable(Of CancellationToken))
  name.vb: GetStatsForAllSolutions(Nullable(Of Int32)(,), Nullable(Of CancellationToken))
- uid: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(System.Nullable{System.Int32}[0:,0:],System.Nullable{CancellationToken})
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(System.Nullable{System.Int32}[0:,0:],System.Nullable{CancellationToken})
  id: HasUniqueSolution(System.Nullable{System.Int32}[0:,0:],System.Nullable{CancellationToken})
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: HasUniqueSolution(Nullable<Int32>[,], Nullable<CancellationToken>)
  nameWithType: PuzzleSolver.HasUniqueSolution(Nullable<Int32>[,], Nullable<CancellationToken>)
  fullName: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(System.Nullable<System.Int32>[,], System.Nullable<CancellationToken>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: HasUniqueSolution
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 101
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nDetermines if the given puzzle has a unique solution. The puzzle is left unchanged.\n"
  example: []
  syntax:
    content: public bool HasUniqueSolution(int? [, ] puzzle, CancellationToken? token = null)
    parameters:
    - id: puzzle
      type: System.Nullable{System.Int32}[,]
    - id: token
      type: System.Nullable{CancellationToken}
    return:
      type: System.Boolean
    content.vb: Public Function HasUniqueSolution(puzzle As Integer?(,), token As CancellationToken? = Nothing) As Boolean
  overload: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution*
  nameWithType.vb: PuzzleSolver.HasUniqueSolution(Nullable(Of Int32)(,), Nullable(Of CancellationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(System.Nullable(Of System.Int32)(,), System.Nullable(Of CancellationToken))
  name.vb: HasUniqueSolution(Nullable(Of Int32)(,), Nullable(Of CancellationToken))
references:
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.PuzzleSolver.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.#ctor
  name: PuzzleSolver
  nameWithType: PuzzleSolver.PuzzleSolver
  fullName: SudokuSpice.RuleBased.PuzzleSolver.PuzzleSolver
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper
  commentId: T:SudokuSpice.RuleBased.ISudokuRuleKeeper
  parent: SudokuSpice.RuleBased
  name: ISudokuRuleKeeper
  nameWithType: ISudokuRuleKeeper
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  name: ISudokuHeuristic
  nameWithType: ISudokuHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
- uid: SudokuSpice.RuleBased.Heuristics
  commentId: N:SudokuSpice.RuleBased.Heuristics
  name: SudokuSpice.RuleBased.Heuristics
  nameWithType: SudokuSpice.RuleBased.Heuristics
  fullName: SudokuSpice.RuleBased.Heuristics
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolve*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.TrySolve
  name: TrySolve
  nameWithType: PuzzleSolver.TrySolve
  fullName: SudokuSpice.RuleBased.PuzzleSolver.TrySolve
- uid: System.Nullable{System.Int32}[,]
  isExternal: true
  name: Nullable<Int32>[,]
  nameWithType: Nullable<Int32>[,]
  fullName: System.Nullable<System.Int32>[,]
  nameWithType.vb: Nullable(Of Int32)(,)
  fullName.vb: System.Nullable(Of System.Int32)(,)
  name.vb: Nullable(Of Int32)(,)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: (,)
    nameWithType: (,)
    fullName: (,)
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly
  name: TrySolveRandomly
  nameWithType: PuzzleSolver.TrySolveRandomly
  fullName: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly
- uid: SudokuSpice.RuleBased.PuzzleSolver.Solve*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.Solve
  name: Solve
  nameWithType: PuzzleSolver.Solve
  fullName: SudokuSpice.RuleBased.PuzzleSolver.Solve
- uid: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly
  name: SolveRandomly
  nameWithType: PuzzleSolver.SolveRandomly
  fullName: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly
- uid: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions
  name: GetStatsForAllSolutions
  nameWithType: PuzzleSolver.GetStatsForAllSolutions
  fullName: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions
- uid: System.Nullable{CancellationToken}
  commentId: '!:System.Nullable{CancellationToken}'
  definition: System.Nullable`1
  name: Nullable<CancellationToken>
  nameWithType: Nullable<CancellationToken>
  fullName: System.Nullable<CancellationToken>
  nameWithType.vb: Nullable(Of CancellationToken)
  fullName.vb: System.Nullable(Of CancellationToken)
  name.vb: Nullable(Of CancellationToken)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.SolveStats
  commentId: T:SudokuSpice.SolveStats
  parent: SudokuSpice
  name: SolveStats
  nameWithType: SolveStats
  fullName: SudokuSpice.SolveStats
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution
  name: HasUniqueSolution
  nameWithType: PuzzleSolver.HasUniqueSolution
  fullName: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution
