### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.PuzzleSolver
  commentId: T:SudokuSpice.RuleBased.PuzzleSolver
  id: PuzzleSolver
  parent: SudokuSpice.RuleBased
  children:
  - SudokuSpice.RuleBased.PuzzleSolver.#ctor(SudokuSpice.RuleBased.ISudokuRuleKeeper,SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)
  - SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(SudokuSpice.RuleBased.IPuzzle,System.Nullable{System.Threading.CancellationToken})
  - SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(SudokuSpice.RuleBased.IPuzzle,System.Nullable{System.Threading.CancellationToken})
  - SudokuSpice.RuleBased.PuzzleSolver.Solve``1(``0)
  - SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly``1(``0)
  - SudokuSpice.RuleBased.PuzzleSolver.TrySolve(SudokuSpice.RuleBased.IPuzzle)
  - SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(SudokuSpice.RuleBased.IPuzzle)
  langs:
  - csharp
  - vb
  name: PuzzleSolver
  nameWithType: PuzzleSolver
  fullName: SudokuSpice.RuleBased.PuzzleSolver
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice
    id: PuzzleSolver
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 10
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nSolves a single <xref href=\"SudokuSpice.RuleBased.IPuzzle\" data-throw-if-not-resolved=\"false\"></xref> using a <xref href=\"SudokuSpice.RuleBased.SquareTracker\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class PuzzleSolver
    content.vb: Public Class PuzzleSolver
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.PuzzleSolver.#ctor(SudokuSpice.RuleBased.ISudokuRuleKeeper,SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.#ctor(SudokuSpice.RuleBased.ISudokuRuleKeeper,SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)
  id: '#ctor(SudokuSpice.RuleBased.ISudokuRuleKeeper,SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)'
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: PuzzleSolver(ISudokuRuleKeeper, ISudokuHeuristic)
  nameWithType: PuzzleSolver.PuzzleSolver(ISudokuRuleKeeper, ISudokuHeuristic)
  fullName: SudokuSpice.RuleBased.PuzzleSolver.PuzzleSolver(SudokuSpice.RuleBased.ISudokuRuleKeeper, SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 18
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nConstructs a solver for the given square tracker.\n"
  example: []
  syntax:
    content: public PuzzleSolver(ISudokuRuleKeeper ruleKeeper, ISudokuHeuristic heuristic = null)
    parameters:
    - id: ruleKeeper
      type: SudokuSpice.RuleBased.ISudokuRuleKeeper
    - id: heuristic
      type: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
    content.vb: Public Sub New(ruleKeeper As ISudokuRuleKeeper, heuristic As ISudokuHeuristic = Nothing)
  overload: SudokuSpice.RuleBased.PuzzleSolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolve(SudokuSpice.RuleBased.IPuzzle)
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.TrySolve(SudokuSpice.RuleBased.IPuzzle)
  id: TrySolve(SudokuSpice.RuleBased.IPuzzle)
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: TrySolve(IPuzzle)
  nameWithType: PuzzleSolver.TrySolve(IPuzzle)
  fullName: SudokuSpice.RuleBased.PuzzleSolver.TrySolve(SudokuSpice.RuleBased.IPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice
    id: TrySolve
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 33
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nAttempts to solve the given puzzle. Unlike <xref href=\"SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(SudokuSpice.RuleBased.IPuzzle)\" data-throw-if-not-resolved=\"false\"></xref>,\nwhen it has to guess, this will try values in guaranteed order.\n"
  example: []
  syntax:
    content: public bool TrySolve(IPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IPuzzle
      description: The puzzle to solve. This will be solved in place.
    return:
      type: System.Boolean
    content.vb: Public Function TrySolve(puzzle As IPuzzle) As Boolean
  overload: SudokuSpice.RuleBased.PuzzleSolver.TrySolve*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(SudokuSpice.RuleBased.IPuzzle)
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(SudokuSpice.RuleBased.IPuzzle)
  id: TrySolveRandomly(SudokuSpice.RuleBased.IPuzzle)
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: TrySolveRandomly(IPuzzle)
  nameWithType: PuzzleSolver.TrySolveRandomly(IPuzzle)
  fullName: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(SudokuSpice.RuleBased.IPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice
    id: TrySolveRandomly
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 46
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nAttempts to solve the given puzzle. Unlike <xref href=\"SudokuSpice.RuleBased.PuzzleSolver.TrySolve(SudokuSpice.RuleBased.IPuzzle)\" data-throw-if-not-resolved=\"false\"></xref>, this will\ntry values in a random order when it has to guess the value for a square.\n"
  example: []
  syntax:
    content: public bool TrySolveRandomly(IPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IPuzzle
      description: The puzzle to solve. This will be solved in place.
    return:
      type: System.Boolean
    content.vb: Public Function TrySolveRandomly(puzzle As IPuzzle) As Boolean
  overload: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.PuzzleSolver.Solve``1(``0)
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.Solve``1(``0)
  id: Solve``1(``0)
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: Solve<TPuzzle>(TPuzzle)
  nameWithType: PuzzleSolver.Solve<TPuzzle>(TPuzzle)
  fullName: SudokuSpice.RuleBased.PuzzleSolver.Solve<TPuzzle>(TPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice
    id: Solve
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 61
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nSolves the given puzzle in place. Unlike <see cref=\"!:SolveRandomly(IPuzzle)\"></see>,\nwhen it has to guess, this will try values in the order they are given.\n"
  example: []
  syntax:
    content: >-
      public TPuzzle Solve<TPuzzle>(TPuzzle puzzle)
          where TPuzzle : IPuzzle
    parameters:
    - id: puzzle
      type: '{TPuzzle}'
      description: The puzzle to solve. This will be copied instead of solved in-place.
    typeParameters:
    - id: TPuzzle
    return:
      type: '{TPuzzle}'
      description: A solved copy of the given puzzle.
    content.vb: Public Function Solve(Of TPuzzle As IPuzzle)(puzzle As TPuzzle) As TPuzzle
  overload: SudokuSpice.RuleBased.PuzzleSolver.Solve*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThrown if this puzzle can&apos;t be solved within the bounds of this solver&apos;s rules.\n"
  nameWithType.vb: PuzzleSolver.Solve(Of TPuzzle)(TPuzzle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.Solve(Of TPuzzle)(TPuzzle)
  name.vb: Solve(Of TPuzzle)(TPuzzle)
- uid: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly``1(``0)
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly``1(``0)
  id: SolveRandomly``1(``0)
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: SolveRandomly<TPuzzle>(TPuzzle)
  nameWithType: PuzzleSolver.SolveRandomly<TPuzzle>(TPuzzle)
  fullName: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly<TPuzzle>(TPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice
    id: SolveRandomly
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 80
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nSolves the given puzzle in place. Unlike <see cref=\"!:Solve(IPuzzle)\"></see>, this will\ntry values in a random order when it has to guess the value for a square.\n"
  example: []
  syntax:
    content: >-
      public TPuzzle SolveRandomly<TPuzzle>(TPuzzle puzzle)
          where TPuzzle : IPuzzle
    parameters:
    - id: puzzle
      type: '{TPuzzle}'
      description: The puzzle to solve. This will be copied instead of solved in-place.
    typeParameters:
    - id: TPuzzle
    return:
      type: '{TPuzzle}'
      description: A solved copy of the given puzzle.
    content.vb: Public Function SolveRandomly(Of TPuzzle As IPuzzle)(puzzle As TPuzzle) As TPuzzle
  overload: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThrown if this puzzle can&apos;t be solved within the bounds of this solver&apos;s rules.\n"
  nameWithType.vb: PuzzleSolver.SolveRandomly(Of TPuzzle)(TPuzzle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly(Of TPuzzle)(TPuzzle)
  name.vb: SolveRandomly(Of TPuzzle)(TPuzzle)
- uid: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(SudokuSpice.RuleBased.IPuzzle,System.Nullable{System.Threading.CancellationToken})
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(SudokuSpice.RuleBased.IPuzzle,System.Nullable{System.Threading.CancellationToken})
  id: GetStatsForAllSolutions(SudokuSpice.RuleBased.IPuzzle,System.Nullable{System.Threading.CancellationToken})
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: GetStatsForAllSolutions(IPuzzle, Nullable<CancellationToken>)
  nameWithType: PuzzleSolver.GetStatsForAllSolutions(IPuzzle, Nullable<CancellationToken>)
  fullName: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(SudokuSpice.RuleBased.IPuzzle, System.Nullable<System.Threading.CancellationToken>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice
    id: GetStatsForAllSolutions
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 96
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nFinds stats for all the solutions to the given puzzle. The puzzle is left unchanged.\n"
  example: []
  syntax:
    content: public SolveStats GetStatsForAllSolutions(IPuzzle puzzle, CancellationToken? token = default(CancellationToken? ))
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IPuzzle
    - id: token
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: SudokuSpice.SolveStats
    content.vb: Public Function GetStatsForAllSolutions(puzzle As IPuzzle, token As CancellationToken? = Nothing) As SolveStats
  overload: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\nMay be thrown if the given cancellation token is canceled during the operation.\n"
  nameWithType.vb: PuzzleSolver.GetStatsForAllSolutions(IPuzzle, Nullable(Of CancellationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(SudokuSpice.RuleBased.IPuzzle, System.Nullable(Of System.Threading.CancellationToken))
  name.vb: GetStatsForAllSolutions(IPuzzle, Nullable(Of CancellationToken))
- uid: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(SudokuSpice.RuleBased.IPuzzle,System.Nullable{System.Threading.CancellationToken})
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(SudokuSpice.RuleBased.IPuzzle,System.Nullable{System.Threading.CancellationToken})
  id: HasUniqueSolution(SudokuSpice.RuleBased.IPuzzle,System.Nullable{System.Threading.CancellationToken})
  parent: SudokuSpice.RuleBased.PuzzleSolver
  langs:
  - csharp
  - vb
  name: HasUniqueSolution(IPuzzle, Nullable<CancellationToken>)
  nameWithType: PuzzleSolver.HasUniqueSolution(IPuzzle, Nullable<CancellationToken>)
  fullName: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(SudokuSpice.RuleBased.IPuzzle, System.Nullable<System.Threading.CancellationToken>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/PuzzleSolver.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice
    id: HasUniqueSolution
    path: ../SudokuSpice/RuleBased/PuzzleSolver.cs
    startLine: 107
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nDetermines if the given puzzle has a unique solution. The puzzle is left unchanged.\n"
  example: []
  syntax:
    content: public bool HasUniqueSolution(IPuzzle puzzle, CancellationToken? token = default(CancellationToken? ))
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IPuzzle
    - id: token
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Boolean
    content.vb: Public Function HasUniqueSolution(puzzle As IPuzzle, token As CancellationToken? = Nothing) As Boolean
  overload: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\nMay be thrown if the given cancellation token is canceled during the operation.\n"
  nameWithType.vb: PuzzleSolver.HasUniqueSolution(IPuzzle, Nullable(Of CancellationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(SudokuSpice.RuleBased.IPuzzle, System.Nullable(Of System.Threading.CancellationToken))
  name.vb: HasUniqueSolution(IPuzzle, Nullable(Of CancellationToken))
references:
- uid: SudokuSpice.RuleBased.IPuzzle
  commentId: T:SudokuSpice.RuleBased.IPuzzle
  parent: SudokuSpice.RuleBased
  name: IPuzzle
  nameWithType: IPuzzle
  fullName: SudokuSpice.RuleBased.IPuzzle
- uid: SudokuSpice.RuleBased.SquareTracker
  commentId: T:SudokuSpice.RuleBased.SquareTracker
  isExternal: true
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.RuleBased.PuzzleSolver.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.#ctor
  name: PuzzleSolver
  nameWithType: PuzzleSolver.PuzzleSolver
  fullName: SudokuSpice.RuleBased.PuzzleSolver.PuzzleSolver
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper
  commentId: T:SudokuSpice.RuleBased.ISudokuRuleKeeper
  parent: SudokuSpice.RuleBased
  name: ISudokuRuleKeeper
  nameWithType: ISudokuRuleKeeper
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  name: ISudokuHeuristic
  nameWithType: ISudokuHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
- uid: SudokuSpice.RuleBased.Heuristics
  commentId: N:SudokuSpice.RuleBased.Heuristics
  name: SudokuSpice.RuleBased.Heuristics
  nameWithType: SudokuSpice.RuleBased.Heuristics
  fullName: SudokuSpice.RuleBased.Heuristics
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(SudokuSpice.RuleBased.IPuzzle)
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(SudokuSpice.RuleBased.IPuzzle)
  isExternal: true
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolve*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.TrySolve
  name: TrySolve
  nameWithType: PuzzleSolver.TrySolve
  fullName: SudokuSpice.RuleBased.PuzzleSolver.TrySolve
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolve(SudokuSpice.RuleBased.IPuzzle)
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.TrySolve(SudokuSpice.RuleBased.IPuzzle)
  isExternal: true
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly
  name: TrySolveRandomly
  nameWithType: PuzzleSolver.TrySolveRandomly
  fullName: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: SudokuSpice.RuleBased.PuzzleSolver.Solve*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.Solve
  name: Solve
  nameWithType: PuzzleSolver.Solve
  fullName: SudokuSpice.RuleBased.PuzzleSolver.Solve
- uid: '{TPuzzle}'
  commentId: '!:TPuzzle'
  definition: TPuzzle
  name: TPuzzle
  nameWithType: TPuzzle
  fullName: TPuzzle
- uid: TPuzzle
  name: TPuzzle
  nameWithType: TPuzzle
  fullName: TPuzzle
- uid: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly
  name: SolveRandomly
  nameWithType: PuzzleSolver.SolveRandomly
  fullName: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
  isExternal: true
- uid: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions
  name: GetStatsForAllSolutions
  nameWithType: PuzzleSolver.GetStatsForAllSolutions
  fullName: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions
- uid: System.Nullable{System.Threading.CancellationToken}
  commentId: T:System.Nullable{System.Threading.CancellationToken}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CancellationToken>
  nameWithType: Nullable<CancellationToken>
  fullName: System.Nullable<System.Threading.CancellationToken>
  nameWithType.vb: Nullable(Of CancellationToken)
  fullName.vb: System.Nullable(Of System.Threading.CancellationToken)
  name.vb: Nullable(Of CancellationToken)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.SolveStats
  commentId: T:SudokuSpice.SolveStats
  parent: SudokuSpice
  name: SolveStats
  nameWithType: SolveStats
  fullName: SudokuSpice.SolveStats
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution*
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution
  name: HasUniqueSolution
  nameWithType: PuzzleSolver.HasUniqueSolution
  fullName: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution
