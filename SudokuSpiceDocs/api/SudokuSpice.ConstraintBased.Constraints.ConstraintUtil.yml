### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  commentId: T:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  id: ConstraintUtil
  parent: SudokuSpice.ConstraintBased.Constraints
  children:
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,ReadOnlySpan{SudokuSpice.Coordinate},Span{System.Boolean})
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  langs:
  - csharp
  - vb
  name: ConstraintUtil
  nameWithType: ConstraintUtil
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ConstraintUtil
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 7
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nProvides utilities for easily implementing constraints.\n"
  example: []
  syntax:
    content: 'public static class ConstraintUtil : object'
    content.vb: >-
      Public Module ConstraintUtil
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  id: ImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: ImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan<Coordinate>, ExactCoverMatrix)
  nameWithType: ConstraintUtil.ImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan<Coordinate>, ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle, ReadOnlySpan<SudokuSpice.Coordinate>, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ImplementUniquenessConstraintForSquares
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 25
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nEnforces uniqueness of the values at the given coordinates.\n"
  remarks: "\nThis drops any <xref href=\"SudokuSpice.ConstraintBased.PossibleValue\" data-throw-if-not-resolved=\"false\"></xref>s that are no longer possible, and\nadds <xref href=\"SudokuSpice.ConstraintBased.ConstraintHeader\" data-throw-if-not-resolved=\"false\"></xref>s and links to enforce this constraint for the ones\nthat are still possible.\n"
  example: []
  syntax:
    content: public static void ImplementUniquenessConstraintForSquares(IReadOnlyPuzzle puzzle, ReadOnlySpan<Coordinate> squareCoordinates, ExactCoverMatrix matrix)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: The puzzle being solved.
    - id: squareCoordinates
      type: ReadOnlySpan{SudokuSpice.Coordinate}
      description: "\nThe coordinates that must contain unique values.\n"
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: The exact cover matrix for the current puzzle.
    content.vb: Public Shared Sub ImplementUniquenessConstraintForSquares(puzzle As IReadOnlyPuzzle, squareCoordinates As ReadOnlySpan(Of Coordinate), matrix As ExactCoverMatrix)
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares*
  nameWithType.vb: ConstraintUtil.ImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan(Of Coordinate), ExactCoverMatrix)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle, ReadOnlySpan(Of SudokuSpice.Coordinate), SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name.vb: ImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan(Of Coordinate), ExactCoverMatrix)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,ReadOnlySpan{SudokuSpice.Coordinate},Span{System.Boolean})
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,ReadOnlySpan{SudokuSpice.Coordinate},Span{System.Boolean})
  id: CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,ReadOnlySpan{SudokuSpice.Coordinate},Span{System.Boolean})
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan<Coordinate>, Span<Boolean>)
  nameWithType: ConstraintUtil.CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan<Coordinate>, Span<Boolean>)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix, ReadOnlySpan<SudokuSpice.Coordinate>, Span<System.Boolean>)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CheckForSetValues
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 60
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nFills the <code data-dev-comment-type=\"paramref\" class=\"paramref\">isValueIndexPresentInSquares</code> span according to which\nvalue indices are already set in the given list of\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">squareCoordinates</code>. Each index is true if that value is already set.\n"
  example: []
  syntax:
    content: public static void CheckForSetValues(IReadOnlyPuzzle puzzle, ExactCoverMatrix matrix, ReadOnlySpan<Coordinate> squareCoordinates, Span<bool> isValueIndexPresentInSquares)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: The current puzzle being solved.
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: The matrix for the puzzle being solved.
    - id: squareCoordinates
      type: ReadOnlySpan{SudokuSpice.Coordinate}
      description: The coordinates to check.
    - id: isValueIndexPresentInSquares
      type: Span{System.Boolean}
      description: "\nAn array that will be updated to indicate which values are set.\n"
    content.vb: Public Shared Sub CheckForSetValues(puzzle As IReadOnlyPuzzle, matrix As ExactCoverMatrix, squareCoordinates As ReadOnlySpan(Of Coordinate), isValueIndexPresentInSquares As Span(Of Boolean))
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues*
  nameWithType.vb: ConstraintUtil.CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan(Of Coordinate), Span(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix, ReadOnlySpan(Of SudokuSpice.Coordinate), Span(Of System.Boolean))
  name.vb: CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan(Of Coordinate), Span(Of Boolean))
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  id: DropPossibleSquaresForValueIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: DropPossibleSquaresForValueIndex(ReadOnlySpan<Square>, Int32, ExactCoverMatrix)
  nameWithType: ConstraintUtil.DropPossibleSquaresForValueIndex(ReadOnlySpan<Square>, Int32, ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex(ReadOnlySpan<SudokuSpice.ConstraintBased.Square>, System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: DropPossibleSquaresForValueIndex
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 90
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nDrops <xref href=\"SudokuSpice.ConstraintBased.PossibleValue\" data-throw-if-not-resolved=\"false\"></xref>s with the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">valueIndex</code>\nfrom the given set of <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code>. Null squares and possible values are\nignored.\n"
  example: []
  syntax:
    content: public static void DropPossibleSquaresForValueIndex(ReadOnlySpan<Square> squares, int valueIndex, ExactCoverMatrix matrix)
    parameters:
    - id: squares
      type: ReadOnlySpan{SudokuSpice.ConstraintBased.Square}
      description: The squares to drop, if not null.
    - id: valueIndex
      type: System.Int32
      description: "\nThe value index of the possible values within the squares.\n"
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: The matrix for the puzzle currently being solved.
    content.vb: Public Shared Sub DropPossibleSquaresForValueIndex(squares As ReadOnlySpan(Of Square), valueIndex As Integer, matrix As ExactCoverMatrix)
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex*
  nameWithType.vb: ConstraintUtil.DropPossibleSquaresForValueIndex(ReadOnlySpan(Of Square), Int32, ExactCoverMatrix)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex(ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square), System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name.vb: DropPossibleSquaresForValueIndex(ReadOnlySpan(Of Square), Int32, ExactCoverMatrix)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  id: AddConstraintHeadersForValueIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: AddConstraintHeadersForValueIndex(ReadOnlySpan<Square>, Int32, ExactCoverMatrix)
  nameWithType: ConstraintUtil.AddConstraintHeadersForValueIndex(ReadOnlySpan<Square>, Int32, ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex(ReadOnlySpan<SudokuSpice.ConstraintBased.Square>, System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: AddConstraintHeadersForValueIndex
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 124
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nAdd a <xref href=\"SudokuSpice.ConstraintBased.ConstraintHeader\" data-throw-if-not-resolved=\"false\"></xref> connecting all the\n<xref href=\"SudokuSpice.ConstraintBased.PossibleValue\" data-throw-if-not-resolved=\"false\"></xref>s at the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">valueIndex</code> on the\ngiven <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code>. Skips null squares, null possible values, and any\npossible values in a known state (i.e. dropped or selected).\n"
  example: []
  syntax:
    content: public static void AddConstraintHeadersForValueIndex(ReadOnlySpan<Square> squares, int valueIndex, ExactCoverMatrix matrix)
    parameters:
    - id: squares
      type: ReadOnlySpan{SudokuSpice.ConstraintBased.Square}
      description: The squares to add possible square values from.
    - id: valueIndex
      type: System.Int32
      description: "\nThe value index of the possible value within the squares.\n"
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: The matrix for the current puzzle being solved.
    content.vb: Public Shared Sub AddConstraintHeadersForValueIndex(squares As ReadOnlySpan(Of Square), valueIndex As Integer, matrix As ExactCoverMatrix)
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex*
  nameWithType.vb: ConstraintUtil.AddConstraintHeadersForValueIndex(ReadOnlySpan(Of Square), Int32, ExactCoverMatrix)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex(ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square), System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name.vb: AddConstraintHeadersForValueIndex(ReadOnlySpan(Of Square), Int32, ExactCoverMatrix)
references:
- uid: SudokuSpice.ConstraintBased.Constraints
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
- uid: SudokuSpice.ConstraintBased.PossibleValue
  commentId: T:SudokuSpice.ConstraintBased.PossibleValue
  parent: SudokuSpice.ConstraintBased
  name: PossibleValue
  nameWithType: PossibleValue
  fullName: SudokuSpice.ConstraintBased.PossibleValue
- uid: SudokuSpice.ConstraintBased.ConstraintHeader
  commentId: T:SudokuSpice.ConstraintBased.ConstraintHeader
  parent: SudokuSpice.ConstraintBased
  name: ConstraintHeader
  nameWithType: ConstraintHeader
  fullName: SudokuSpice.ConstraintBased.ConstraintHeader
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares
  name: ImplementUniquenessConstraintForSquares
  nameWithType: ConstraintUtil.ImplementUniquenessConstraintForSquares
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: ReadOnlySpan{SudokuSpice.Coordinate}
  commentId: '!:ReadOnlySpan{SudokuSpice.Coordinate}'
  definition: ReadOnlySpan`1
  name: ReadOnlySpan<Coordinate>
  nameWithType: ReadOnlySpan<Coordinate>
  fullName: ReadOnlySpan<SudokuSpice.Coordinate>
  nameWithType.vb: ReadOnlySpan(Of Coordinate)
  fullName.vb: ReadOnlySpan(Of SudokuSpice.Coordinate)
  name.vb: ReadOnlySpan(Of Coordinate)
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix
  parent: SudokuSpice.ConstraintBased
  name: ExactCoverMatrix
  nameWithType: ExactCoverMatrix
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<>
  nameWithType: ReadOnlySpan<>
  fullName: ReadOnlySpan<>
  nameWithType.vb: ReadOnlySpan(Of )
  fullName.vb: ReadOnlySpan(Of )
  name.vb: ReadOnlySpan(Of )
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues
  name: CheckForSetValues
  nameWithType: ConstraintUtil.CheckForSetValues
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues
- uid: Span{System.Boolean}
  commentId: '!:Span{System.Boolean}'
  definition: Span`1
  name: Span<Boolean>
  nameWithType: Span<Boolean>
  fullName: Span<System.Boolean>
  nameWithType.vb: Span(Of Boolean)
  fullName.vb: Span(Of System.Boolean)
  name.vb: Span(Of Boolean)
  spec.csharp:
  - uid: Span`1
    name: Span
    nameWithType: Span
    fullName: Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Span`1
    name: Span
    nameWithType: Span
    fullName: Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Span`1
  isExternal: true
  name: Span<>
  nameWithType: Span<>
  fullName: Span<>
  nameWithType.vb: Span(Of )
  fullName.vb: Span(Of )
  name.vb: Span(Of )
  spec.csharp:
  - uid: Span`1
    name: Span
    nameWithType: Span
    fullName: Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Span`1
    name: Span
    nameWithType: Span
    fullName: Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex
  name: DropPossibleSquaresForValueIndex
  nameWithType: ConstraintUtil.DropPossibleSquaresForValueIndex
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex
- uid: ReadOnlySpan{SudokuSpice.ConstraintBased.Square}
  commentId: '!:ReadOnlySpan{SudokuSpice.ConstraintBased.Square}'
  definition: ReadOnlySpan`1
  name: ReadOnlySpan<Square>
  nameWithType: ReadOnlySpan<Square>
  fullName: ReadOnlySpan<SudokuSpice.ConstraintBased.Square>
  nameWithType.vb: ReadOnlySpan(Of Square)
  fullName.vb: ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square)
  name.vb: ReadOnlySpan(Of Square)
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.Square
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.Square
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex
  name: AddConstraintHeadersForValueIndex
  nameWithType: ConstraintUtil.AddConstraintHeadersForValueIndex
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex
