### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  commentId: T:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  id: ConstraintUtil
  parent: SudokuSpice.ConstraintBased.Constraints
  children:
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddRequirementsForValueIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibleSquaresForValueIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32)
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  langs:
  - csharp
  - vb
  name: ConstraintUtil
  nameWithType: ConstraintUtil
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: ConstraintUtil
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 7
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nProvides utilities for easily implementing constraints.\n"
  example: []
  syntax:
    content: public static class ConstraintUtil
    content.vb: Public Module ConstraintUtil
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  id: TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan<Coordinate>, ExactCoverMatrix)
  nameWithType: ConstraintUtil.TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan<Coordinate>, ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle, System.ReadOnlySpan<SudokuSpice.Coordinate>, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: TryImplementUniquenessConstraintForSquares
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 25
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nEnforces uniqueness of the values at the given coordinates.\n"
  remarks: "\nThis drops any <xref href=\"SudokuSpice.ConstraintBased.PossibleSquareValue\" data-throw-if-not-resolved=\"false\"></xref>s that are no longer possible, and\nadds <xref href=\"SudokuSpice.ConstraintBased.Requirement\" data-throw-if-not-resolved=\"false\"></xref>s and links to enforce this constraint for the ones\nthat are still possible.\n"
  example: []
  syntax:
    content: public static bool TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle puzzle, ReadOnlySpan<Coordinate> squareCoordinates, ExactCoverMatrix matrix)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: The puzzle being solved.
    - id: squareCoordinates
      type: System.ReadOnlySpan{SudokuSpice.Coordinate}
      description: "\nThe coordinates that must contain unique values.\n"
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: The exact cover matrix for the current puzzle.
    return:
      type: System.Boolean
      description: "\nFalse if the puzzle violates uniquness for the given coordinates, else true.\n"
    content.vb: Public Shared Function TryImplementUniquenessConstraintForSquares(puzzle As IReadOnlyPuzzle, squareCoordinates As ReadOnlySpan(Of Coordinate), matrix As ExactCoverMatrix) As Boolean
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares*
  nameWithType.vb: ConstraintUtil.TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan(Of Coordinate), ExactCoverMatrix)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle, System.ReadOnlySpan(Of SudokuSpice.Coordinate), SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name.vb: TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan(Of Coordinate), ExactCoverMatrix)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  id: CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan<Coordinate>, Span<Boolean>)
  nameWithType: ConstraintUtil.CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan<Coordinate>, Span<Boolean>)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix, System.ReadOnlySpan<SudokuSpice.Coordinate>, System.Span<System.Boolean>)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: CheckForSetValues
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 67
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nFills the <code data-dev-comment-type=\"paramref\" class=\"paramref\">isValueIndexPresentInSquares</code> span according to which\nvalue indices are already set in the given list of\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">squareCoordinates</code>. Each index is true if that value is already set.\n"
  example: []
  syntax:
    content: public static void CheckForSetValues(IReadOnlyPuzzle puzzle, ExactCoverMatrix matrix, ReadOnlySpan<Coordinate> squareCoordinates, Span<bool> isValueIndexPresentInSquares)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: The current puzzle being solved.
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: The matrix for the puzzle being solved.
    - id: squareCoordinates
      type: System.ReadOnlySpan{SudokuSpice.Coordinate}
      description: The coordinates to check.
    - id: isValueIndexPresentInSquares
      type: System.Span{System.Boolean}
      description: "\nAn array that will be updated to indicate which values are set.\n"
    content.vb: Public Shared Sub CheckForSetValues(puzzle As IReadOnlyPuzzle, matrix As ExactCoverMatrix, squareCoordinates As ReadOnlySpan(Of Coordinate), isValueIndexPresentInSquares As Span(Of Boolean))
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues*
  nameWithType.vb: ConstraintUtil.CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan(Of Coordinate), Span(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix, System.ReadOnlySpan(Of SudokuSpice.Coordinate), System.Span(Of System.Boolean))
  name.vb: CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan(Of Coordinate), Span(Of Boolean))
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibleSquaresForValueIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibleSquaresForValueIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32)
  id: TryDropPossibleSquaresForValueIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32)
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: TryDropPossibleSquaresForValueIndex(ReadOnlySpan<Square>, Int32)
  nameWithType: ConstraintUtil.TryDropPossibleSquaresForValueIndex(ReadOnlySpan<Square>, Int32)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibleSquaresForValueIndex(System.ReadOnlySpan<SudokuSpice.ConstraintBased.Square>, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: TryDropPossibleSquaresForValueIndex
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 98
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nDrops <xref href=\"SudokuSpice.ConstraintBased.PossibleSquareValue\" data-throw-if-not-resolved=\"false\"></xref>s with the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">valueIndex</code>\nfrom the given set of <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code>. Null squares and possible values are\nignored.\n"
  example: []
  syntax:
    content: public static bool TryDropPossibleSquaresForValueIndex(ReadOnlySpan<Square> squares, int valueIndex)
    parameters:
    - id: squares
      type: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square}
      description: The squares to drop, if not null.
    - id: valueIndex
      type: System.Int32
      description: "\nThe value index of the possible values within the squares.\n"
    return:
      type: System.Boolean
      description: "\nTrue if all the <xref href=\"SudokuSpice.ConstraintBased.PossibleSquareValue\" data-throw-if-not-resolved=\"false\"></xref>s were dropped safely (eg. without\nresulting in an empty <xref href=\"SudokuSpice.ConstraintBased.Requirement\" data-throw-if-not-resolved=\"false\"></xref> without any possible square\nvalues, or a <xref href=\"SudokuSpice.ConstraintBased.Square\" data-throw-if-not-resolved=\"false\"></xref> with no more possible values), else false.\n"
    content.vb: Public Shared Function TryDropPossibleSquaresForValueIndex(squares As ReadOnlySpan(Of Square), valueIndex As Integer) As Boolean
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibleSquaresForValueIndex*
  nameWithType.vb: ConstraintUtil.TryDropPossibleSquaresForValueIndex(ReadOnlySpan(Of Square), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibleSquaresForValueIndex(System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square), System.Int32)
  name.vb: TryDropPossibleSquaresForValueIndex(ReadOnlySpan(Of Square), Int32)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddRequirementsForValueIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddRequirementsForValueIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  id: TryAddRequirementsForValueIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: TryAddRequirementsForValueIndex(ReadOnlySpan<Square>, Int32, ExactCoverMatrix)
  nameWithType: ConstraintUtil.TryAddRequirementsForValueIndex(ReadOnlySpan<Square>, Int32, ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddRequirementsForValueIndex(System.ReadOnlySpan<SudokuSpice.ConstraintBased.Square>, System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: TryAddRequirementsForValueIndex
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 139
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nAdd a <xref href=\"SudokuSpice.ConstraintBased.Requirement\" data-throw-if-not-resolved=\"false\"></xref> connecting all the\n<xref href=\"SudokuSpice.ConstraintBased.PossibleSquareValue\" data-throw-if-not-resolved=\"false\"></xref>s at the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">valueIndex</code> on the\ngiven <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code>. Skips null squares, null possible values, and any\npossible values in a known state (i.e. dropped or selected).\n"
  example: []
  syntax:
    content: public static bool TryAddRequirementsForValueIndex(ReadOnlySpan<Square> squares, int valueIndex, ExactCoverMatrix matrix)
    parameters:
    - id: squares
      type: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square}
      description: "\nThe squares to add <xref href=\"SudokuSpice.ConstraintBased.PossibleSquareValue\" data-throw-if-not-resolved=\"false\"></xref>s from.\n"
    - id: valueIndex
      type: System.Int32
      description: "\nThe value index of the possible value within the squares.\n"
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: The matrix for the current puzzle being solved.
    return:
      type: System.Boolean
      description: "\nFalse if the requirement could not be added, for example because none of the\ncorresponding <xref href=\"SudokuSpice.ConstraintBased.PossibleSquareValue\" data-throw-if-not-resolved=\"false\"></xref>s were still possible and the\nrequirement would have been empty. Else returns true.\n"
    content.vb: Public Shared Function TryAddRequirementsForValueIndex(squares As ReadOnlySpan(Of Square), valueIndex As Integer, matrix As ExactCoverMatrix) As Boolean
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddRequirementsForValueIndex*
  nameWithType.vb: ConstraintUtil.TryAddRequirementsForValueIndex(ReadOnlySpan(Of Square), Int32, ExactCoverMatrix)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddRequirementsForValueIndex(System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square), System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name.vb: TryAddRequirementsForValueIndex(ReadOnlySpan(Of Square), Int32, ExactCoverMatrix)
references:
- uid: SudokuSpice.ConstraintBased.Constraints
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.ConstraintBased.PossibleSquareValue
  commentId: T:SudokuSpice.ConstraintBased.PossibleSquareValue
  parent: SudokuSpice.ConstraintBased
  name: PossibleSquareValue
  nameWithType: PossibleSquareValue
  fullName: SudokuSpice.ConstraintBased.PossibleSquareValue
- uid: SudokuSpice.ConstraintBased.Requirement
  commentId: T:SudokuSpice.ConstraintBased.Requirement
  parent: SudokuSpice.ConstraintBased
  name: Requirement
  nameWithType: Requirement
  fullName: SudokuSpice.ConstraintBased.Requirement
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares
  name: TryImplementUniquenessConstraintForSquares
  nameWithType: ConstraintUtil.TryImplementUniquenessConstraintForSquares
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: System.ReadOnlySpan{SudokuSpice.Coordinate}
  commentId: T:System.ReadOnlySpan{SudokuSpice.Coordinate}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Coordinate>
  nameWithType: ReadOnlySpan<Coordinate>
  fullName: System.ReadOnlySpan<SudokuSpice.Coordinate>
  nameWithType.vb: ReadOnlySpan(Of Coordinate)
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.Coordinate)
  name.vb: ReadOnlySpan(Of Coordinate)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix
  parent: SudokuSpice.ConstraintBased
  name: ExactCoverMatrix
  nameWithType: ExactCoverMatrix
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues
  name: CheckForSetValues
  nameWithType: ConstraintUtil.CheckForSetValues
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues
- uid: System.Span{System.Boolean}
  commentId: T:System.Span{System.Boolean}
  parent: System
  definition: System.Span`1
  name: Span<Boolean>
  nameWithType: Span<Boolean>
  fullName: System.Span<System.Boolean>
  nameWithType.vb: Span(Of Boolean)
  fullName.vb: System.Span(Of System.Boolean)
  name.vb: Span(Of Boolean)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.Square
  commentId: T:SudokuSpice.ConstraintBased.Square
  parent: SudokuSpice.ConstraintBased
  name: Square
  nameWithType: Square
  fullName: SudokuSpice.ConstraintBased.Square
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibleSquaresForValueIndex*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibleSquaresForValueIndex
  name: TryDropPossibleSquaresForValueIndex
  nameWithType: ConstraintUtil.TryDropPossibleSquaresForValueIndex
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibleSquaresForValueIndex
- uid: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square}
  commentId: T:System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Square>
  nameWithType: ReadOnlySpan<Square>
  fullName: System.ReadOnlySpan<SudokuSpice.ConstraintBased.Square>
  nameWithType.vb: ReadOnlySpan(Of Square)
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square)
  name.vb: ReadOnlySpan(Of Square)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.Square
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.Square
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddRequirementsForValueIndex*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddRequirementsForValueIndex
  name: TryAddRequirementsForValueIndex
  nameWithType: ConstraintUtil.TryAddRequirementsForValueIndex
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddRequirementsForValueIndex
