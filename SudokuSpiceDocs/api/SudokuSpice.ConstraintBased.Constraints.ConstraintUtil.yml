### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  commentId: T:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  id: ConstraintUtil
  parent: SudokuSpice.ConstraintBased.Constraints
  children:
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.Int32,SudokuSpice.ConstraintBased.Objective@)
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.Int32,SudokuSpice.ConstraintBased.OptionalObjective@)
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32)
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  langs:
  - csharp
  - vb
  name: ConstraintUtil
  nameWithType: ConstraintUtil
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ConstraintUtil
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 8
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nProvides utilities for easily implementing constraints.\n"
  example: []
  syntax:
    content: public static class ConstraintUtil
    content.vb: Public Module ConstraintUtil
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  id: TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan<Coordinate>, ExactCoverMatrix)
  nameWithType: ConstraintUtil.TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan<Coordinate>, ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle, System.ReadOnlySpan<SudokuSpice.Coordinate>, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TryImplementUniquenessConstraintForSquares
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 26
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nEnforces uniqueness of the values at the given coordinates.\n"
  remarks: "\nThis drops any <see cref=\"!:PossibleSquareValue\"></see>s that are no longer possible, and\nadds <see cref=\"!:Requirement\"></see>s and links to enforce this constraint for the ones\nthat are still possible.\n"
  example: []
  syntax:
    content: public static bool TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle puzzle, ReadOnlySpan<Coordinate> squareCoordinates, ExactCoverMatrix matrix)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: The puzzle being solved.
    - id: squareCoordinates
      type: System.ReadOnlySpan{SudokuSpice.Coordinate}
      description: "\nThe coordinates that must contain unique values.\n"
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: The exact cover matrix for the current puzzle.
    return:
      type: System.Boolean
      description: "\nFalse if the puzzle violates uniquness for the given coordinates, else true.\n"
    content.vb: Public Shared Function TryImplementUniquenessConstraintForSquares(puzzle As IReadOnlyPuzzle, squareCoordinates As ReadOnlySpan(Of Coordinate), matrix As ExactCoverMatrix) As Boolean
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares*
  nameWithType.vb: ConstraintUtil.TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan(Of Coordinate), ExactCoverMatrix)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle, System.ReadOnlySpan(Of SudokuSpice.Coordinate), SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name.vb: TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan(Of Coordinate), ExactCoverMatrix)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  id: CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan<Coordinate>, Span<Boolean>)
  nameWithType: ConstraintUtil.CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan<Coordinate>, Span<Boolean>)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix, System.ReadOnlySpan<SudokuSpice.Coordinate>, System.Span<System.Boolean>)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CheckForSetValues
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 68
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nFills the <code data-dev-comment-type=\"paramref\" class=\"paramref\">isValueIndexPresentInSquares</code> span according to which\nvalue indices are already set in the given list of\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">squareCoordinates</code>. Each index is true if that value is already set.\n"
  example: []
  syntax:
    content: public static void CheckForSetValues(IReadOnlyPuzzle puzzle, ExactCoverMatrix matrix, ReadOnlySpan<Coordinate> squareCoordinates, Span<bool> isValueIndexPresentInSquares)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: The current puzzle being solved.
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: The matrix for the puzzle being solved.
    - id: squareCoordinates
      type: System.ReadOnlySpan{SudokuSpice.Coordinate}
      description: The coordinates to check.
    - id: isValueIndexPresentInSquares
      type: System.Span{System.Boolean}
      description: "\nAn array that will be updated to indicate which values are set.\n"
    content.vb: Public Shared Sub CheckForSetValues(puzzle As IReadOnlyPuzzle, matrix As ExactCoverMatrix, squareCoordinates As ReadOnlySpan(Of Coordinate), isValueIndexPresentInSquares As Span(Of Boolean))
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues*
  nameWithType.vb: ConstraintUtil.CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan(Of Coordinate), Span(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix, System.ReadOnlySpan(Of SudokuSpice.Coordinate), System.Span(Of System.Boolean))
  name.vb: CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan(Of Coordinate), Span(Of Boolean))
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32)
  id: TryDropPossibilitiesAtIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32)
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: TryDropPossibilitiesAtIndex(ReadOnlySpan<Possibility[]>, Int32)
  nameWithType: ConstraintUtil.TryDropPossibilitiesAtIndex(ReadOnlySpan<Possibility[]>, Int32)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex(System.ReadOnlySpan<SudokuSpice.ConstraintBased.Possibility[]>, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TryDropPossibilitiesAtIndex
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 102
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nDrops <xref href=\"SudokuSpice.ConstraintBased.Possibility\" data-throw-if-not-resolved=\"false\"></xref>s with the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">valueIndex</code>\nfrom the given set of <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code>. Null squares and possible values are\nignored.\n\nIf this returns false, there is no guarantee as to the state of the given\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code>. Some may have been dropped.\n"
  example: []
  syntax:
    content: public static bool TryDropPossibilitiesAtIndex(ReadOnlySpan<Possibility[]> squares, int valueIndex)
    parameters:
    - id: squares
      type: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]}
      description: The squares to drop, if not null.
    - id: valueIndex
      type: System.Int32
      description: "\nThe value index of the possible values within the squares.\n"
    return:
      type: System.Boolean
      description: "\nTrue if all the <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code> were dropped safely (eg. without\nresulting in an empty <xref href=\"SudokuSpice.ConstraintBased.Objective\" data-throw-if-not-resolved=\"false\"></xref> without any possible square\nvalues, else false.\n"
    content.vb: Public Shared Function TryDropPossibilitiesAtIndex(squares As ReadOnlySpan(Of Possibility()), valueIndex As Integer) As Boolean
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex*
  nameWithType.vb: ConstraintUtil.TryDropPossibilitiesAtIndex(ReadOnlySpan(Of Possibility()), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex(System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Possibility()), System.Int32)
  name.vb: TryDropPossibilitiesAtIndex(ReadOnlySpan(Of Possibility()), Int32)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.Int32,SudokuSpice.ConstraintBased.OptionalObjective@)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.Int32,SudokuSpice.ConstraintBased.OptionalObjective@)
  id: TryAddOptionalObjectiveForPossibilityIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.Int32,SudokuSpice.ConstraintBased.OptionalObjective@)
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan<Possibility[]>, Int32, ExactCoverMatrix, Int32, out OptionalObjective)
  nameWithType: ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan<Possibility[]>, Int32, ExactCoverMatrix, Int32, out OptionalObjective)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(System.ReadOnlySpan<SudokuSpice.ConstraintBased.Possibility[]>, System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix, System.Int32, out SudokuSpice.ConstraintBased.OptionalObjective)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TryAddOptionalObjectiveForPossibilityIndex
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 152
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nAdd an <xref href=\"SudokuSpice.ConstraintBased.IObjective\" data-throw-if-not-resolved=\"false\"></xref> connecting all the\n<see cref=\"!:PossibleSquareValue\"></see>s at the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">possibilityIndex</code> on the\ngiven <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code>. Skips null squares, null possible values, and any\npossible values in a known state (i.e. dropped or selected).\n"
  example: []
  syntax:
    content: public static bool TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan<Possibility[]> squares, int possibilityIndex, ExactCoverMatrix matrix, int requiredCount, out OptionalObjective objective)
    parameters:
    - id: squares
      type: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]}
      description: "\nThe squares to add <see cref=\"!:PossibleSquareValue\"></see>s from.\n"
    - id: possibilityIndex
      type: System.Int32
      description: "\nThe value index of the possible value within the squares.\n"
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: The matrix for the current puzzle being solved.
    - id: requiredCount
      type: System.Int32
      description: "\nThe number of possible square values required to satisfy the new\n<see cref=\"!:Requirement\"></see>.\n"
    - id: objective
      type: SudokuSpice.ConstraintBased.OptionalObjective
    return:
      type: System.Boolean
      description: "\nFalse if the requirement could not be added, for example because none of the\ncorresponding <see cref=\"!:PossibleSquareValue\"></see>s were still possible and the\nrequirement would have been empty. Else returns true.\n"
    content.vb: Public Shared Function TryAddOptionalObjectiveForPossibilityIndex(squares As ReadOnlySpan(Of Possibility()), possibilityIndex As Integer, matrix As ExactCoverMatrix, requiredCount As Integer, ByRef objective As OptionalObjective) As Boolean
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex*
  nameWithType.vb: ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan(Of Possibility()), Int32, ExactCoverMatrix, Int32, ByRef OptionalObjective)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Possibility()), System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix, System.Int32, ByRef SudokuSpice.ConstraintBased.OptionalObjective)
  name.vb: TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan(Of Possibility()), Int32, ExactCoverMatrix, Int32, ByRef OptionalObjective)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.Int32,SudokuSpice.ConstraintBased.Objective@)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.Int32,SudokuSpice.ConstraintBased.Objective@)
  id: TryAddObjectiveForPossibilityIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.Int32,SudokuSpice.ConstraintBased.Objective@)
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: TryAddObjectiveForPossibilityIndex(ReadOnlySpan<Possibility[]>, Int32, ExactCoverMatrix, Int32, out Objective)
  nameWithType: ConstraintUtil.TryAddObjectiveForPossibilityIndex(ReadOnlySpan<Possibility[]>, Int32, ExactCoverMatrix, Int32, out Objective)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex(System.ReadOnlySpan<SudokuSpice.ConstraintBased.Possibility[]>, System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix, System.Int32, out SudokuSpice.ConstraintBased.Objective)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TryAddObjectiveForPossibilityIndex
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 194
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nAdd an <xref href=\"SudokuSpice.ConstraintBased.IObjective\" data-throw-if-not-resolved=\"false\"></xref> connecting all the\n<see cref=\"!:PossibleSquareValue\"></see>s at the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">possibilityIndex</code> on the\ngiven <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code>. Skips null squares, null possible values, and any\npossible values in a known state (i.e. dropped or selected).\n"
  example: []
  syntax:
    content: public static bool TryAddObjectiveForPossibilityIndex(ReadOnlySpan<Possibility[]> squares, int possibilityIndex, ExactCoverMatrix matrix, int requiredCount, out Objective objective)
    parameters:
    - id: squares
      type: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]}
      description: "\nThe squares to add <see cref=\"!:PossibleSquareValue\"></see>s from.\n"
    - id: possibilityIndex
      type: System.Int32
      description: "\nThe value index of the possible value within the squares.\n"
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: The matrix for the current puzzle being solved.
    - id: requiredCount
      type: System.Int32
      description: "\nThe number of possible square values required to satisfy the new\n<see cref=\"!:Requirement\"></see>.\n"
    - id: objective
      type: SudokuSpice.ConstraintBased.Objective
    return:
      type: System.Boolean
      description: "\nFalse if the requirement could not be added, for example because none of the\ncorresponding <see cref=\"!:PossibleSquareValue\"></see>s were still possible and the\nrequirement would have been empty. Else returns true.\n"
    content.vb: Public Shared Function TryAddObjectiveForPossibilityIndex(squares As ReadOnlySpan(Of Possibility()), possibilityIndex As Integer, matrix As ExactCoverMatrix, requiredCount As Integer, ByRef objective As Objective) As Boolean
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex*
  nameWithType.vb: ConstraintUtil.TryAddObjectiveForPossibilityIndex(ReadOnlySpan(Of Possibility()), Int32, ExactCoverMatrix, Int32, ByRef Objective)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex(System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Possibility()), System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix, System.Int32, ByRef SudokuSpice.ConstraintBased.Objective)
  name.vb: TryAddObjectiveForPossibilityIndex(ReadOnlySpan(Of Possibility()), Int32, ExactCoverMatrix, Int32, ByRef Objective)
references:
- uid: SudokuSpice.ConstraintBased.Constraints
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares
  name: TryImplementUniquenessConstraintForSquares
  nameWithType: ConstraintUtil.TryImplementUniquenessConstraintForSquares
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: System.ReadOnlySpan{SudokuSpice.Coordinate}
  commentId: T:System.ReadOnlySpan{SudokuSpice.Coordinate}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Coordinate>
  nameWithType: ReadOnlySpan<Coordinate>
  fullName: System.ReadOnlySpan<SudokuSpice.Coordinate>
  nameWithType.vb: ReadOnlySpan(Of Coordinate)
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.Coordinate)
  name.vb: ReadOnlySpan(Of Coordinate)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix
  parent: SudokuSpice.ConstraintBased
  name: ExactCoverMatrix
  nameWithType: ExactCoverMatrix
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues
  name: CheckForSetValues
  nameWithType: ConstraintUtil.CheckForSetValues
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues
- uid: System.Span{System.Boolean}
  commentId: T:System.Span{System.Boolean}
  parent: System
  definition: System.Span`1
  name: Span<Boolean>
  nameWithType: Span<Boolean>
  fullName: System.Span<System.Boolean>
  nameWithType.vb: Span(Of Boolean)
  fullName.vb: System.Span(Of System.Boolean)
  name.vb: Span(Of Boolean)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.Possibility
  commentId: T:SudokuSpice.ConstraintBased.Possibility
  name: Possibility
  nameWithType: Possibility
  fullName: SudokuSpice.ConstraintBased.Possibility
- uid: SudokuSpice.ConstraintBased.Objective
  commentId: T:SudokuSpice.ConstraintBased.Objective
  parent: SudokuSpice.ConstraintBased
  name: Objective
  nameWithType: Objective
  fullName: SudokuSpice.ConstraintBased.Objective
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex
  name: TryDropPossibilitiesAtIndex
  nameWithType: ConstraintUtil.TryDropPossibilitiesAtIndex
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex
- uid: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]}
  commentId: T:System.ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Possibility[]>
  nameWithType: ReadOnlySpan<Possibility[]>
  fullName: System.ReadOnlySpan<SudokuSpice.ConstraintBased.Possibility[]>
  nameWithType.vb: ReadOnlySpan(Of Possibility())
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Possibility())
  name.vb: ReadOnlySpan(Of Possibility())
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.Possibility
    name: Possibility
    nameWithType: Possibility
    fullName: SudokuSpice.ConstraintBased.Possibility
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.Possibility
    name: Possibility
    nameWithType: Possibility
    fullName: SudokuSpice.ConstraintBased.Possibility
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.ConstraintBased.IObjective
  commentId: T:SudokuSpice.ConstraintBased.IObjective
  parent: SudokuSpice.ConstraintBased
  name: IObjective
  nameWithType: IObjective
  fullName: SudokuSpice.ConstraintBased.IObjective
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex
  name: TryAddOptionalObjectiveForPossibilityIndex
  nameWithType: ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex
- uid: SudokuSpice.ConstraintBased.OptionalObjective
  commentId: T:SudokuSpice.ConstraintBased.OptionalObjective
  parent: SudokuSpice.ConstraintBased
  name: OptionalObjective
  nameWithType: OptionalObjective
  fullName: SudokuSpice.ConstraintBased.OptionalObjective
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex
  name: TryAddObjectiveForPossibilityIndex
  nameWithType: ConstraintUtil.TryAddObjectiveForPossibilityIndex
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex
