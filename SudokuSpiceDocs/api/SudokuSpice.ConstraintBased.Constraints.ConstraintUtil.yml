### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  commentId: T:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  id: ConstraintUtil
  parent: SudokuSpice.ConstraintBased.Constraints
  children:
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex``1(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square{``0}},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix{``0})
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues``1(``0,SudokuSpice.ConstraintBased.ExactCoverMatrix{``0},System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex``1(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square{``0}},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix{``0})
  - SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares``1(``0,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix{``0})
  langs:
  - csharp
  - vb
  name: ConstraintUtil
  nameWithType: ConstraintUtil
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: ConstraintUtil
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 7
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nProvides utilities for easily implementing constraints.\n"
  example: []
  syntax:
    content: public static class ConstraintUtil
    content.vb: Public Module ConstraintUtil
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares``1(``0,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix{``0})
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares``1(``0,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix{``0})
  id: ImplementUniquenessConstraintForSquares``1(``0,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix{``0})
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: ImplementUniquenessConstraintForSquares<TPuzzle>(TPuzzle, ReadOnlySpan<Coordinate>, ExactCoverMatrix<TPuzzle>)
  nameWithType: ConstraintUtil.ImplementUniquenessConstraintForSquares<TPuzzle>(TPuzzle, ReadOnlySpan<Coordinate>, ExactCoverMatrix<TPuzzle>)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares<TPuzzle>(TPuzzle, System.ReadOnlySpan<SudokuSpice.Coordinate>, SudokuSpice.ConstraintBased.ExactCoverMatrix<TPuzzle>)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: ImplementUniquenessConstraintForSquares
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 25
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nEnforces uniqueness of the values at the given coordinates.\n"
  remarks: "\nThis drops any <xref href=\"SudokuSpice.ConstraintBased.PossibleValue%601\" data-throw-if-not-resolved=\"false\"></xref>s that are no longer possible, and\nadds <xref href=\"SudokuSpice.ConstraintBased.ConstraintHeader%601\" data-throw-if-not-resolved=\"false\"></xref>s and links to enforce this constraint for the ones\nthat are still possible.\n"
  example: []
  syntax:
    content: >-
      public static void ImplementUniquenessConstraintForSquares<TPuzzle>(TPuzzle puzzle, ReadOnlySpan<Coordinate> squareCoordinates, ExactCoverMatrix<TPuzzle> matrix)

          where TPuzzle : IReadOnlyPuzzle
    parameters:
    - id: puzzle
      type: '{TPuzzle}'
      description: The puzzle being solved.
    - id: squareCoordinates
      type: System.ReadOnlySpan{SudokuSpice.Coordinate}
      description: "\nThe coordinates that must contain unique values.\n"
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix{{TPuzzle}}
      description: The exact cover matrix for the current puzzle.
    typeParameters:
    - id: TPuzzle
    content.vb: Public Shared Sub ImplementUniquenessConstraintForSquares(Of TPuzzle As IReadOnlyPuzzle)(puzzle As TPuzzle, squareCoordinates As ReadOnlySpan(Of Coordinate), matrix As ExactCoverMatrix(Of TPuzzle))
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThrown if the puzzle violates uniquness for the given coordinates.\n"
  nameWithType.vb: ConstraintUtil.ImplementUniquenessConstraintForSquares(Of TPuzzle)(TPuzzle, ReadOnlySpan(Of Coordinate), ExactCoverMatrix(Of TPuzzle))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares(Of TPuzzle)(TPuzzle, System.ReadOnlySpan(Of SudokuSpice.Coordinate), SudokuSpice.ConstraintBased.ExactCoverMatrix(Of TPuzzle))
  name.vb: ImplementUniquenessConstraintForSquares(Of TPuzzle)(TPuzzle, ReadOnlySpan(Of Coordinate), ExactCoverMatrix(Of TPuzzle))
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues``1(``0,SudokuSpice.ConstraintBased.ExactCoverMatrix{``0},System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues``1(``0,SudokuSpice.ConstraintBased.ExactCoverMatrix{``0},System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  id: CheckForSetValues``1(``0,SudokuSpice.ConstraintBased.ExactCoverMatrix{``0},System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: CheckForSetValues<TPuzzle>(TPuzzle, ExactCoverMatrix<TPuzzle>, ReadOnlySpan<Coordinate>, Span<Boolean>)
  nameWithType: ConstraintUtil.CheckForSetValues<TPuzzle>(TPuzzle, ExactCoverMatrix<TPuzzle>, ReadOnlySpan<Coordinate>, Span<Boolean>)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues<TPuzzle>(TPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix<TPuzzle>, System.ReadOnlySpan<SudokuSpice.Coordinate>, System.Span<System.Boolean>)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CheckForSetValues
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 60
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nFills the <code data-dev-comment-type=\"paramref\" class=\"paramref\">isValueIndexPresentInSquares</code> span according to which\nvalue indices are already set in the given list of\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">squareCoordinates</code>. Each index is true if that value is already set.\n"
  example: []
  syntax:
    content: >-
      public static void CheckForSetValues<TPuzzle>(TPuzzle puzzle, ExactCoverMatrix<TPuzzle> matrix, ReadOnlySpan<Coordinate> squareCoordinates, Span<bool> isValueIndexPresentInSquares)

          where TPuzzle : IReadOnlyPuzzle
    parameters:
    - id: puzzle
      type: '{TPuzzle}'
      description: The current puzzle being solved.
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix{{TPuzzle}}
      description: The matrix for the puzzle being solved.
    - id: squareCoordinates
      type: System.ReadOnlySpan{SudokuSpice.Coordinate}
      description: The coordinates to check.
    - id: isValueIndexPresentInSquares
      type: System.Span{System.Boolean}
      description: "\nAn array that will be updated to indicate which values are set.\n"
    typeParameters:
    - id: TPuzzle
    content.vb: Public Shared Sub CheckForSetValues(Of TPuzzle As IReadOnlyPuzzle)(puzzle As TPuzzle, matrix As ExactCoverMatrix(Of TPuzzle), squareCoordinates As ReadOnlySpan(Of Coordinate), isValueIndexPresentInSquares As Span(Of Boolean))
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues*
  nameWithType.vb: ConstraintUtil.CheckForSetValues(Of TPuzzle)(TPuzzle, ExactCoverMatrix(Of TPuzzle), ReadOnlySpan(Of Coordinate), Span(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(Of TPuzzle)(TPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix(Of TPuzzle), System.ReadOnlySpan(Of SudokuSpice.Coordinate), System.Span(Of System.Boolean))
  name.vb: CheckForSetValues(Of TPuzzle)(TPuzzle, ExactCoverMatrix(Of TPuzzle), ReadOnlySpan(Of Coordinate), Span(Of Boolean))
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex``1(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square{``0}},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix{``0})
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex``1(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square{``0}},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix{``0})
  id: DropPossibleSquaresForValueIndex``1(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square{``0}},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix{``0})
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: DropPossibleSquaresForValueIndex<TPuzzle>(ReadOnlySpan<Square<TPuzzle>>, Int32, ExactCoverMatrix<TPuzzle>)
  nameWithType: ConstraintUtil.DropPossibleSquaresForValueIndex<TPuzzle>(ReadOnlySpan<Square<TPuzzle>>, Int32, ExactCoverMatrix<TPuzzle>)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex<TPuzzle>(System.ReadOnlySpan<SudokuSpice.ConstraintBased.Square<TPuzzle>>, System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix<TPuzzle>)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: DropPossibleSquaresForValueIndex
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 90
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nDrops <xref href=\"SudokuSpice.ConstraintBased.PossibleValue%601\" data-throw-if-not-resolved=\"false\"></xref>s with the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">valueIndex</code>\nfrom the given set of <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code>. Null squares and possible values are\nignored.\n"
  example: []
  syntax:
    content: >-
      public static void DropPossibleSquaresForValueIndex<TPuzzle>(ReadOnlySpan<Square<TPuzzle>> squares, int valueIndex, ExactCoverMatrix<TPuzzle> matrix)

          where TPuzzle : IReadOnlyPuzzle
    parameters:
    - id: squares
      type: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square{{TPuzzle}}}
      description: The squares to drop, if not null.
    - id: valueIndex
      type: System.Int32
      description: "\nThe value index of the possible values within the squares.\n"
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix{{TPuzzle}}
      description: The matrix for the puzzle currently being solved.
    typeParameters:
    - id: TPuzzle
    content.vb: Public Shared Sub DropPossibleSquaresForValueIndex(Of TPuzzle As IReadOnlyPuzzle)(squares As ReadOnlySpan(Of Square(Of TPuzzle)), valueIndex As Integer, matrix As ExactCoverMatrix(Of TPuzzle))
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThrown if the puzzle violates uniquness for the given coordinates.\n"
  nameWithType.vb: ConstraintUtil.DropPossibleSquaresForValueIndex(Of TPuzzle)(ReadOnlySpan(Of Square(Of TPuzzle)), Int32, ExactCoverMatrix(Of TPuzzle))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex(Of TPuzzle)(System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square(Of TPuzzle)), System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix(Of TPuzzle))
  name.vb: DropPossibleSquaresForValueIndex(Of TPuzzle)(ReadOnlySpan(Of Square(Of TPuzzle)), Int32, ExactCoverMatrix(Of TPuzzle))
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex``1(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square{``0}},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix{``0})
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex``1(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square{``0}},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix{``0})
  id: AddConstraintHeadersForValueIndex``1(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square{``0}},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix{``0})
  parent: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  langs:
  - csharp
  - vb
  name: AddConstraintHeadersForValueIndex<TPuzzle>(ReadOnlySpan<Square<TPuzzle>>, Int32, ExactCoverMatrix<TPuzzle>)
  nameWithType: ConstraintUtil.AddConstraintHeadersForValueIndex<TPuzzle>(ReadOnlySpan<Square<TPuzzle>>, Int32, ExactCoverMatrix<TPuzzle>)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex<TPuzzle>(System.ReadOnlySpan<SudokuSpice.ConstraintBased.Square<TPuzzle>>, System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix<TPuzzle>)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: AddConstraintHeadersForValueIndex
    path: ../SudokuSpice/ConstraintBased/Constraints/ConstraintUtil.cs
    startLine: 125
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nAdd a <xref href=\"SudokuSpice.ConstraintBased.ConstraintHeader%601\" data-throw-if-not-resolved=\"false\"></xref> connecting all the\n<xref href=\"SudokuSpice.ConstraintBased.PossibleValue%601\" data-throw-if-not-resolved=\"false\"></xref>s at the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">valueIndex</code> on the\ngiven <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code>. Skips null squares, null possible values, and any\npossible values in a known state (i.e. dropped or selected).\n"
  example: []
  syntax:
    content: >-
      public static void AddConstraintHeadersForValueIndex<TPuzzle>(ReadOnlySpan<Square<TPuzzle>> squares, int valueIndex, ExactCoverMatrix<TPuzzle> matrix)

          where TPuzzle : IReadOnlyPuzzle
    parameters:
    - id: squares
      type: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square{{TPuzzle}}}
      description: The squares to add possible square values from.
    - id: valueIndex
      type: System.Int32
      description: "\nThe value index of the possible value within the squares.\n"
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix{{TPuzzle}}
      description: The matrix for the current puzzle being solved.
    typeParameters:
    - id: TPuzzle
    content.vb: Public Shared Sub AddConstraintHeadersForValueIndex(Of TPuzzle As IReadOnlyPuzzle)(squares As ReadOnlySpan(Of Square(Of TPuzzle)), valueIndex As Integer, matrix As ExactCoverMatrix(Of TPuzzle))
  overload: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex*
  nameWithType.vb: ConstraintUtil.AddConstraintHeadersForValueIndex(Of TPuzzle)(ReadOnlySpan(Of Square(Of TPuzzle)), Int32, ExactCoverMatrix(Of TPuzzle))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex(Of TPuzzle)(System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square(Of TPuzzle)), System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix(Of TPuzzle))
  name.vb: AddConstraintHeadersForValueIndex(Of TPuzzle)(ReadOnlySpan(Of Square(Of TPuzzle)), Int32, ExactCoverMatrix(Of TPuzzle))
references:
- uid: SudokuSpice.ConstraintBased.Constraints
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.ConstraintBased.PossibleValue`1
  commentId: T:SudokuSpice.ConstraintBased.PossibleValue`1
  name: PossibleValue<TPuzzle>
  nameWithType: PossibleValue<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.PossibleValue<TPuzzle>
  nameWithType.vb: PossibleValue(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.PossibleValue(Of TPuzzle)
  name.vb: PossibleValue(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.PossibleValue`1
    name: PossibleValue
    nameWithType: PossibleValue
    fullName: SudokuSpice.ConstraintBased.PossibleValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.PossibleValue`1
    name: PossibleValue
    nameWithType: PossibleValue
    fullName: SudokuSpice.ConstraintBased.PossibleValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ConstraintHeader`1
  commentId: T:SudokuSpice.ConstraintBased.ConstraintHeader`1
  name: ConstraintHeader<TPuzzle>
  nameWithType: ConstraintHeader<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.ConstraintHeader<TPuzzle>
  nameWithType.vb: ConstraintHeader(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.ConstraintHeader(Of TPuzzle)
  name.vb: ConstraintHeader(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.ConstraintHeader`1
    name: ConstraintHeader
    nameWithType: ConstraintHeader
    fullName: SudokuSpice.ConstraintBased.ConstraintHeader
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.ConstraintHeader`1
    name: ConstraintHeader
    nameWithType: ConstraintHeader
    fullName: SudokuSpice.ConstraintBased.ConstraintHeader
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares
  name: ImplementUniquenessConstraintForSquares
  nameWithType: ConstraintUtil.ImplementUniquenessConstraintForSquares
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares
- uid: '{TPuzzle}'
  commentId: '!:TPuzzle'
  definition: TPuzzle
  name: TPuzzle
  nameWithType: TPuzzle
  fullName: TPuzzle
- uid: System.ReadOnlySpan{SudokuSpice.Coordinate}
  commentId: T:System.ReadOnlySpan{SudokuSpice.Coordinate}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Coordinate>
  nameWithType: ReadOnlySpan<Coordinate>
  fullName: System.ReadOnlySpan<SudokuSpice.Coordinate>
  nameWithType.vb: ReadOnlySpan(Of Coordinate)
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.Coordinate)
  name.vb: ReadOnlySpan(Of Coordinate)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix{{TPuzzle}}
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix{`0}
  parent: SudokuSpice.ConstraintBased
  definition: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
  name: ExactCoverMatrix<TPuzzle>
  nameWithType: ExactCoverMatrix<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix<TPuzzle>
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.ExactCoverMatrix(Of TPuzzle)
  name.vb: ExactCoverMatrix(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: TPuzzle
  name: TPuzzle
  nameWithType: TPuzzle
  fullName: TPuzzle
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix`1
  name: ExactCoverMatrix<TPuzzle>
  nameWithType: ExactCoverMatrix<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix<TPuzzle>
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.ExactCoverMatrix(Of TPuzzle)
  name.vb: ExactCoverMatrix(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix`1
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues
  name: CheckForSetValues
  nameWithType: ConstraintUtil.CheckForSetValues
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues
- uid: System.Span{System.Boolean}
  commentId: T:System.Span{System.Boolean}
  parent: System
  definition: System.Span`1
  name: Span<Boolean>
  nameWithType: Span<Boolean>
  fullName: System.Span<System.Boolean>
  nameWithType.vb: Span(Of Boolean)
  fullName.vb: System.Span(Of System.Boolean)
  name.vb: Span(Of Boolean)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex
  name: DropPossibleSquaresForValueIndex
  nameWithType: ConstraintUtil.DropPossibleSquaresForValueIndex
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex
- uid: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square{{TPuzzle}}}
  commentId: T:System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square{`0}}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Square<TPuzzle>>
  nameWithType: ReadOnlySpan<Square<TPuzzle>>
  fullName: System.ReadOnlySpan<SudokuSpice.ConstraintBased.Square<TPuzzle>>
  nameWithType.vb: ReadOnlySpan(Of Square(Of TPuzzle))
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square(Of TPuzzle))
  name.vb: ReadOnlySpan(Of Square(Of TPuzzle))
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.Square`1
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.Square`1
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex
  name: AddConstraintHeadersForValueIndex
  nameWithType: ConstraintUtil.AddConstraintHeadersForValueIndex
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex
