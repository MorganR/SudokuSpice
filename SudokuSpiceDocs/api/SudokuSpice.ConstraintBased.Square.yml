### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.Square
  commentId: T:SudokuSpice.ConstraintBased.Square
  id: Square
  parent: SudokuSpice.ConstraintBased
  children:
  - SudokuSpice.ConstraintBased.Square.Coordinate
  - SudokuSpice.ConstraintBased.Square.GetPossibleValue(System.Int32)
  - SudokuSpice.ConstraintBased.Square.IsSet
  - SudokuSpice.ConstraintBased.Square.NumPossibleValues
  langs:
  - csharp
  - vb
  name: Square
  nameWithType: Square
  fullName: SudokuSpice.ConstraintBased.Square
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/framework/Square.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Square
    path: ../SudokuSpice/ConstraintBased/framework/Square.cs
    startLine: 10
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nRepresents a location in a puzzle, including tracking the current possible values at that\nlocation.\n"
  example: []
  syntax:
    content: 'public class Square : object'
    content.vb: >-
      Public Class Square
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.ConstraintBased.Square.Coordinate
  commentId: P:SudokuSpice.ConstraintBased.Square.Coordinate
  id: Coordinate
  parent: SudokuSpice.ConstraintBased.Square
  langs:
  - csharp
  - vb
  name: Coordinate
  nameWithType: Square.Coordinate
  fullName: SudokuSpice.ConstraintBased.Square.Coordinate
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/framework/Square.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Coordinate
    path: ../SudokuSpice/ConstraintBased/framework/Square.cs
    startLine: 20
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets the <xref href=\"SudokuSpice.ConstraintBased.Square.Coordinate\" data-throw-if-not-resolved=\"false\"></xref> of this square.\n"
  example: []
  syntax:
    content: public Coordinate Coordinate { get; }
    parameters: []
    return:
      type: SudokuSpice.Coordinate
    content.vb: Public ReadOnly Property Coordinate As Coordinate
  overload: SudokuSpice.ConstraintBased.Square.Coordinate*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.ConstraintBased.Square.NumPossibleValues
  commentId: P:SudokuSpice.ConstraintBased.Square.NumPossibleValues
  id: NumPossibleValues
  parent: SudokuSpice.ConstraintBased.Square
  langs:
  - csharp
  - vb
  name: NumPossibleValues
  nameWithType: Square.NumPossibleValues
  fullName: SudokuSpice.ConstraintBased.Square.NumPossibleValues
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/framework/Square.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: NumPossibleValues
    path: ../SudokuSpice/ConstraintBased/framework/Square.cs
    startLine: 24
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets the current number of possible values this square has.\n"
  example: []
  syntax:
    content: public int NumPossibleValues { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumPossibleValues As Integer
  overload: SudokuSpice.ConstraintBased.Square.NumPossibleValues*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.ConstraintBased.Square.IsSet
  commentId: P:SudokuSpice.ConstraintBased.Square.IsSet
  id: IsSet
  parent: SudokuSpice.ConstraintBased.Square
  langs:
  - csharp
  - vb
  name: IsSet
  nameWithType: Square.IsSet
  fullName: SudokuSpice.ConstraintBased.Square.IsSet
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/framework/Square.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: IsSet
    path: ../SudokuSpice/ConstraintBased/framework/Square.cs
    startLine: 28
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets whether or not this square&apos;s value is currently set.\n"
  example: []
  syntax:
    content: public bool IsSet { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSet As Boolean
  overload: SudokuSpice.ConstraintBased.Square.IsSet*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.ConstraintBased.Square.GetPossibleValue(System.Int32)
  commentId: M:SudokuSpice.ConstraintBased.Square.GetPossibleValue(System.Int32)
  id: GetPossibleValue(System.Int32)
  parent: SudokuSpice.ConstraintBased.Square
  langs:
  - csharp
  - vb
  name: GetPossibleValue(Int32)
  nameWithType: Square.GetPossibleValue(Int32)
  fullName: SudokuSpice.ConstraintBased.Square.GetPossibleValue(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/framework/Square.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetPossibleValue
    path: ../SudokuSpice/ConstraintBased/framework/Square.cs
    startLine: 64
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets the possible value with the given value-index.\n"
  example: []
  syntax:
    content: public PossibleValue GetPossibleValue(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: SudokuSpice.ConstraintBased.PossibleValue
    content.vb: Public Function GetPossibleValue(index As Integer) As PossibleValue
  overload: SudokuSpice.ConstraintBased.Square.GetPossibleValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: SudokuSpice.ConstraintBased.Square.Coordinate
  commentId: P:SudokuSpice.ConstraintBased.Square.Coordinate
  isExternal: true
- uid: SudokuSpice.ConstraintBased.Square.Coordinate*
  commentId: Overload:SudokuSpice.ConstraintBased.Square.Coordinate
  name: Coordinate
  nameWithType: Square.Coordinate
  fullName: SudokuSpice.ConstraintBased.Square.Coordinate
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.ConstraintBased.Square.NumPossibleValues*
  commentId: Overload:SudokuSpice.ConstraintBased.Square.NumPossibleValues
  name: NumPossibleValues
  nameWithType: Square.NumPossibleValues
  fullName: SudokuSpice.ConstraintBased.Square.NumPossibleValues
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.ConstraintBased.Square.IsSet*
  commentId: Overload:SudokuSpice.ConstraintBased.Square.IsSet
  name: IsSet
  nameWithType: Square.IsSet
  fullName: SudokuSpice.ConstraintBased.Square.IsSet
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.ConstraintBased.Square.GetPossibleValue*
  commentId: Overload:SudokuSpice.ConstraintBased.Square.GetPossibleValue
  name: GetPossibleValue
  nameWithType: Square.GetPossibleValue
  fullName: SudokuSpice.ConstraintBased.Square.GetPossibleValue
- uid: SudokuSpice.ConstraintBased.PossibleValue
  commentId: T:SudokuSpice.ConstraintBased.PossibleValue
  parent: SudokuSpice.ConstraintBased
  name: PossibleValue
  nameWithType: PossibleValue
  fullName: SudokuSpice.ConstraintBased.PossibleValue
