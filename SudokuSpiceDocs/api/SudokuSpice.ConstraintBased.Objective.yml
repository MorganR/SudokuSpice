### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.Objective
  commentId: T:SudokuSpice.ConstraintBased.Objective
  id: Objective
  parent: SudokuSpice.ConstraintBased
  children:
  - SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph,ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility},System.Int32)
  - SudokuSpice.ConstraintBased.Objective.State
  langs:
  - csharp
  - vb
  name: Objective
  nameWithType: Objective
  fullName: SudokuSpice.ConstraintBased.Objective
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Objective.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Objective
    path: ../SudokuSpice/ConstraintBased/Objective.cs
    startLine: 11
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nA required objective in the <xref href=\"SudokuSpice.ConstraintBased.ExactCoverGraph\" data-throw-if-not-resolved=\"false\"></xref>. This enforces that one or more\n<xref href=\"SudokuSpice.ConstraintBased.IPossibility\" data-throw-if-not-resolved=\"false\"></xref>s must be selected.\n"
  example: []
  syntax:
    content: 'public class Objective : object, IObjective'
    content.vb: >-
      Public Class Objective
          Inherits Object
          Implements IObjective
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.ConstraintBased.IObjective
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.ConstraintBased.Objective.State
  commentId: P:SudokuSpice.ConstraintBased.Objective.State
  id: State
  parent: SudokuSpice.ConstraintBased.Objective
  langs:
  - csharp
  - vb
  name: State
  nameWithType: Objective.State
  fullName: SudokuSpice.ConstraintBased.Objective.State
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Objective.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: State
    path: ../SudokuSpice/ConstraintBased/Objective.cs
    startLine: 25
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nThe current state of this node in the <xref href=\"SudokuSpice.ConstraintBased.ExactCoverGraph\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public NodeState State { get; }
    parameters: []
    return:
      type: SudokuSpice.ConstraintBased.NodeState
    content.vb: Public ReadOnly Property State As NodeState
  overload: SudokuSpice.ConstraintBased.Objective.State*
  implements:
  - SudokuSpice.ConstraintBased.IObjective.State
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph,ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility},System.Int32)
  commentId: M:SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph,ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility},System.Int32)
  id: CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph,ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility},System.Int32)
  parent: SudokuSpice.ConstraintBased.Objective
  langs:
  - csharp
  - vb
  name: CreateFullyConnected(ExactCoverGraph, ReadOnlySpan<IPossibility>, Int32)
  nameWithType: Objective.CreateFullyConnected(ExactCoverGraph, ReadOnlySpan<IPossibility>, Int32)
  fullName: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph, ReadOnlySpan<SudokuSpice.ConstraintBased.IPossibility>, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Objective.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CreateFullyConnected
    path: ../SudokuSpice/ConstraintBased/Objective.cs
    startLine: 104
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nConstructs an objective that&apos;s fully connected to the given\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">possibilities</code> and into the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">graph</code>.\n"
  example: []
  syntax:
    content: public static Objective CreateFullyConnected(ExactCoverGraph graph, ReadOnlySpan<IPossibility> possibilities, int countToSatisfy)
    parameters:
    - id: graph
      type: SudokuSpice.ConstraintBased.ExactCoverGraph
      description: The graph to attach this to.
    - id: possibilities
      type: ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility}
      description: The possibilities that could satisfy this objective.
    - id: countToSatisfy
      type: System.Int32
      description: "\nThe number of possibilities that must be satisfied in order to satisfy this objective.\nOnce this number of possibilities are selected, all other possibilities on this\nobjective will be dropped.\n"
    return:
      type: SudokuSpice.ConstraintBased.Objective
      description: The newly constructed objective.
    content.vb: Public Shared Function CreateFullyConnected(graph As ExactCoverGraph, possibilities As ReadOnlySpan(Of IPossibility), countToSatisfy As Integer) As Objective
  overload: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected*
  nameWithType.vb: Objective.CreateFullyConnected(ExactCoverGraph, ReadOnlySpan(Of IPossibility), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph, ReadOnlySpan(Of SudokuSpice.ConstraintBased.IPossibility), System.Int32)
  name.vb: CreateFullyConnected(ExactCoverGraph, ReadOnlySpan(Of IPossibility), Int32)
references:
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverGraph
  parent: SudokuSpice.ConstraintBased
  name: ExactCoverGraph
  nameWithType: ExactCoverGraph
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph
- uid: SudokuSpice.ConstraintBased.IPossibility
  commentId: T:SudokuSpice.ConstraintBased.IPossibility
  parent: SudokuSpice.ConstraintBased
  name: IPossibility
  nameWithType: IPossibility
  fullName: SudokuSpice.ConstraintBased.IPossibility
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: SudokuSpice.ConstraintBased.IObjective
  commentId: T:SudokuSpice.ConstraintBased.IObjective
  parent: SudokuSpice.ConstraintBased
  name: IObjective
  nameWithType: IObjective
  fullName: SudokuSpice.ConstraintBased.IObjective
- uid: SudokuSpice.ConstraintBased.Objective.State*
  commentId: Overload:SudokuSpice.ConstraintBased.Objective.State
  name: State
  nameWithType: Objective.State
  fullName: SudokuSpice.ConstraintBased.Objective.State
- uid: SudokuSpice.ConstraintBased.IObjective.State
  commentId: P:SudokuSpice.ConstraintBased.IObjective.State
  parent: SudokuSpice.ConstraintBased.IObjective
  name: State
  nameWithType: IObjective.State
  fullName: SudokuSpice.ConstraintBased.IObjective.State
- uid: SudokuSpice.ConstraintBased.NodeState
  commentId: T:SudokuSpice.ConstraintBased.NodeState
  parent: SudokuSpice.ConstraintBased
  name: NodeState
  nameWithType: NodeState
  fullName: SudokuSpice.ConstraintBased.NodeState
- uid: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected*
  commentId: Overload:SudokuSpice.ConstraintBased.Objective.CreateFullyConnected
  name: CreateFullyConnected
  nameWithType: Objective.CreateFullyConnected
  fullName: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected
- uid: ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility}
  commentId: '!:ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility}'
  definition: ReadOnlySpan`1
  name: ReadOnlySpan<IPossibility>
  nameWithType: ReadOnlySpan<IPossibility>
  fullName: ReadOnlySpan<SudokuSpice.ConstraintBased.IPossibility>
  nameWithType.vb: ReadOnlySpan(Of IPossibility)
  fullName.vb: ReadOnlySpan(Of SudokuSpice.ConstraintBased.IPossibility)
  name.vb: ReadOnlySpan(Of IPossibility)
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.IPossibility
    name: IPossibility
    nameWithType: IPossibility
    fullName: SudokuSpice.ConstraintBased.IPossibility
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.IPossibility
    name: IPossibility
    nameWithType: IPossibility
    fullName: SudokuSpice.ConstraintBased.IPossibility
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.ConstraintBased.Objective
  commentId: T:SudokuSpice.ConstraintBased.Objective
  parent: SudokuSpice.ConstraintBased
  name: Objective
  nameWithType: Objective
  fullName: SudokuSpice.ConstraintBased.Objective
- uid: ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<>
  nameWithType: ReadOnlySpan<>
  fullName: ReadOnlySpan<>
  nameWithType.vb: ReadOnlySpan(Of )
  fullName.vb: ReadOnlySpan(Of )
  name.vb: ReadOnlySpan(Of )
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
