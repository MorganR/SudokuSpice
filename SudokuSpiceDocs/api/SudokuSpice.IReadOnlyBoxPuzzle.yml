### YamlMime:ManagedReference
items:
- uid: SudokuSpice.IReadOnlyBoxPuzzle
  commentId: T:SudokuSpice.IReadOnlyBoxPuzzle
  id: IReadOnlyBoxPuzzle
  parent: SudokuSpice
  children:
  - SudokuSpice.IReadOnlyBoxPuzzle.BoxSize
  - SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex(System.Int32,System.Int32)
  - SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate(System.Int32)
  - SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox(System.Int32)
  langs:
  - csharp
  - vb
  name: IReadOnlyBoxPuzzle
  nameWithType: IReadOnlyBoxPuzzle
  fullName: SudokuSpice.IReadOnlyBoxPuzzle
  type: Interface
  source:
    remote:
      path: SudokuSpice/data/IReadOnlyBoxPuzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: IReadOnlyBoxPuzzle
    path: ../SudokuSpice/data/IReadOnlyBoxPuzzle.cs
    startLine: 8
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nExpands IReadOnlyPuzzle to provide box-related functionality. A &apos;box&apos; is a square region\nwithin the puzzle. \n"
  example: []
  syntax:
    content: 'public interface IReadOnlyBoxPuzzle : IReadOnlyPuzzle'
    content.vb: >-
      Public Interface IReadOnlyBoxPuzzle
          Inherits IReadOnlyPuzzle
  inheritedMembers:
  - SudokuSpice.IReadOnlyPuzzle.Size
  - SudokuSpice.IReadOnlyPuzzle.NumSquares
  - SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  - SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  - SudokuSpice.IReadOnlyPuzzle.AllPossibleValues
  - SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  - SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  - SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SudokuSpice.IReadOnlyBoxPuzzle.BoxSize
  commentId: P:SudokuSpice.IReadOnlyBoxPuzzle.BoxSize
  id: BoxSize
  parent: SudokuSpice.IReadOnlyBoxPuzzle
  langs:
  - csharp
  - vb
  name: BoxSize
  nameWithType: IReadOnlyBoxPuzzle.BoxSize
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.BoxSize
  type: Property
  source:
    remote:
      path: SudokuSpice/data/IReadOnlyBoxPuzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: BoxSize
    path: ../SudokuSpice/data/IReadOnlyBoxPuzzle.cs
    startLine: 15
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: The length of one side of a mini box within the puzzle.
  example: []
  syntax:
    content: int BoxSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property BoxSize As Integer
  overload: SudokuSpice.IReadOnlyBoxPuzzle.BoxSize*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex(System.Int32,System.Int32)
  commentId: M:SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex(System.Int32,System.Int32)
  id: GetBoxIndex(System.Int32,System.Int32)
  parent: SudokuSpice.IReadOnlyBoxPuzzle
  langs:
  - csharp
  - vb
  name: GetBoxIndex(Int32, Int32)
  nameWithType: IReadOnlyBoxPuzzle.GetBoxIndex(Int32, Int32)
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/data/IReadOnlyBoxPuzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetBoxIndex
    path: ../SudokuSpice/data/IReadOnlyBoxPuzzle.cs
    startLine: 17
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: Returns the index of the box that the given coordinates are in.
  example: []
  syntax:
    content: int GetBoxIndex(int row, int col)
    parameters:
    - id: row
      type: System.Int32
    - id: col
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Function GetBoxIndex(row As Integer, col As Integer) As Integer
  overload: SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex*
- uid: SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate(System.Int32)
  commentId: M:SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate(System.Int32)
  id: GetStartingBoxCoordinate(System.Int32)
  parent: SudokuSpice.IReadOnlyBoxPuzzle
  langs:
  - csharp
  - vb
  name: GetStartingBoxCoordinate(Int32)
  nameWithType: IReadOnlyBoxPuzzle.GetStartingBoxCoordinate(Int32)
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/data/IReadOnlyBoxPuzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetStartingBoxCoordinate
    path: ../SudokuSpice/data/IReadOnlyBoxPuzzle.cs
    startLine: 20
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: Returns the top-left coordinate for the given box.
  example: []
  syntax:
    content: Coordinate GetStartingBoxCoordinate(int box)
    parameters:
    - id: box
      type: System.Int32
    return:
      type: SudokuSpice.Coordinate
    content.vb: Function GetStartingBoxCoordinate(box As Integer) As Coordinate
  overload: SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate*
- uid: SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox(System.Int32)
  commentId: M:SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox(System.Int32)
  id: YieldUnsetCoordsForBox(System.Int32)
  parent: SudokuSpice.IReadOnlyBoxPuzzle
  langs:
  - csharp
  - vb
  name: YieldUnsetCoordsForBox(Int32)
  nameWithType: IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox(Int32)
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/data/IReadOnlyBoxPuzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: YieldUnsetCoordsForBox
    path: ../SudokuSpice/data/IReadOnlyBoxPuzzle.cs
    startLine: 25
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nYields an enumerable of <xref href=\"SudokuSpice.Coordinate\" data-throw-if-not-resolved=\"false\"></xref>s for all the unset squares in the given box.\n"
  example: []
  syntax:
    content: IEnumerable<Coordinate> YieldUnsetCoordsForBox(int box)
    parameters:
    - id: box
      type: System.Int32
    return:
      type: System.Collections.Generic.IEnumerable{SudokuSpice.Coordinate}
    content.vb: Function YieldUnsetCoordsForBox(box As Integer) As IEnumerable(Of Coordinate)
  overload: SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox*
references:
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.IReadOnlyPuzzle.Size
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Size
  parent: SudokuSpice.IReadOnlyPuzzle
  name: Size
  nameWithType: IReadOnlyPuzzle.Size
  fullName: SudokuSpice.IReadOnlyPuzzle.Size
- uid: SudokuSpice.IReadOnlyPuzzle.NumSquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumSquares
  parent: SudokuSpice.IReadOnlyPuzzle
  name: NumSquares
  nameWithType: IReadOnlyPuzzle.NumSquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  parent: SudokuSpice.IReadOnlyPuzzle
  name: NumEmptySquares
  nameWithType: IReadOnlyPuzzle.NumEmptySquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  parent: SudokuSpice.IReadOnlyPuzzle
  name: NumSetSquares
  nameWithType: IReadOnlyPuzzle.NumSetSquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSetSquares
- uid: SudokuSpice.IReadOnlyPuzzle.AllPossibleValues
  commentId: P:SudokuSpice.IReadOnlyPuzzle.AllPossibleValues
  parent: SudokuSpice.IReadOnlyPuzzle
  name: AllPossibleValues
  nameWithType: IReadOnlyPuzzle.AllPossibleValues
  fullName: SudokuSpice.IReadOnlyPuzzle.AllPossibleValues
- uid: SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  parent: SudokuSpice.IReadOnlyPuzzle
  isExternal: true
  name: Item[Int32, Int32]
  nameWithType: IReadOnlyPuzzle.Item[Int32, Int32]
  fullName: SudokuSpice.IReadOnlyPuzzle.Item[System.Int32, System.Int32]
  nameWithType.vb: IReadOnlyPuzzle.Item(Int32, Int32)
  fullName.vb: SudokuSpice.IReadOnlyPuzzle.Item(System.Int32, System.Int32)
  name.vb: Item(Int32, Int32)
  spec.csharp:
  - uid: SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
    name: Item
    nameWithType: IReadOnlyPuzzle.Item
    fullName: SudokuSpice.IReadOnlyPuzzle.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
    name: Item
    nameWithType: IReadOnlyPuzzle.Item
    fullName: SudokuSpice.IReadOnlyPuzzle.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  parent: SudokuSpice.IReadOnlyPuzzle
  name: Item[Coordinate]
  nameWithType: IReadOnlyPuzzle.Item[Coordinate]
  fullName: SudokuSpice.IReadOnlyPuzzle.Item[SudokuSpice.Coordinate]
  nameWithType.vb: IReadOnlyPuzzle.Item(Coordinate)
  fullName.vb: SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate)
  name.vb: Item(Coordinate)
  spec.csharp:
  - uid: SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
    name: Item
    nameWithType: IReadOnlyPuzzle.Item
    fullName: SudokuSpice.IReadOnlyPuzzle.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
    name: Item
    nameWithType: IReadOnlyPuzzle.Item
    fullName: SudokuSpice.IReadOnlyPuzzle.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  commentId: M:SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  parent: SudokuSpice.IReadOnlyPuzzle
  name: GetUnsetCoords()
  nameWithType: IReadOnlyPuzzle.GetUnsetCoords()
  fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords()
  spec.csharp:
  - uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
    name: GetUnsetCoords
    nameWithType: IReadOnlyPuzzle.GetUnsetCoords
    fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
    name: GetUnsetCoords
    nameWithType: IReadOnlyPuzzle.GetUnsetCoords
    fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice.IReadOnlyBoxPuzzle.BoxSize*
  commentId: Overload:SudokuSpice.IReadOnlyBoxPuzzle.BoxSize
  name: BoxSize
  nameWithType: IReadOnlyBoxPuzzle.BoxSize
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.BoxSize
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex*
  commentId: Overload:SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex
  name: GetBoxIndex
  nameWithType: IReadOnlyBoxPuzzle.GetBoxIndex
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex
- uid: SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate*
  commentId: Overload:SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate
  name: GetStartingBoxCoordinate
  nameWithType: IReadOnlyBoxPuzzle.GetStartingBoxCoordinate
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox*
  commentId: Overload:SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox
  name: YieldUnsetCoordsForBox
  nameWithType: IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox
- uid: System.Collections.Generic.IEnumerable{SudokuSpice.Coordinate}
  commentId: T:System.Collections.Generic.IEnumerable{SudokuSpice.Coordinate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Coordinate>
  nameWithType: IEnumerable<Coordinate>
  fullName: System.Collections.Generic.IEnumerable<SudokuSpice.Coordinate>
  nameWithType.vb: IEnumerable(Of Coordinate)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SudokuSpice.Coordinate)
  name.vb: IEnumerable(Of Coordinate)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
