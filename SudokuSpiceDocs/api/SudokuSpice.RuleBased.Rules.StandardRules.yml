### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.Rules.StandardRules
  commentId: T:SudokuSpice.RuleBased.Rules.StandardRules
  id: StandardRules
  parent: SudokuSpice.RuleBased.Rules
  children:
  - SudokuSpice.RuleBased.Rules.StandardRules.#ctor
  - SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  - SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox(System.Int32)
  - SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn(System.Int32)
  - SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow(System.Int32)
  - SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  - SudokuSpice.RuleBased.Rules.StandardRules.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  - SudokuSpice.RuleBased.Rules.StandardRules.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  langs:
  - csharp
  - vb
  name: StandardRules
  nameWithType: StandardRules
  fullName: SudokuSpice.RuleBased.Rules.StandardRules
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/StandardRules.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: StandardRules
    path: ../SudokuSpice/RuleBased/Rules/StandardRules.cs
    startLine: 9
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  summary: "\nCombines the standard rules (row, column, and box uniqueness) for efficiency and\nconvenience.\n"
  example: []
  syntax:
    content: 'public class StandardRules : IMissingRowValuesTracker, IMissingColumnValuesTracker, IMissingBoxValuesTracker, ISudokuRule'
    content.vb: >-
      Public Class StandardRules

          Implements IMissingRowValuesTracker, IMissingColumnValuesTracker, IMissingBoxValuesTracker, ISudokuRule
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  - SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  - SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  - SudokuSpice.RuleBased.Rules.ISudokuRule
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.Rules.StandardRules.#ctor
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.#ctor
  id: '#ctor'
  parent: SudokuSpice.RuleBased.Rules.StandardRules
  langs:
  - csharp
  - vb
  name: StandardRules()
  nameWithType: StandardRules.StandardRules()
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.StandardRules()
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/StandardRules.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/RuleBased/Rules/StandardRules.cs
    startLine: 27
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  summary: "\nConstructs a single rule that enforces all the standard rules. This instance can be\nreused to solve multiple puzzles with the same <code data-dev-comment-type=\"paramref\" class=\"paramref\">size</code> and\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">allUniqueValues</code>.\n"
  example: []
  syntax:
    content: public StandardRules()
    content.vb: Public Sub New
  overload: SudokuSpice.RuleBased.Rules.StandardRules.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  id: CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.StandardRules
  langs:
  - csharp
  - vb
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: StandardRules.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/StandardRules.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CopyWithNewReference
    path: ../SudokuSpice/RuleBased/Rules/StandardRules.cs
    startLine: 39
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public ISudokuRule CopyWithNewReference(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzle
    return:
      type: SudokuSpice.RuleBased.Rules.ISudokuRule
    content.vb: Public Function CopyWithNewReference(puzzle As IReadOnlyPuzzle) As ISudokuRule
  overload: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Rules.StandardRules.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  id: TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.StandardRules
  langs:
  - csharp
  - vb
  name: TryInit(IReadOnlyPuzzle)
  nameWithType: StandardRules.TryInit(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/StandardRules.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TryInit
    path: ../SudokuSpice/RuleBased/Rules/StandardRules.cs
    startLine: 45
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public bool TryInit(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzle
    return:
      type: System.Boolean
    content.vb: Public Function TryInit(puzzle As IReadOnlyPuzzle) As Boolean
  overload: SudokuSpice.RuleBased.Rules.StandardRules.TryInit*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow(System.Int32)
  id: GetMissingValuesForRow(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.StandardRules
  langs:
  - csharp
  - vb
  name: GetMissingValuesForRow(Int32)
  nameWithType: StandardRules.GetMissingValuesForRow(Int32)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/StandardRules.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetMissingValuesForRow
    path: ../SudokuSpice/RuleBased/Rules/StandardRules.cs
    startLine: 94
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public BitVector GetMissingValuesForRow(int row)
    parameters:
    - id: row
      type: System.Int32
    return:
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public Function GetMissingValuesForRow(row As Integer) As BitVector
  overload: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow*
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn(System.Int32)
  id: GetMissingValuesForColumn(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.StandardRules
  langs:
  - csharp
  - vb
  name: GetMissingValuesForColumn(Int32)
  nameWithType: StandardRules.GetMissingValuesForColumn(Int32)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/StandardRules.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetMissingValuesForColumn
    path: ../SudokuSpice/RuleBased/Rules/StandardRules.cs
    startLine: 97
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public BitVector GetMissingValuesForColumn(int column)
    parameters:
    - id: column
      type: System.Int32
    return:
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public Function GetMissingValuesForColumn(column As Integer) As BitVector
  overload: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn*
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox(System.Int32)
  id: GetMissingValuesForBox(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.StandardRules
  langs:
  - csharp
  - vb
  name: GetMissingValuesForBox(Int32)
  nameWithType: StandardRules.GetMissingValuesForBox(Int32)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/StandardRules.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetMissingValuesForBox
    path: ../SudokuSpice/RuleBased/Rules/StandardRules.cs
    startLine: 100
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public BitVector GetMissingValuesForBox(int box)
    parameters:
    - id: box
      type: System.Int32
    return:
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public Function GetMissingValuesForBox(box As Integer) As BitVector
  overload: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox*
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(SudokuSpice.Coordinate@)
  id: GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.Rules.StandardRules
  langs:
  - csharp
  - vb
  name: GetPossibleValues(Coordinate)
  nameWithType: StandardRules.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/StandardRules.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetPossibleValues
    path: ../SudokuSpice/RuleBased/Rules/StandardRules.cs
    startLine: 103
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public BitVector GetPossibleValues(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    return:
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public Function GetPossibleValues(ByRef c As Coordinate) As BitVector
  overload: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  nameWithType.vb: StandardRules.GetPossibleValues(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  name.vb: GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32)
  id: Revert(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.Rules.StandardRules
  langs:
  - csharp
  - vb
  name: Revert(Coordinate, Int32)
  nameWithType: StandardRules.Revert(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/StandardRules.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Revert
    path: ../SudokuSpice/RuleBased/Rules/StandardRules.cs
    startLine: 114
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public void Revert(in Coordinate c, int val)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: val
      type: System.Int32
    content.vb: Public Sub Revert(ByRef c As Coordinate, val As Integer)
  overload: SudokuSpice.RuleBased.Rules.StandardRules.Revert*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  nameWithType.vb: StandardRules.Revert(ByRef Coordinate, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Rules.StandardRules.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  id: Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.StandardRules
  langs:
  - csharp
  - vb
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: StandardRules.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/StandardRules.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Revert
    path: ../SudokuSpice/RuleBased/Rules/StandardRules.cs
    startLine: 122
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public void Revert(in Coordinate c, int val, CoordinateTracker coordTracker)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: val
      type: System.Int32
    - id: coordTracker
      type: SudokuSpice.CoordinateTracker
    content.vb: Public Sub Revert(ByRef c As Coordinate, val As Integer, coordTracker As CoordinateTracker)
  overload: SudokuSpice.RuleBased.Rules.StandardRules.Revert*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  nameWithType.vb: StandardRules.Revert(ByRef Coordinate, Int32, CoordinateTracker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Rules.StandardRules.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  id: Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.StandardRules
  langs:
  - csharp
  - vb
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: StandardRules.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/StandardRules.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Update
    path: ../SudokuSpice/RuleBased/Rules/StandardRules.cs
    startLine: 132
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public void Update(in Coordinate c, int val, CoordinateTracker coordTracker)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: val
      type: System.Int32
    - id: coordTracker
      type: SudokuSpice.CoordinateTracker
    content.vb: Public Sub Update(ByRef c As Coordinate, val As Integer, coordTracker As CoordinateTracker)
  overload: SudokuSpice.RuleBased.Rules.StandardRules.Update*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  nameWithType.vb: StandardRules.Update(ByRef Coordinate, Int32, CoordinateTracker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Rules.StandardRules.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
references:
- uid: SudokuSpice.RuleBased.Rules
  commentId: N:SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingRowValuesTracker
  nameWithType: IMissingRowValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingColumnValuesTracker
  nameWithType: IMissingColumnValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingBoxValuesTracker
  nameWithType: IMissingBoxValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule
  commentId: T:SudokuSpice.RuleBased.Rules.ISudokuRule
  parent: SudokuSpice.RuleBased.Rules
  name: ISudokuRule
  nameWithType: ISudokuRule
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.RuleBased.Rules.StandardRules.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.#ctor
  name: StandardRules
  nameWithType: StandardRules.StandardRules
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.StandardRules
- uid: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference*
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference
  name: CopyWithNewReference
  nameWithType: StandardRules.CopyWithNewReference
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: ISudokuRule.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: ISudokuRule.CopyWithNewReference
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: ISudokuRule.CopyWithNewReference
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzle
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.Rules.StandardRules.TryInit*
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.TryInit
  name: TryInit
  nameWithType: StandardRules.TryInit
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.TryInit
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  name: TryInit(IReadOnlyPuzzle)
  nameWithType: ISudokuRule.TryInit(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: TryInit
    nameWithType: ISudokuRule.TryInit
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: TryInit
    nameWithType: ISudokuRule.TryInit
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow*
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow
  name: GetMissingValuesForRow
  nameWithType: StandardRules.GetMissingValuesForRow
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  isExternal: true
  name: GetMissingValuesForRow(Int32)
  nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow(Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
    name: GetMissingValuesForRow
    nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow
    fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
    name: GetMissingValuesForRow
    nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow
    fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.RuleBased.BitVector
  commentId: T:SudokuSpice.RuleBased.BitVector
  parent: SudokuSpice.RuleBased
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.RuleBased.BitVector
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn*
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn
  name: GetMissingValuesForColumn
  nameWithType: StandardRules.GetMissingValuesForColumn
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  isExternal: true
  name: GetMissingValuesForColumn(Int32)
  nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn(Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
    name: GetMissingValuesForColumn
    nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn
    fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
    name: GetMissingValuesForColumn
    nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn
    fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox*
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox
  name: GetMissingValuesForBox
  nameWithType: StandardRules.GetMissingValuesForBox
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  isExternal: true
  name: GetMissingValuesForBox(Int32)
  nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox(Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
    name: GetMissingValuesForBox
    nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox
    fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
    name: GetMissingValuesForBox
    nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox
    fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues
  name: GetPossibleValues
  nameWithType: StandardRules.GetPossibleValues
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  name: GetPossibleValues(Coordinate)
  nameWithType: ISudokuRule.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: ISudokuRule.GetPossibleValues
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: ISudokuRule.GetPossibleValues
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Revert*
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.Revert
  name: Revert
  nameWithType: StandardRules.Revert
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Revert
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  isExternal: true
  name: Revert(Coordinate, Int32)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate, System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  isExternal: true
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.CoordinateTracker
  commentId: T:SudokuSpice.CoordinateTracker
  parent: SudokuSpice
  name: CoordinateTracker
  nameWithType: CoordinateTracker
  fullName: SudokuSpice.CoordinateTracker
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Update*
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.Update
  name: Update
  nameWithType: StandardRules.Update
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Update
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  isExternal: true
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Update
    nameWithType: ISudokuRule.Update
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Update
    nameWithType: ISudokuRule.Update
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
