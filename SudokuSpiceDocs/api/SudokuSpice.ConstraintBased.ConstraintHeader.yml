### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.ConstraintHeader
  commentId: T:SudokuSpice.ConstraintBased.ConstraintHeader
  id: ConstraintHeader
  parent: SudokuSpice.ConstraintBased
  children:
  - SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader(SudokuSpice.ConstraintBased.ExactCoverMatrix,ReadOnlySpan{SudokuSpice.ConstraintBased.PossibleSquareValue})
  langs:
  - csharp
  - vb
  name: ConstraintHeader
  nameWithType: ConstraintHeader
  fullName: SudokuSpice.ConstraintBased.ConstraintHeader
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/framework/ConstraintHeader.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ConstraintHeader
    path: ../SudokuSpice/ConstraintBased/framework/ConstraintHeader.cs
    startLine: 12
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nRepresents a column from an exact-cover matrix.\n"
  example: []
  syntax:
    content: 'public class ConstraintHeader : object'
    content.vb: >-
      Public Class ConstraintHeader
          Inherits Object
  seealso:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Exact_cover
    altText: Exact cover (Wikipedia)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader(SudokuSpice.ConstraintBased.ExactCoverMatrix,ReadOnlySpan{SudokuSpice.ConstraintBased.PossibleSquareValue})
  commentId: M:SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader(SudokuSpice.ConstraintBased.ExactCoverMatrix,ReadOnlySpan{SudokuSpice.ConstraintBased.PossibleSquareValue})
  id: CreateConnectedHeader(SudokuSpice.ConstraintBased.ExactCoverMatrix,ReadOnlySpan{SudokuSpice.ConstraintBased.PossibleSquareValue})
  parent: SudokuSpice.ConstraintBased.ConstraintHeader
  langs:
  - csharp
  - vb
  name: CreateConnectedHeader(ExactCoverMatrix, ReadOnlySpan<PossibleSquareValue>)
  nameWithType: ConstraintHeader.CreateConnectedHeader(ExactCoverMatrix, ReadOnlySpan<PossibleSquareValue>)
  fullName: SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader(SudokuSpice.ConstraintBased.ExactCoverMatrix, ReadOnlySpan<SudokuSpice.ConstraintBased.PossibleSquareValue>)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/framework/ConstraintHeader.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CreateConnectedHeader
    path: ../SudokuSpice/ConstraintBased/framework/ConstraintHeader.cs
    startLine: 57
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nCreates a fully connected header that can be satisfied by any of the given\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">possibleSquares</code>. Adds and attaches necessary links to connect the\nmatrix.\n"
  example: []
  syntax:
    content: public static ConstraintHeader CreateConnectedHeader(ExactCoverMatrix matrix, ReadOnlySpan<PossibleSquareValue> possibleSquares)
    parameters:
    - id: matrix
      type: SudokuSpice.ConstraintBased.ExactCoverMatrix
      description: That matrix that this header should be attached to.
    - id: possibleSquares
      type: ReadOnlySpan{SudokuSpice.ConstraintBased.PossibleSquareValue}
      description: "\nThe possible square values that would satisfy this header.\n"
    return:
      type: SudokuSpice.ConstraintBased.ConstraintHeader
      description: The newly constructed header.
    content.vb: Public Shared Function CreateConnectedHeader(matrix As ExactCoverMatrix, possibleSquares As ReadOnlySpan(Of PossibleSquareValue)) As ConstraintHeader
  overload: SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader*
  nameWithType.vb: ConstraintHeader.CreateConnectedHeader(ExactCoverMatrix, ReadOnlySpan(Of PossibleSquareValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader(SudokuSpice.ConstraintBased.ExactCoverMatrix, ReadOnlySpan(Of SudokuSpice.ConstraintBased.PossibleSquareValue))
  name.vb: CreateConnectedHeader(ExactCoverMatrix, ReadOnlySpan(Of PossibleSquareValue))
references:
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader*
  commentId: Overload:SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader
  name: CreateConnectedHeader
  nameWithType: ConstraintHeader.CreateConnectedHeader
  fullName: SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix
  parent: SudokuSpice.ConstraintBased
  name: ExactCoverMatrix
  nameWithType: ExactCoverMatrix
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
- uid: ReadOnlySpan{SudokuSpice.ConstraintBased.PossibleSquareValue}
  commentId: '!:ReadOnlySpan{SudokuSpice.ConstraintBased.PossibleSquareValue}'
  definition: ReadOnlySpan`1
  name: ReadOnlySpan<PossibleSquareValue>
  nameWithType: ReadOnlySpan<PossibleSquareValue>
  fullName: ReadOnlySpan<SudokuSpice.ConstraintBased.PossibleSquareValue>
  nameWithType.vb: ReadOnlySpan(Of PossibleSquareValue)
  fullName.vb: ReadOnlySpan(Of SudokuSpice.ConstraintBased.PossibleSquareValue)
  name.vb: ReadOnlySpan(Of PossibleSquareValue)
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.PossibleSquareValue
    name: PossibleSquareValue
    nameWithType: PossibleSquareValue
    fullName: SudokuSpice.ConstraintBased.PossibleSquareValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.PossibleSquareValue
    name: PossibleSquareValue
    nameWithType: PossibleSquareValue
    fullName: SudokuSpice.ConstraintBased.PossibleSquareValue
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ConstraintHeader
  commentId: T:SudokuSpice.ConstraintBased.ConstraintHeader
  parent: SudokuSpice.ConstraintBased
  name: ConstraintHeader
  nameWithType: ConstraintHeader
  fullName: SudokuSpice.ConstraintBased.ConstraintHeader
- uid: ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<>
  nameWithType: ReadOnlySpan<>
  fullName: ReadOnlySpan<>
  nameWithType.vb: ReadOnlySpan(Of )
  fullName.vb: ReadOnlySpan(Of )
  name.vb: ReadOnlySpan(Of )
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
