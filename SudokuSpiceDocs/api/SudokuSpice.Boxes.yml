### YamlMime:ManagedReference
items:
- uid: SudokuSpice.Boxes
  commentId: T:SudokuSpice.Boxes
  id: Boxes
  parent: SudokuSpice
  children:
  - SudokuSpice.Boxes.CalculateBoxIndex(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.Boxes.CalculateBoxSize(System.Int32)
  - SudokuSpice.Boxes.GetStartingBoxCoordinate(System.Int32,System.Int32)
  - SudokuSpice.Boxes.TryCalculateBoxSize(System.Int32,System.Int32@)
  - SudokuSpice.Boxes.YieldUnsetCoordsForBox(System.Int32,System.Int32,SudokuSpice.IReadOnlyPuzzle)
  langs:
  - csharp
  - vb
  name: Boxes
  nameWithType: Boxes
  fullName: SudokuSpice.Boxes
  type: Class
  source:
    remote:
      path: SudokuSpice/Boxes.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Boxes
    path: ../SudokuSpice/Boxes.cs
    startLine: 8
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nProvides utilities for working with &quot;boxes&quot;, i.e. square regions within standard Sudokus.\n"
  example: []
  syntax:
    content: public static class Boxes
    content.vb: Public Module Boxes
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SudokuSpice.Boxes.CalculateBoxSize(System.Int32)
  commentId: M:SudokuSpice.Boxes.CalculateBoxSize(System.Int32)
  id: CalculateBoxSize(System.Int32)
  parent: SudokuSpice.Boxes
  langs:
  - csharp
  - vb
  name: CalculateBoxSize(Int32)
  nameWithType: Boxes.CalculateBoxSize(Int32)
  fullName: SudokuSpice.Boxes.CalculateBoxSize(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/Boxes.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CalculateBoxSize
    path: ../SudokuSpice/Boxes.cs
    startLine: 16
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nCalculates the size of a box within a puzzle (this should be the square root).\n"
  example: []
  syntax:
    content: public static int CalculateBoxSize(int puzzleSize)
    parameters:
    - id: puzzleSize
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Shared Function CalculateBoxSize(puzzleSize As Integer) As Integer
  overload: SudokuSpice.Boxes.CalculateBoxSize*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThrown if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">puzzleSize</code> is not the square of a whole number.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SudokuSpice.Boxes.TryCalculateBoxSize(System.Int32,System.Int32@)
  commentId: M:SudokuSpice.Boxes.TryCalculateBoxSize(System.Int32,System.Int32@)
  id: TryCalculateBoxSize(System.Int32,System.Int32@)
  parent: SudokuSpice.Boxes
  langs:
  - csharp
  - vb
  name: TryCalculateBoxSize(Int32, out Int32)
  nameWithType: Boxes.TryCalculateBoxSize(Int32, out Int32)
  fullName: SudokuSpice.Boxes.TryCalculateBoxSize(System.Int32, out System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/Boxes.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: TryCalculateBoxSize
    path: ../SudokuSpice/Boxes.cs
    startLine: 48
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nCalculates the size of a box within a puzzle (this should be the square root).\n"
  example: []
  syntax:
    content: public static bool TryCalculateBoxSize(int puzzleSize, out int boxSize)
    parameters:
    - id: puzzleSize
      type: System.Int32
      description: The size (i.e. side-length) of the puzzle.
    - id: boxSize
      type: System.Int32
      description: 'Out parameter: the size of the box.'
    return:
      type: System.Boolean
      description: "\nFalse if <code data-dev-comment-type=\"paramref\" class=\"paramref\">puzzleSize</code> is not the square of a whole number.\n"
    content.vb: Public Shared Function TryCalculateBoxSize(puzzleSize As Integer, ByRef boxSize As Integer) As Boolean
  overload: SudokuSpice.Boxes.TryCalculateBoxSize*
  nameWithType.vb: Boxes.TryCalculateBoxSize(Int32, ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.Boxes.TryCalculateBoxSize(System.Int32, ByRef System.Int32)
  name.vb: TryCalculateBoxSize(Int32, ByRef Int32)
- uid: SudokuSpice.Boxes.CalculateBoxIndex(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.Boxes.CalculateBoxIndex(SudokuSpice.Coordinate@,System.Int32)
  id: CalculateBoxIndex(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.Boxes
  langs:
  - csharp
  - vb
  name: CalculateBoxIndex(Coordinate, Int32)
  nameWithType: Boxes.CalculateBoxIndex(Coordinate, Int32)
  fullName: SudokuSpice.Boxes.CalculateBoxIndex(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/Boxes.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CalculateBoxIndex
    path: ../SudokuSpice/Boxes.cs
    startLine: 81
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nCalculate the zero-based box-index of the given coordinate, starting at the top-left.\n"
  example: []
  syntax:
    content: public static int CalculateBoxIndex(in Coordinate c, int boxSize)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: boxSize
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Shared Function CalculateBoxIndex(ByRef c As Coordinate, boxSize As Integer) As Integer
  overload: SudokuSpice.Boxes.CalculateBoxIndex*
  nameWithType.vb: Boxes.CalculateBoxIndex(ByRef Coordinate, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.Boxes.CalculateBoxIndex(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: CalculateBoxIndex(ByRef Coordinate, Int32)
- uid: SudokuSpice.Boxes.GetStartingBoxCoordinate(System.Int32,System.Int32)
  commentId: M:SudokuSpice.Boxes.GetStartingBoxCoordinate(System.Int32,System.Int32)
  id: GetStartingBoxCoordinate(System.Int32,System.Int32)
  parent: SudokuSpice.Boxes
  langs:
  - csharp
  - vb
  name: GetStartingBoxCoordinate(Int32, Int32)
  nameWithType: Boxes.GetStartingBoxCoordinate(Int32, Int32)
  fullName: SudokuSpice.Boxes.GetStartingBoxCoordinate(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/Boxes.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetStartingBoxCoordinate
    path: ../SudokuSpice/Boxes.cs
    startLine: 87
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: Returns the top-left coordinate for the given box.
  example: []
  syntax:
    content: public static Coordinate GetStartingBoxCoordinate(int box, int boxSize)
    parameters:
    - id: box
      type: System.Int32
    - id: boxSize
      type: System.Int32
    return:
      type: SudokuSpice.Coordinate
    content.vb: Public Shared Function GetStartingBoxCoordinate(box As Integer, boxSize As Integer) As Coordinate
  overload: SudokuSpice.Boxes.GetStartingBoxCoordinate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SudokuSpice.Boxes.YieldUnsetCoordsForBox(System.Int32,System.Int32,SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.Boxes.YieldUnsetCoordsForBox(System.Int32,System.Int32,SudokuSpice.IReadOnlyPuzzle)
  id: YieldUnsetCoordsForBox(System.Int32,System.Int32,SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.Boxes
  langs:
  - csharp
  - vb
  name: YieldUnsetCoordsForBox(Int32, Int32, IReadOnlyPuzzle)
  nameWithType: Boxes.YieldUnsetCoordsForBox(Int32, Int32, IReadOnlyPuzzle)
  fullName: SudokuSpice.Boxes.YieldUnsetCoordsForBox(System.Int32, System.Int32, SudokuSpice.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/Boxes.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: YieldUnsetCoordsForBox
    path: ../SudokuSpice/Boxes.cs
    startLine: 95
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nYields an enumerable of coordinates for all the unset squares in the given box.\n"
  example: []
  syntax:
    content: public static IEnumerable<Coordinate> YieldUnsetCoordsForBox(int box, int boxSize, IReadOnlyPuzzle puzzle)
    parameters:
    - id: box
      type: System.Int32
    - id: boxSize
      type: System.Int32
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
    return:
      type: System.Collections.Generic.IEnumerable{SudokuSpice.Coordinate}
    content.vb: Public Shared Function YieldUnsetCoordsForBox(box As Integer, boxSize As Integer, puzzle As IReadOnlyPuzzle) As IEnumerable(Of Coordinate)
  overload: SudokuSpice.Boxes.YieldUnsetCoordsForBox*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: SudokuSpice.Boxes.CalculateBoxSize*
  commentId: Overload:SudokuSpice.Boxes.CalculateBoxSize
  name: CalculateBoxSize
  nameWithType: Boxes.CalculateBoxSize
  fullName: SudokuSpice.Boxes.CalculateBoxSize
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.Boxes.TryCalculateBoxSize*
  commentId: Overload:SudokuSpice.Boxes.TryCalculateBoxSize
  name: TryCalculateBoxSize
  nameWithType: Boxes.TryCalculateBoxSize
  fullName: SudokuSpice.Boxes.TryCalculateBoxSize
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.Boxes.CalculateBoxIndex*
  commentId: Overload:SudokuSpice.Boxes.CalculateBoxIndex
  name: CalculateBoxIndex
  nameWithType: Boxes.CalculateBoxIndex
  fullName: SudokuSpice.Boxes.CalculateBoxIndex
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.Boxes.GetStartingBoxCoordinate*
  commentId: Overload:SudokuSpice.Boxes.GetStartingBoxCoordinate
  name: GetStartingBoxCoordinate
  nameWithType: Boxes.GetStartingBoxCoordinate
  fullName: SudokuSpice.Boxes.GetStartingBoxCoordinate
- uid: SudokuSpice.Boxes.YieldUnsetCoordsForBox*
  commentId: Overload:SudokuSpice.Boxes.YieldUnsetCoordsForBox
  name: YieldUnsetCoordsForBox
  nameWithType: Boxes.YieldUnsetCoordsForBox
  fullName: SudokuSpice.Boxes.YieldUnsetCoordsForBox
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: System.Collections.Generic.IEnumerable{SudokuSpice.Coordinate}
  commentId: T:System.Collections.Generic.IEnumerable{SudokuSpice.Coordinate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Coordinate>
  nameWithType: IEnumerable<Coordinate>
  fullName: System.Collections.Generic.IEnumerable<SudokuSpice.Coordinate>
  nameWithType.vb: IEnumerable(Of Coordinate)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SudokuSpice.Coordinate)
  name.vb: IEnumerable(Of Coordinate)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
