### YamlMime:ManagedReference
items:
- uid: SudokuSpice.IPuzzle
  commentId: T:SudokuSpice.IPuzzle
  id: IPuzzle
  parent: SudokuSpice
  children:
  - SudokuSpice.IPuzzle.DeepCopy
  - SudokuSpice.IPuzzle.Item(SudokuSpice.Coordinate@)
  - SudokuSpice.IPuzzle.Item(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: IPuzzle
  nameWithType: IPuzzle
  fullName: SudokuSpice.IPuzzle
  type: Interface
  source:
    remote:
      path: SudokuSpice/data/IPuzzle.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: IPuzzle
    path: ../SudokuSpice/data/IPuzzle.cs
    startLine: 7
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nProvides read and write access to a Sudoku puzzle.\n"
  example: []
  syntax:
    content: 'public interface IPuzzle : IReadOnlyPuzzle'
    content.vb: >-
      Public Interface IPuzzle
          Inherits IReadOnlyPuzzle
  inheritedMembers:
  - SudokuSpice.IReadOnlyPuzzle.Size
  - SudokuSpice.IReadOnlyPuzzle.NumSquares
  - SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  - SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  - SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  - SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SudokuSpice.IPuzzle.Item(System.Int32,System.Int32)
  commentId: P:SudokuSpice.IPuzzle.Item(System.Int32,System.Int32)
  id: Item(System.Int32,System.Int32)
  parent: SudokuSpice.IPuzzle
  langs:
  - csharp
  - vb
  name: Item[Int32, Int32]
  nameWithType: IPuzzle.Item[Int32, Int32]
  fullName: SudokuSpice.IPuzzle.Item[System.Int32, System.Int32]
  type: Property
  source:
    remote:
      path: SudokuSpice/data/IPuzzle.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: this[]
    path: ../SudokuSpice/data/IPuzzle.cs
    startLine: 13
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nGets or sets the current value of a given square. A square can be &apos;unset&apos; by setting\nits value to <code>null</code>.\n"
  example: []
  syntax:
    content: int? this[int row, int col] { get; set; }
    parameters:
    - id: row
      type: System.Int32
    - id: col
      type: System.Int32
    return:
      type: System.Nullable{System.Int32}
    content.vb: Property Item(row As Integer, col As Integer) As Integer?
  overload: SudokuSpice.IPuzzle.Item*
  nameWithType.vb: IPuzzle.Item(Int32, Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: SudokuSpice.IPuzzle.Item(System.Int32, System.Int32)
  name.vb: Item(Int32, Int32)
- uid: SudokuSpice.IPuzzle.Item(SudokuSpice.Coordinate@)
  commentId: P:SudokuSpice.IPuzzle.Item(SudokuSpice.Coordinate@)
  id: Item(SudokuSpice.Coordinate@)
  parent: SudokuSpice.IPuzzle
  langs:
  - csharp
  - vb
  name: Item[Coordinate]
  nameWithType: IPuzzle.Item[Coordinate]
  fullName: SudokuSpice.IPuzzle.Item[SudokuSpice.Coordinate]
  type: Property
  source:
    remote:
      path: SudokuSpice/data/IPuzzle.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: this[]
    path: ../SudokuSpice/data/IPuzzle.cs
    startLine: 21
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nGets or sets the value of the given square, like <xref href=\"SudokuSpice.IPuzzle.Item(System.Int32%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, but\nusing a <xref href=\"SudokuSpice.Coordinate\" data-throw-if-not-resolved=\"false\"></xref> instead of <xref uid=\"langword_csharp_int\" name=\"int\" href=\"\"></xref> accessors.\n"
  example: []
  syntax:
    content: int? this[in Coordinate c] { get; set; }
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The location of the square to get/set the value of.
    return:
      type: System.Nullable{System.Int32}
      description: The value of the square at <code data-dev-comment-type="paramref" class="paramref">c</code>
    content.vb: Property Item(ByRef c As Coordinate) As Integer?
  overload: SudokuSpice.IPuzzle.Item*
  nameWithType.vb: IPuzzle.Item(ByRef Coordinate)
  modifiers.csharp:
  - get
  - set
  fullName.vb: SudokuSpice.IPuzzle.Item(ByRef SudokuSpice.Coordinate)
  name.vb: Item(ByRef Coordinate)
- uid: SudokuSpice.IPuzzle.DeepCopy
  commentId: M:SudokuSpice.IPuzzle.DeepCopy
  id: DeepCopy
  parent: SudokuSpice.IPuzzle
  langs:
  - csharp
  - vb
  name: DeepCopy()
  nameWithType: IPuzzle.DeepCopy()
  fullName: SudokuSpice.IPuzzle.DeepCopy()
  type: Method
  source:
    remote:
      path: SudokuSpice/data/IPuzzle.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: DeepCopy
    path: ../SudokuSpice/data/IPuzzle.cs
    startLine: 27
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nCreates a deep-copy of this <code>IPuzzle</code>.\n"
  example: []
  syntax:
    content: IPuzzle DeepCopy()
    return:
      type: SudokuSpice.IPuzzle
    content.vb: Function DeepCopy As IPuzzle
  overload: SudokuSpice.IPuzzle.DeepCopy*
references:
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.IReadOnlyPuzzle.Size
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Size
  parent: SudokuSpice.IReadOnlyPuzzle
  name: Size
  nameWithType: IReadOnlyPuzzle.Size
  fullName: SudokuSpice.IReadOnlyPuzzle.Size
- uid: SudokuSpice.IReadOnlyPuzzle.NumSquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumSquares
  parent: SudokuSpice.IReadOnlyPuzzle
  name: NumSquares
  nameWithType: IReadOnlyPuzzle.NumSquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  parent: SudokuSpice.IReadOnlyPuzzle
  name: NumEmptySquares
  nameWithType: IReadOnlyPuzzle.NumEmptySquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  parent: SudokuSpice.IReadOnlyPuzzle
  name: NumSetSquares
  nameWithType: IReadOnlyPuzzle.NumSetSquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSetSquares
- uid: SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  commentId: P:SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  parent: SudokuSpice.IReadOnlyPuzzle
  name: AllPossibleValuesSpan
  nameWithType: IReadOnlyPuzzle.AllPossibleValuesSpan
  fullName: SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
- uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  commentId: M:SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  parent: SudokuSpice.IReadOnlyPuzzle
  name: GetUnsetCoords()
  nameWithType: IReadOnlyPuzzle.GetUnsetCoords()
  fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords()
  spec.csharp:
  - uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
    name: GetUnsetCoords
    nameWithType: IReadOnlyPuzzle.GetUnsetCoords
    fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
    name: GetUnsetCoords
    nameWithType: IReadOnlyPuzzle.GetUnsetCoords
    fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice.IPuzzle.Item*
  commentId: Overload:SudokuSpice.IPuzzle.Item
  name: Item
  nameWithType: IPuzzle.Item
  fullName: SudokuSpice.IPuzzle.Item
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IPuzzle.Item(System.Int32,System.Int32)
  commentId: P:SudokuSpice.IPuzzle.Item(System.Int32,System.Int32)
  parent: SudokuSpice.IPuzzle
  isExternal: true
  name: Item[Int32, Int32]
  nameWithType: IPuzzle.Item[Int32, Int32]
  fullName: SudokuSpice.IPuzzle.Item[System.Int32, System.Int32]
  nameWithType.vb: IPuzzle.Item(Int32, Int32)
  fullName.vb: SudokuSpice.IPuzzle.Item(System.Int32, System.Int32)
  name.vb: Item(Int32, Int32)
  spec.csharp:
  - uid: SudokuSpice.IPuzzle.Item(System.Int32,System.Int32)
    name: Item
    nameWithType: IPuzzle.Item
    fullName: SudokuSpice.IPuzzle.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: SudokuSpice.IPuzzle.Item(System.Int32,System.Int32)
    name: Item
    nameWithType: IPuzzle.Item
    fullName: SudokuSpice.IPuzzle.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.IPuzzle
  commentId: T:SudokuSpice.IPuzzle
  parent: SudokuSpice
  name: IPuzzle
  nameWithType: IPuzzle
  fullName: SudokuSpice.IPuzzle
- uid: SudokuSpice.IPuzzle.DeepCopy*
  commentId: Overload:SudokuSpice.IPuzzle.DeepCopy
  name: DeepCopy
  nameWithType: IPuzzle.DeepCopy
  fullName: SudokuSpice.IPuzzle.DeepCopy
