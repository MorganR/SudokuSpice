### YamlMime:ManagedReference
items:
- uid: SudokuSpice.Square
  commentId: T:SudokuSpice.Square
  id: Square
  parent: SudokuSpice
  children:
  - SudokuSpice.Square.#ctor(SudokuSpice.Coordinate,System.Int32)
  - SudokuSpice.Square.Contains(SudokuSpice.Coordinate@)
  - SudokuSpice.Square.Size
  - SudokuSpice.Square.TopLeft
  langs:
  - csharp
  - vb
  name: Square
  nameWithType: Square
  fullName: SudokuSpice.Square
  type: Struct
  source:
    remote:
      path: SudokuSpice/Square.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Square
    path: ../SudokuSpice/Square.cs
    startLine: 2
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public struct Square
    content.vb: Public Structure Square
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: SudokuSpice.Square.TopLeft
  commentId: P:SudokuSpice.Square.TopLeft
  id: TopLeft
  parent: SudokuSpice.Square
  langs:
  - csharp
  - vb
  name: TopLeft
  nameWithType: Square.TopLeft
  fullName: SudokuSpice.Square.TopLeft
  type: Property
  source:
    remote:
      path: SudokuSpice/Square.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TopLeft
    path: ../SudokuSpice/Square.cs
    startLine: 4
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public Coordinate TopLeft { get; }
    parameters: []
    return:
      type: SudokuSpice.Coordinate
    content.vb: Public ReadOnly Property TopLeft As Coordinate
  overload: SudokuSpice.Square.TopLeft*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.Square.Size
  commentId: P:SudokuSpice.Square.Size
  id: Size
  parent: SudokuSpice.Square
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: Square.Size
  fullName: SudokuSpice.Square.Size
  type: Property
  source:
    remote:
      path: SudokuSpice/Square.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Size
    path: ../SudokuSpice/Square.cs
    startLine: 5
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public int Size { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Size As Integer
  overload: SudokuSpice.Square.Size*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.Square.#ctor(SudokuSpice.Coordinate,System.Int32)
  commentId: M:SudokuSpice.Square.#ctor(SudokuSpice.Coordinate,System.Int32)
  id: '#ctor(SudokuSpice.Coordinate,System.Int32)'
  parent: SudokuSpice.Square
  langs:
  - csharp
  - vb
  name: Square(Coordinate, Int32)
  nameWithType: Square.Square(Coordinate, Int32)
  fullName: SudokuSpice.Square.Square(SudokuSpice.Coordinate, System.Int32)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/Square.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/Square.cs
    startLine: 7
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public Square(Coordinate topLeft, int size)
    parameters:
    - id: topLeft
      type: SudokuSpice.Coordinate
    - id: size
      type: System.Int32
    content.vb: Public Sub New(topLeft As Coordinate, size As Integer)
  overload: SudokuSpice.Square.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.Square.Contains(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.Square.Contains(SudokuSpice.Coordinate@)
  id: Contains(SudokuSpice.Coordinate@)
  parent: SudokuSpice.Square
  langs:
  - csharp
  - vb
  name: Contains(Coordinate)
  nameWithType: Square.Contains(Coordinate)
  fullName: SudokuSpice.Square.Contains(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/Square.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Contains
    path: ../SudokuSpice/Square.cs
    startLine: 13
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public bool Contains(in Coordinate coord)
    parameters:
    - id: coord
      type: SudokuSpice.Coordinate
    return:
      type: System.Boolean
    content.vb: Public Function Contains(ByRef coord As Coordinate) As Boolean
  overload: SudokuSpice.Square.Contains*
  nameWithType.vb: Square.Contains(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.Square.Contains(ByRef SudokuSpice.Coordinate)
  name.vb: Contains(ByRef Coordinate)
references:
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.Square.TopLeft*
  commentId: Overload:SudokuSpice.Square.TopLeft
  name: TopLeft
  nameWithType: Square.TopLeft
  fullName: SudokuSpice.Square.TopLeft
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.Square.Size*
  commentId: Overload:SudokuSpice.Square.Size
  name: Size
  nameWithType: Square.Size
  fullName: SudokuSpice.Square.Size
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.Square.#ctor*
  commentId: Overload:SudokuSpice.Square.#ctor
  name: Square
  nameWithType: Square.Square
  fullName: SudokuSpice.Square.Square
- uid: SudokuSpice.Square.Contains*
  commentId: Overload:SudokuSpice.Square.Contains
  name: Contains
  nameWithType: Square.Contains
  fullName: SudokuSpice.Square.Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
