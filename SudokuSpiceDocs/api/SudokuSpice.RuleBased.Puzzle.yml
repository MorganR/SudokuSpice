### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.Puzzle
  commentId: T:SudokuSpice.RuleBased.Puzzle
  id: Puzzle
  parent: SudokuSpice.RuleBased
  children:
  - SudokuSpice.RuleBased.Puzzle.#ctor(SudokuSpice.RuleBased.Puzzle)
  - SudokuSpice.RuleBased.Puzzle.#ctor(System.Nullable{System.Int32}[0:,0:])
  - SudokuSpice.RuleBased.Puzzle.AllPossibleValues
  - SudokuSpice.RuleBased.Puzzle.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  - SudokuSpice.RuleBased.Puzzle.GetPossibleValues(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.Puzzle.GetUnsetCoords
  - SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  - SudokuSpice.RuleBased.Puzzle.Item(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.Puzzle.Item(System.Int32,System.Int32)
  - SudokuSpice.RuleBased.Puzzle.NumEmptySquares
  - SudokuSpice.RuleBased.Puzzle.NumSetSquares
  - SudokuSpice.RuleBased.Puzzle.NumSquares
  - SudokuSpice.RuleBased.Puzzle.ResetPossibleValues(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.Puzzle.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  - SudokuSpice.RuleBased.Puzzle.Size
  - SudokuSpice.RuleBased.Puzzle.ToString
  langs:
  - csharp
  - vb
  name: Puzzle
  nameWithType: Puzzle
  fullName: SudokuSpice.RuleBased.Puzzle
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Puzzle
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 10
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: Manages underlying puzzle data.
  example: []
  syntax:
    content: 'public class Puzzle : object, IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyPuzzle'
    content.vb: >-
      Public Class Puzzle
          Inherits Object
          Implements IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyPuzzle
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - SudokuSpice.RuleBased.IReadOnlyPuzzle
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.Puzzle.Size
  commentId: P:SudokuSpice.RuleBased.Puzzle.Size
  id: Size
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: Puzzle.Size
  fullName: SudokuSpice.RuleBased.Puzzle.Size
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Size
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 17
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nProvides read-only access to a puzzle&apos;s data.\n"
  example: []
  syntax:
    content: public int Size { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Size As Integer
  overload: SudokuSpice.RuleBased.Puzzle.Size*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzle.Size
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.Puzzle.NumSquares
  commentId: P:SudokuSpice.RuleBased.Puzzle.NumSquares
  id: NumSquares
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: NumSquares
  nameWithType: Puzzle.NumSquares
  fullName: SudokuSpice.RuleBased.Puzzle.NumSquares
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: NumSquares
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 19
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nProvides read-only access to a puzzle&apos;s data.\n"
  example: []
  syntax:
    content: public int NumSquares { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumSquares As Integer
  overload: SudokuSpice.RuleBased.Puzzle.NumSquares*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSquares
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.Puzzle.NumEmptySquares
  commentId: P:SudokuSpice.RuleBased.Puzzle.NumEmptySquares
  id: NumEmptySquares
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: NumEmptySquares
  nameWithType: Puzzle.NumEmptySquares
  fullName: SudokuSpice.RuleBased.Puzzle.NumEmptySquares
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: NumEmptySquares
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 21
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nProvides read-only access to a puzzle&apos;s data.\n"
  example: []
  syntax:
    content: public int NumEmptySquares { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumEmptySquares As Integer
  overload: SudokuSpice.RuleBased.Puzzle.NumEmptySquares*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzle.NumEmptySquares
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.Puzzle.NumSetSquares
  commentId: P:SudokuSpice.RuleBased.Puzzle.NumSetSquares
  id: NumSetSquares
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: NumSetSquares
  nameWithType: Puzzle.NumSetSquares
  fullName: SudokuSpice.RuleBased.Puzzle.NumSetSquares
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: NumSetSquares
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 23
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nProvides read-only access to a puzzle&apos;s data.\n"
  example: []
  syntax:
    content: public int NumSetSquares { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumSetSquares As Integer
  overload: SudokuSpice.RuleBased.Puzzle.NumSetSquares*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSetSquares
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.Puzzle.AllPossibleValues
  commentId: P:SudokuSpice.RuleBased.Puzzle.AllPossibleValues
  id: AllPossibleValues
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: AllPossibleValues
  nameWithType: Puzzle.AllPossibleValues
  fullName: SudokuSpice.RuleBased.Puzzle.AllPossibleValues
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: AllPossibleValues
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 25
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nProvides read-only access to a puzzle&apos;s data.\n"
  example: []
  syntax:
    content: public BitVector AllPossibleValues { get; }
    parameters: []
    return:
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public ReadOnly Property AllPossibleValues As BitVector
  overload: SudokuSpice.RuleBased.Puzzle.AllPossibleValues*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzle.AllPossibleValues
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.RuleBased.Puzzle.#ctor(System.Nullable{System.Int32}[0:,0:])
  commentId: M:SudokuSpice.RuleBased.Puzzle.#ctor(System.Nullable{System.Int32}[0:,0:])
  id: '#ctor(System.Nullable{System.Int32}[0:,0:])'
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: Puzzle(Nullable<Int32>[,])
  nameWithType: Puzzle.Puzzle(Nullable<Int32>[,])
  fullName: SudokuSpice.RuleBased.Puzzle.Puzzle(System.Nullable<System.Int32>[,])
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 34
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nConstructs a new puzzle backed by the given matrix.\n"
  example: []
  syntax:
    content: public Puzzle(int? [, ] puzzleMatrix)
    parameters:
    - id: puzzleMatrix
      type: System.Nullable{System.Int32}[,]
      description: "\nThe data for this Sudoku puzzle. Preset squares should be set, and unset squares should\nbe null. Changes to this <code>Puzzle</code> will be reflected in this matrix.\n"
    content.vb: Public Sub New(puzzleMatrix As Integer?(,))
  overload: SudokuSpice.RuleBased.Puzzle.#ctor*
  nameWithType.vb: Puzzle.Puzzle(Nullable(Of Int32)(,))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Puzzle.Puzzle(System.Nullable(Of System.Int32)(,))
  name.vb: Puzzle(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.Puzzle.#ctor(SudokuSpice.RuleBased.Puzzle)
  commentId: M:SudokuSpice.RuleBased.Puzzle.#ctor(SudokuSpice.RuleBased.Puzzle)
  id: '#ctor(SudokuSpice.RuleBased.Puzzle)'
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: Puzzle(Puzzle)
  nameWithType: Puzzle.Puzzle(Puzzle)
  fullName: SudokuSpice.RuleBased.Puzzle.Puzzle(SudokuSpice.RuleBased.Puzzle)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 63
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nA copy constructor for an existing <code>Puzzle</code>.\n"
  example: []
  syntax:
    content: public Puzzle(Puzzle existing)
    parameters:
    - id: existing
      type: SudokuSpice.RuleBased.Puzzle
    content.vb: Public Sub New(existing As Puzzle)
  overload: SudokuSpice.RuleBased.Puzzle.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Puzzle.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  commentId: M:SudokuSpice.RuleBased.Puzzle.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  id: CopyFrom(System.Nullable{System.Int32}[0:,0:])
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: CopyFrom(Nullable<Int32>[,])
  nameWithType: Puzzle.CopyFrom(Nullable<Int32>[,])
  fullName: SudokuSpice.RuleBased.Puzzle.CopyFrom(System.Nullable<System.Int32>[,])
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CopyFrom
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 72
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public static Puzzle CopyFrom(int? [, ] matrix)
    parameters:
    - id: matrix
      type: System.Nullable{System.Int32}[,]
    return:
      type: SudokuSpice.RuleBased.Puzzle
    content.vb: Public Shared Function CopyFrom(matrix As Integer?(,)) As Puzzle
  overload: SudokuSpice.RuleBased.Puzzle.CopyFrom*
  nameWithType.vb: Puzzle.CopyFrom(Nullable(Of Int32)(,))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.RuleBased.Puzzle.CopyFrom(System.Nullable(Of System.Int32)(,))
  name.vb: CopyFrom(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.Puzzle.Item(System.Int32,System.Int32)
  commentId: P:SudokuSpice.RuleBased.Puzzle.Item(System.Int32,System.Int32)
  id: Item(System.Int32,System.Int32)
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: Item[Int32, Int32]
  nameWithType: Puzzle.Item[Int32, Int32]
  fullName: SudokuSpice.RuleBased.Puzzle.Item[System.Int32, System.Int32]
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: this[]
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 81
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGets or sets the current value of a given square. A square can be &apos;unset&apos; by setting\nits value to <code>null</code>.\n"
  example: []
  syntax:
    content: public int? this[int row, int col] { get; set; }
    parameters:
    - id: row
      type: System.Int32
    - id: col
      type: System.Int32
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property Item(row As Integer, col As Integer) As Integer?
  overload: SudokuSpice.RuleBased.Puzzle.Item*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  nameWithType.vb: Puzzle.Item(Int32, Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Puzzle.Item(System.Int32, System.Int32)
  name.vb: Item(Int32, Int32)
- uid: SudokuSpice.RuleBased.Puzzle.Item(SudokuSpice.Coordinate@)
  commentId: P:SudokuSpice.RuleBased.Puzzle.Item(SudokuSpice.Coordinate@)
  id: Item(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: Item[Coordinate]
  nameWithType: Puzzle.Item[Coordinate]
  fullName: SudokuSpice.RuleBased.Puzzle.Item[SudokuSpice.Coordinate]
  type: Property
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: this[]
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 101
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGets or sets the value of the given square, like <xref href=\"SudokuSpice.RuleBased.Puzzle.Item(System.Int32%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, but\nusing a <xref href=\"SudokuSpice.Coordinate\" data-throw-if-not-resolved=\"false\"></xref> instead of <xref uid=\"langword_csharp_int\" name=\"int\" href=\"\"></xref> accessors.\n"
  example: []
  syntax:
    content: public int? this[in Coordinate c] { get; set; }
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The location of the square to get/set the value of.
    return:
      type: System.Nullable{System.Int32}
      description: The value of the square at <code data-dev-comment-type="paramref" class="paramref">c</code>
    content.vb: Public Property Item(ByRef c As Coordinate) As Integer?
  overload: SudokuSpice.RuleBased.Puzzle.Item*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  nameWithType.vb: Puzzle.Item(ByRef Coordinate)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Puzzle.Item(ByRef SudokuSpice.Coordinate)
  name.vb: Item(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Puzzle.GetUnsetCoords
  commentId: M:SudokuSpice.RuleBased.Puzzle.GetUnsetCoords
  id: GetUnsetCoords
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: GetUnsetCoords()
  nameWithType: Puzzle.GetUnsetCoords()
  fullName: SudokuSpice.RuleBased.Puzzle.GetUnsetCoords()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetUnsetCoords
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 110
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: Gets a span of coordinates for all the unset squares.
  example: []
  syntax:
    content: public ReadOnlySpan<Coordinate> GetUnsetCoords()
    return:
      type: ReadOnlySpan{SudokuSpice.Coordinate}
    content.vb: Public Function GetUnsetCoords As ReadOnlySpan(Of Coordinate)
  overload: SudokuSpice.RuleBased.Puzzle.GetUnsetCoords*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Puzzle.ToString
  commentId: M:SudokuSpice.RuleBased.Puzzle.ToString
  id: ToString
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Puzzle.ToString()
  fullName: SudokuSpice.RuleBased.Puzzle.ToString()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ToString
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 116
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nReturns the puzzle in a pretty string format, with boxes and rows separated by pipes\nand dashes.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: SudokuSpice.RuleBased.Puzzle.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  commentId: M:SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  id: IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: IntersectPossibleValues(Coordinate, BitVector)
  nameWithType: Puzzle.IntersectPossibleValues(Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues(SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: IntersectPossibleValues
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 192
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public void IntersectPossibleValues(in Coordinate c, BitVector possibleValues)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: possibleValues
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public Sub IntersectPossibleValues(ByRef c As Coordinate, possibleValues As BitVector)
  overload: SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  nameWithType.vb: Puzzle.IntersectPossibleValues(ByRef Coordinate, BitVector)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues(ByRef SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  name.vb: IntersectPossibleValues(ByRef Coordinate, BitVector)
- uid: SudokuSpice.RuleBased.Puzzle.ResetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.Puzzle.ResetPossibleValues(SudokuSpice.Coordinate@)
  id: ResetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: ResetPossibleValues(Coordinate)
  nameWithType: Puzzle.ResetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.Puzzle.ResetPossibleValues(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ResetPossibleValues
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 194
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public void ResetPossibleValues(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    content.vb: Public Sub ResetPossibleValues(ByRef c As Coordinate)
  overload: SudokuSpice.RuleBased.Puzzle.ResetPossibleValues*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  nameWithType.vb: Puzzle.ResetPossibleValues(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Puzzle.ResetPossibleValues(ByRef SudokuSpice.Coordinate)
  name.vb: ResetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Puzzle.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.Puzzle.GetPossibleValues(SudokuSpice.Coordinate@)
  id: GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: GetPossibleValues(Coordinate)
  nameWithType: Puzzle.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.Puzzle.GetPossibleValues(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetPossibleValues
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 195
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public BitVector GetPossibleValues(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    return:
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public Function GetPossibleValues(ByRef c As Coordinate) As BitVector
  overload: SudokuSpice.RuleBased.Puzzle.GetPossibleValues*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues(SudokuSpice.Coordinate@)
  nameWithType.vb: Puzzle.GetPossibleValues(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Puzzle.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  name.vb: GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Puzzle.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  commentId: M:SudokuSpice.RuleBased.Puzzle.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  id: SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  parent: SudokuSpice.RuleBased.Puzzle
  langs:
  - csharp
  - vb
  name: SetPossibleValues(Coordinate, BitVector)
  nameWithType: Puzzle.SetPossibleValues(Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.Puzzle.SetPossibleValues(SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Puzzle.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: SetPossibleValues
    path: ../SudokuSpice/RuleBased/Puzzle.cs
    startLine: 196
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public void SetPossibleValues(in Coordinate c, BitVector possibleValues)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: possibleValues
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public Sub SetPossibleValues(ByRef c As Coordinate, possibleValues As BitVector)
  overload: SudokuSpice.RuleBased.Puzzle.SetPossibleValues*
  implements:
  - SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  nameWithType.vb: Puzzle.SetPossibleValues(ByRef Coordinate, BitVector)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Puzzle.SetPossibleValues(ByRef SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  name.vb: SetPossibleValues(ByRef Coordinate, BitVector)
references:
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzleWithMutablePossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzle
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
- uid: SudokuSpice.RuleBased.Puzzle.Size*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.Size
  name: Size
  nameWithType: Puzzle.Size
  fullName: SudokuSpice.RuleBased.Puzzle.Size
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.Size
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.Size
  parent: SudokuSpice.RuleBased.IReadOnlyPuzzle
  name: Size
  nameWithType: IReadOnlyPuzzle.Size
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.Size
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.RuleBased.Puzzle.NumSquares*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.NumSquares
  name: NumSquares
  nameWithType: Puzzle.NumSquares
  fullName: SudokuSpice.RuleBased.Puzzle.NumSquares
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSquares
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSquares
  parent: SudokuSpice.RuleBased.IReadOnlyPuzzle
  name: NumSquares
  nameWithType: IReadOnlyPuzzle.NumSquares
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSquares
- uid: SudokuSpice.RuleBased.Puzzle.NumEmptySquares*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.NumEmptySquares
  name: NumEmptySquares
  nameWithType: Puzzle.NumEmptySquares
  fullName: SudokuSpice.RuleBased.Puzzle.NumEmptySquares
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumEmptySquares
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.NumEmptySquares
  parent: SudokuSpice.RuleBased.IReadOnlyPuzzle
  name: NumEmptySquares
  nameWithType: IReadOnlyPuzzle.NumEmptySquares
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumEmptySquares
- uid: SudokuSpice.RuleBased.Puzzle.NumSetSquares*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.NumSetSquares
  name: NumSetSquares
  nameWithType: Puzzle.NumSetSquares
  fullName: SudokuSpice.RuleBased.Puzzle.NumSetSquares
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSetSquares
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSetSquares
  parent: SudokuSpice.RuleBased.IReadOnlyPuzzle
  name: NumSetSquares
  nameWithType: IReadOnlyPuzzle.NumSetSquares
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSetSquares
- uid: SudokuSpice.RuleBased.Puzzle.AllPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.AllPossibleValues
  name: AllPossibleValues
  nameWithType: Puzzle.AllPossibleValues
  fullName: SudokuSpice.RuleBased.Puzzle.AllPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.AllPossibleValues
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.AllPossibleValues
  parent: SudokuSpice.RuleBased.IReadOnlyPuzzle
  name: AllPossibleValues
  nameWithType: IReadOnlyPuzzle.AllPossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.AllPossibleValues
- uid: SudokuSpice.RuleBased.BitVector
  commentId: T:SudokuSpice.RuleBased.BitVector
  parent: SudokuSpice.RuleBased
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.RuleBased.BitVector
- uid: SudokuSpice.RuleBased.Puzzle.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.#ctor
  name: Puzzle
  nameWithType: Puzzle.Puzzle
  fullName: SudokuSpice.RuleBased.Puzzle.Puzzle
- uid: System.Nullable{System.Int32}[,]
  isExternal: true
  name: Nullable<Int32>[,]
  nameWithType: Nullable<Int32>[,]
  fullName: System.Nullable<System.Int32>[,]
  nameWithType.vb: Nullable(Of Int32)(,)
  fullName.vb: System.Nullable(Of System.Int32)(,)
  name.vb: Nullable(Of Int32)(,)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: (,)
    nameWithType: (,)
    fullName: (,)
- uid: SudokuSpice.RuleBased.Puzzle
  commentId: T:SudokuSpice.RuleBased.Puzzle
  parent: SudokuSpice.RuleBased
  name: Puzzle
  nameWithType: Puzzle
  fullName: SudokuSpice.RuleBased.Puzzle
- uid: SudokuSpice.RuleBased.Puzzle.CopyFrom*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.CopyFrom
  name: CopyFrom
  nameWithType: Puzzle.CopyFrom
  fullName: SudokuSpice.RuleBased.Puzzle.CopyFrom
- uid: SudokuSpice.RuleBased.Puzzle.Item*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.Item
  name: Item
  nameWithType: Puzzle.Item
  fullName: SudokuSpice.RuleBased.Puzzle.Item
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  parent: SudokuSpice.RuleBased.IReadOnlyPuzzle
  isExternal: true
  name: Item[Int32, Int32]
  nameWithType: IReadOnlyPuzzle.Item[Int32, Int32]
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item[System.Int32, System.Int32]
  nameWithType.vb: IReadOnlyPuzzle.Item(Int32, Int32)
  fullName.vb: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(System.Int32, System.Int32)
  name.vb: Item(Int32, Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
    name: Item
    nameWithType: IReadOnlyPuzzle.Item
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
    name: Item
    nameWithType: IReadOnlyPuzzle.Item
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Puzzle.Item(System.Int32,System.Int32)
  commentId: P:SudokuSpice.RuleBased.Puzzle.Item(System.Int32,System.Int32)
  isExternal: true
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.IReadOnlyPuzzle
  name: Item[Coordinate]
  nameWithType: IReadOnlyPuzzle.Item[Coordinate]
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item[SudokuSpice.Coordinate]
  nameWithType.vb: IReadOnlyPuzzle.Item(Coordinate)
  fullName.vb: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate)
  name.vb: Item(Coordinate)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
    name: Item
    nameWithType: IReadOnlyPuzzle.Item
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
    name: Item
    nameWithType: IReadOnlyPuzzle.Item
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.RuleBased.Puzzle.GetUnsetCoords*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.GetUnsetCoords
  name: GetUnsetCoords
  nameWithType: Puzzle.GetUnsetCoords
  fullName: SudokuSpice.RuleBased.Puzzle.GetUnsetCoords
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords
  commentId: M:SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords
  parent: SudokuSpice.RuleBased.IReadOnlyPuzzle
  name: GetUnsetCoords()
  nameWithType: IReadOnlyPuzzle.GetUnsetCoords()
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords
    name: GetUnsetCoords
    nameWithType: IReadOnlyPuzzle.GetUnsetCoords
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords
    name: GetUnsetCoords
    nameWithType: IReadOnlyPuzzle.GetUnsetCoords
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ReadOnlySpan{SudokuSpice.Coordinate}
  commentId: '!:ReadOnlySpan{SudokuSpice.Coordinate}'
  definition: ReadOnlySpan`1
  name: ReadOnlySpan<Coordinate>
  nameWithType: ReadOnlySpan<Coordinate>
  fullName: ReadOnlySpan<SudokuSpice.Coordinate>
  nameWithType.vb: ReadOnlySpan(Of Coordinate)
  fullName.vb: ReadOnlySpan(Of SudokuSpice.Coordinate)
  name.vb: ReadOnlySpan(Of Coordinate)
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<>
  nameWithType: ReadOnlySpan<>
  fullName: ReadOnlySpan<>
  nameWithType.vb: ReadOnlySpan(Of )
  fullName.vb: ReadOnlySpan(Of )
  name.vb: ReadOnlySpan(Of )
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Puzzle.ToString*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.ToString
  name: ToString
  nameWithType: Puzzle.ToString
  fullName: SudokuSpice.RuleBased.Puzzle.ToString
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues
  name: IntersectPossibleValues
  nameWithType: Puzzle.IntersectPossibleValues
  fullName: SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  commentId: M:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  parent: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  name: IntersectPossibleValues(Coordinate, BitVector)
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
    name: IntersectPossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.RuleBased.BitVector
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
    name: IntersectPossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.RuleBased.BitVector
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Puzzle.ResetPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.ResetPossibleValues
  name: ResetPossibleValues
  nameWithType: Puzzle.ResetPossibleValues
  fullName: SudokuSpice.RuleBased.Puzzle.ResetPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  name: ResetPossibleValues(Coordinate)
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(SudokuSpice.Coordinate)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
    name: ResetPossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
    name: ResetPossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Puzzle.GetPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.GetPossibleValues
  name: GetPossibleValues
  nameWithType: Puzzle.GetPossibleValues
  fullName: SudokuSpice.RuleBased.Puzzle.GetPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.IReadOnlyPuzzle
  name: GetPossibleValues(Coordinate)
  nameWithType: IReadOnlyPuzzle.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues(SudokuSpice.Coordinate)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: IReadOnlyPuzzle.GetPossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: IReadOnlyPuzzle.GetPossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Puzzle.SetPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.SetPossibleValues
  name: SetPossibleValues
  nameWithType: Puzzle.SetPossibleValues
  fullName: SudokuSpice.RuleBased.Puzzle.SetPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  commentId: M:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  parent: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  name: SetPossibleValues(Coordinate, BitVector)
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
    name: SetPossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.RuleBased.BitVector
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
    name: SetPossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.BitVector
    name: BitVector
    nameWithType: BitVector
    fullName: SudokuSpice.RuleBased.BitVector
  - name: )
    nameWithType: )
    fullName: )
