### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.StandardRuleKeeper
  commentId: T:SudokuSpice.RuleBased.StandardRuleKeeper
  id: StandardRuleKeeper
  parent: SudokuSpice.RuleBased
  children:
  - SudokuSpice.RuleBased.StandardRuleKeeper.#ctor
  - SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  - SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  - SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  - SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  - SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  - SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  - SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  - SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  - SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  - SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  langs:
  - csharp
  - vb
  name: StandardRuleKeeper
  nameWithType: StandardRuleKeeper
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: StandardRuleKeeper
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 10
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nEnforces the standard rules: uniqueness in each row, column, and box.\n"
  example: []
  syntax:
    content: 'public class StandardRuleKeeper : object, ISudokuRuleKeeper, IMissingRowValuesTracker, IMissingColumnValuesTracker, IMissingBoxValuesTracker, ISudokuRule'
    content.vb: >-
      Public Class StandardRuleKeeper
          Inherits Object
          Implements ISudokuRuleKeeper, IMissingRowValuesTracker, IMissingColumnValuesTracker, IMissingBoxValuesTracker, ISudokuRule
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper
  - SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  - SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  - SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  - SudokuSpice.RuleBased.Rules.ISudokuRule
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.#ctor
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.#ctor
  id: '#ctor'
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: StandardRuleKeeper()
  nameWithType: StandardRuleKeeper.StandardRuleKeeper()
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.StandardRuleKeeper()
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 24
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nConstructs rule keeper that enforces standard Sudoku rules.\n"
  example: []
  syntax:
    content: public StandardRuleKeeper()
    content.vb: Public Sub New
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  id: TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: StandardRuleKeeper.TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TryInit
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 27
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nTries to initialize this rule keeper to solve the given puzzle.\n\nWhen reusing a rule keeper to solve multiple puzzles, this must be called with each new\npuzzle to be solved.\n"
  remarks: "\nIn general, it doesn&apos;t make sense to want to maintain the previous state if this method\nfails. Therefore, it is <em>not</em> guaranteed that the rule keeper&apos;s state is\nunchanged on failure.\n"
  example: []
  syntax:
    content: public bool TryInit(IReadOnlyPuzzleWithMutablePossibleValues puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
      description: The puzzle to be solved.
    return:
      type: System.Boolean
      description: "\nFalse if the rule keeper couldn&apos;t be initialized, for example if the puzzle already\nviolates one of the rules. Else returns true.\n"
    content.vb: Public Function TryInit(puzzle As IReadOnlyPuzzleWithMutablePossibleValues) As Boolean
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  id: CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: StandardRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CopyWithNewReferences
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 88
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nCreates a deep copy of this rule keeper, including copies of any\n<xref href=\"SudokuSpice.RuleBased.Rules.ISudokuRule\" data-throw-if-not-resolved=\"false\"></xref>s it contains, with updated internal\n<xref href=\"SudokuSpice.RuleBased.IReadOnlyPuzzle\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"SudokuSpice.RuleBased.PossibleValues\" data-throw-if-not-resolved=\"false\"></xref> references.\n"
  example: []
  syntax:
    content: public ISudokuRuleKeeper CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
      description: "\nThe new puzzle reference. Should contain the same data as the current puzzle instance.\n"
    return:
      type: SudokuSpice.RuleBased.ISudokuRuleKeeper
    content.vb: Public Function CopyWithNewReferences(puzzle As IReadOnlyPuzzleWithMutablePossibleValues) As ISudokuRuleKeeper
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  id: TrySet(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: TrySet(Coordinate, Int32)
  nameWithType: StandardRuleKeeper.TrySet(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TrySet
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 97
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nUpdates possible values based on setting the given coordinate to the given value. If\nthis update fails (i.e. it leads to an unset square with no possible values), then it\nreturns false and leaves the possible values unchanged.\n"
  example: []
  syntax:
    content: public bool TrySet(in Coordinate c, int value)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The coordinate to update.
    - id: value
      type: System.Int32
      description: The value to set <code>c</code> to.
    return:
      type: System.Boolean
      description: "\nTrue if the possible values have been updated and the rules are still satisfied.\n"
    content.vb: Public Function TrySet(ByRef c As Coordinate, value As Integer) As Boolean
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  nameWithType.vb: StandardRuleKeeper.TrySet(ByRef Coordinate, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: TrySet(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  id: GetRules
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: GetRules()
  nameWithType: StandardRuleKeeper.GetRules()
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetRules
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 181
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nGets the <xref href=\"SudokuSpice.RuleBased.Rules.ISudokuRule\" data-throw-if-not-resolved=\"false\"></xref>s enforced by this rule keeper.\n"
  example: []
  syntax:
    content: public IReadOnlyList<ISudokuRule> GetRules()
    return:
      type: IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
    content.vb: Public Function GetRules As IReadOnlyList(Of ISudokuRule)
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  id: GetMissingValuesForRow(System.Int32)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: GetMissingValuesForRow(Int32)
  nameWithType: StandardRuleKeeper.GetMissingValuesForRow(Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetMissingValuesForRow
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 184
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: Returns all the values that still need to be set in the given row.
  example: []
  syntax:
    content: public BitVector GetMissingValuesForRow(int row)
    parameters:
    - id: row
      type: System.Int32
    return:
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public Function GetMissingValuesForRow(row As Integer) As BitVector
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow*
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  id: GetMissingValuesForColumn(System.Int32)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: GetMissingValuesForColumn(Int32)
  nameWithType: StandardRuleKeeper.GetMissingValuesForColumn(Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetMissingValuesForColumn
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 187
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nReturns all the values that still need to be set in the given column.\n"
  example: []
  syntax:
    content: public BitVector GetMissingValuesForColumn(int column)
    parameters:
    - id: column
      type: System.Int32
    return:
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public Function GetMissingValuesForColumn(column As Integer) As BitVector
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn*
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  id: GetMissingValuesForBox(System.Int32)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: GetMissingValuesForBox(Int32)
  nameWithType: StandardRuleKeeper.GetMissingValuesForBox(Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetMissingValuesForBox
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 190
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: Returns all the values that still need to be set in the given box.
  example: []
  syntax:
    content: public BitVector GetMissingValuesForBox(int box)
    parameters:
    - id: box
      type: System.Int32
    return:
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public Function GetMissingValuesForBox(box As Integer) As BitVector
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox*
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  id: Unset(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: Unset(Coordinate, Int32)
  nameWithType: StandardRuleKeeper.Unset(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Unset
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 193
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nUndoes an update for the given value at the specified coordinate.\n"
  example: []
  syntax:
    content: public void Unset(in Coordinate c, int value)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
      description: The coordinate where a value is being unset.
    - id: value
      type: System.Int32
      description: The value being unset.
    content.vb: Public Sub Unset(ByRef c As Coordinate, value As Integer)
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.Unset*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  nameWithType.vb: StandardRuleKeeper.Unset(ByRef Coordinate, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Unset(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: Unset(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate@)
  id: GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: GetPossibleValues(Coordinate)
  nameWithType: StandardRuleKeeper.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetPossibleValues
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 266
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nNot implemented.\n"
  example: []
  syntax:
    content: public BitVector GetPossibleValues(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    return:
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Public Function GetPossibleValues(ByRef c As Coordinate) As BitVector
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  nameWithType.vb: StandardRuleKeeper.GetPossibleValues(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  name.vb: GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32)
  id: Revert(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: Revert(Coordinate, Int32)
  nameWithType: StandardRuleKeeper.Revert(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Revert
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 272
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nNot implemented.\n"
  example: []
  syntax:
    content: public void Revert(in Coordinate c, int val)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: val
      type: System.Int32
    content.vb: Public Sub Revert(ByRef c As Coordinate, val As Integer)
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.Revert*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  nameWithType.vb: StandardRuleKeeper.Revert(ByRef Coordinate, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  id: Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: StandardRuleKeeper.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Revert
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 278
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nNot implemented.\n"
  example: []
  syntax:
    content: public void Revert(in Coordinate c, int val, CoordinateTracker coordTracker)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: val
      type: System.Int32
    - id: coordTracker
      type: SudokuSpice.CoordinateTracker
    content.vb: Public Sub Revert(ByRef c As Coordinate, val As Integer, coordTracker As CoordinateTracker)
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.Revert*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  nameWithType.vb: StandardRuleKeeper.Revert(ByRef Coordinate, Int32, CoordinateTracker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  id: Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: StandardRuleKeeper.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Update
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 284
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nNot implemented.\n"
  example: []
  syntax:
    content: public void Update(in Coordinate c, int val, CoordinateTracker coordTracker)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: val
      type: System.Int32
    - id: coordTracker
      type: SudokuSpice.CoordinateTracker
    content.vb: Public Sub Update(ByRef c As Coordinate, val As Integer, coordTracker As CoordinateTracker)
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.Update*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  nameWithType.vb: StandardRuleKeeper.Update(ByRef Coordinate, Int32, CoordinateTracker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  id: CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: StandardRuleKeeper.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CopyWithNewReference
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 290
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nNot implemented.\n"
  example: []
  syntax:
    content: public ISudokuRule CopyWithNewReference(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzle
    return:
      type: SudokuSpice.RuleBased.Rules.ISudokuRule
    content.vb: Public Function CopyWithNewReference(puzzle As IReadOnlyPuzzle) As ISudokuRule
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  id: TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: TryInit(IReadOnlyPuzzle)
  nameWithType: StandardRuleKeeper.TryInit(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TryInit
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 296
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nNot implemented.\n"
  example: []
  syntax:
    content: public bool TryInit(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzle
    return:
      type: System.Boolean
    content.vb: Public Function TryInit(puzzle As IReadOnlyPuzzle) As Boolean
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper
  commentId: T:SudokuSpice.RuleBased.ISudokuRuleKeeper
  parent: SudokuSpice.RuleBased
  name: ISudokuRuleKeeper
  nameWithType: ISudokuRuleKeeper
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingRowValuesTracker
  nameWithType: IMissingRowValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingColumnValuesTracker
  nameWithType: IMissingColumnValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingBoxValuesTracker
  nameWithType: IMissingBoxValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule
  commentId: T:SudokuSpice.RuleBased.Rules.ISudokuRule
  parent: SudokuSpice.RuleBased.Rules
  name: ISudokuRule
  nameWithType: ISudokuRule
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
- uid: SudokuSpice.RuleBased.Rules
  commentId: N:SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.#ctor
  name: StandardRuleKeeper
  nameWithType: StandardRuleKeeper.StandardRuleKeeper
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.StandardRuleKeeper
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.TryInit
  name: TryInit
  nameWithType: StandardRuleKeeper.TryInit
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  name: TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: ISudokuRuleKeeper.TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: TryInit
    nameWithType: ISudokuRuleKeeper.TryInit
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: TryInit
    nameWithType: ISudokuRuleKeeper.TryInit
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzleWithMutablePossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences
  name: CopyWithNewReferences
  nameWithType: StandardRuleKeeper.CopyWithNewReferences
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: ISudokuRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: CopyWithNewReferences
    nameWithType: ISudokuRuleKeeper.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: CopyWithNewReferences
    nameWithType: ISudokuRuleKeeper.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.TrySet
  name: TrySet
  nameWithType: StandardRuleKeeper.TrySet
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  isExternal: true
  name: TrySet(Coordinate, Int32)
  nameWithType: ISudokuRuleKeeper.TrySet(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
    name: TrySet
    nameWithType: ISudokuRuleKeeper.TrySet
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
    name: TrySet
    nameWithType: ISudokuRuleKeeper.TrySet
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  name: GetRules
  nameWithType: StandardRuleKeeper.GetRules
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  name: GetRules()
  nameWithType: ISudokuRuleKeeper.GetRules()
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
    name: GetRules
    nameWithType: ISudokuRuleKeeper.GetRules
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
    name: GetRules
    nameWithType: ISudokuRuleKeeper.GetRules
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
  commentId: '!:IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<ISudokuRule>
  nameWithType: IReadOnlyList<ISudokuRule>
  fullName: IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>
  nameWithType.vb: IReadOnlyList(Of ISudokuRule)
  fullName.vb: IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule)
  name.vb: IReadOnlyList(Of ISudokuRule)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow
  name: GetMissingValuesForRow
  nameWithType: StandardRuleKeeper.GetMissingValuesForRow
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  isExternal: true
  name: GetMissingValuesForRow(Int32)
  nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow(Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
    name: GetMissingValuesForRow
    nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow
    fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
    name: GetMissingValuesForRow
    nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow
    fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.BitVector
  commentId: T:SudokuSpice.RuleBased.BitVector
  parent: SudokuSpice.RuleBased
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.RuleBased.BitVector
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn
  name: GetMissingValuesForColumn
  nameWithType: StandardRuleKeeper.GetMissingValuesForColumn
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  isExternal: true
  name: GetMissingValuesForColumn(Int32)
  nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn(Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
    name: GetMissingValuesForColumn
    nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn
    fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
    name: GetMissingValuesForColumn
    nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn
    fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox
  name: GetMissingValuesForBox
  nameWithType: StandardRuleKeeper.GetMissingValuesForBox
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  isExternal: true
  name: GetMissingValuesForBox(Int32)
  nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox(Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
    name: GetMissingValuesForBox
    nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox
    fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
    name: GetMissingValuesForBox
    nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox
    fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Unset*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.Unset
  name: Unset
  nameWithType: StandardRuleKeeper.Unset
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Unset
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  isExternal: true
  name: Unset(Coordinate, Int32)
  nameWithType: ISudokuRuleKeeper.Unset(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
    name: Unset
    nameWithType: ISudokuRuleKeeper.Unset
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
    name: Unset
    nameWithType: ISudokuRuleKeeper.Unset
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues
  name: GetPossibleValues
  nameWithType: StandardRuleKeeper.GetPossibleValues
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  name: GetPossibleValues(Coordinate)
  nameWithType: ISudokuRule.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: ISudokuRule.GetPossibleValues
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: ISudokuRule.GetPossibleValues
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Revert*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.Revert
  name: Revert
  nameWithType: StandardRuleKeeper.Revert
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Revert
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  isExternal: true
  name: Revert(Coordinate, Int32)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate, System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  isExternal: true
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.CoordinateTracker
  commentId: T:SudokuSpice.CoordinateTracker
  parent: SudokuSpice
  name: CoordinateTracker
  nameWithType: CoordinateTracker
  fullName: SudokuSpice.CoordinateTracker
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Update*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.Update
  name: Update
  nameWithType: StandardRuleKeeper.Update
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Update
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  isExternal: true
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Update
    nameWithType: ISudokuRule.Update
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Update
    nameWithType: ISudokuRule.Update
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference
  name: CopyWithNewReference
  nameWithType: StandardRuleKeeper.CopyWithNewReference
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: ISudokuRule.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: ISudokuRule.CopyWithNewReference
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: ISudokuRule.CopyWithNewReference
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzle
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  name: TryInit(IReadOnlyPuzzle)
  nameWithType: ISudokuRule.TryInit(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: TryInit
    nameWithType: ISudokuRule.TryInit
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: TryInit
    nameWithType: ISudokuRule.TryInit
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
