### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.StandardRuleKeeper
  commentId: T:SudokuSpice.RuleBased.StandardRuleKeeper
  id: StandardRuleKeeper
  parent: SudokuSpice.RuleBased
  children:
  - SudokuSpice.RuleBased.StandardRuleKeeper.#ctor(SudokuSpice.IReadOnlyBoxPuzzle,SudokuSpice.RuleBased.PossibleValues)
  - SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  - SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
  - SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  - SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  - SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  - SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  - SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  - SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  langs:
  - csharp
  - vb
  name: StandardRuleKeeper
  nameWithType: StandardRuleKeeper
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: StandardRuleKeeper
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 10
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nEnforces the standard rules: uniqueness in each row, column, and box.\n"
  example: []
  syntax:
    content: 'public class StandardRuleKeeper : ISudokuRuleKeeper, IMissingRowValuesTracker, IMissingColumnValuesTracker, IMissingBoxValuesTracker, ISudokuRule'
    content.vb: >-
      Public Class StandardRuleKeeper

          Implements ISudokuRuleKeeper, IMissingRowValuesTracker, IMissingColumnValuesTracker, IMissingBoxValuesTracker, ISudokuRule
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper
  - SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  - SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  - SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  - SudokuSpice.RuleBased.Rules.ISudokuRule
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.#ctor(SudokuSpice.IReadOnlyBoxPuzzle,SudokuSpice.RuleBased.PossibleValues)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.#ctor(SudokuSpice.IReadOnlyBoxPuzzle,SudokuSpice.RuleBased.PossibleValues)
  id: '#ctor(SudokuSpice.IReadOnlyBoxPuzzle,SudokuSpice.RuleBased.PossibleValues)'
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: StandardRuleKeeper(IReadOnlyBoxPuzzle, PossibleValues)
  nameWithType: StandardRuleKeeper.StandardRuleKeeper(IReadOnlyBoxPuzzle, PossibleValues)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.StandardRuleKeeper(SudokuSpice.IReadOnlyBoxPuzzle, SudokuSpice.RuleBased.PossibleValues)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 18
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  syntax:
    content: public StandardRuleKeeper(IReadOnlyBoxPuzzle puzzle, PossibleValues possibleValues)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyBoxPuzzle
    - id: possibleValues
      type: SudokuSpice.RuleBased.PossibleValues
    content.vb: Public Sub New(puzzle As IReadOnlyBoxPuzzle, possibleValues As PossibleValues)
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
  id: CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues)
  nameWithType: StandardRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.RuleBased.PossibleValues)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CopyWithNewReferences
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 78
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  example: []
  syntax:
    content: public ISudokuRuleKeeper CopyWithNewReferences(IReadOnlyPuzzle puzzle, PossibleValues possibleValues)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
    - id: possibleValues
      type: SudokuSpice.RuleBased.PossibleValues
    return:
      type: SudokuSpice.RuleBased.ISudokuRuleKeeper
    content.vb: Public Function CopyWithNewReferences(puzzle As IReadOnlyPuzzle, possibleValues As PossibleValues) As ISudokuRuleKeeper
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  id: TrySet(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: TrySet(Coordinate, Int32)
  nameWithType: StandardRuleKeeper.TrySet(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: TrySet
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 89
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  example: []
  syntax:
    content: public bool TrySet(in Coordinate c, int value)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: value
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function TrySet(ByRef c As Coordinate, value As Integer) As Boolean
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  nameWithType.vb: StandardRuleKeeper.TrySet(ByRef Coordinate, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: TrySet(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  id: GetRules
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: GetRules()
  nameWithType: StandardRuleKeeper.GetRules()
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetRules
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 168
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  example: []
  syntax:
    content: public IReadOnlyList<ISudokuRule> GetRules()
    return:
      type: System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
    content.vb: Public Function GetRules As IReadOnlyList(Of ISudokuRule)
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  id: GetMissingValuesForRow(System.Int32)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: GetMissingValuesForRow(Int32)
  nameWithType: StandardRuleKeeper.GetMissingValuesForRow(Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetMissingValuesForRow
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 171
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  example: []
  syntax:
    content: public BitVector GetMissingValuesForRow(int row)
    parameters:
    - id: row
      type: System.Int32
    return:
      type: SudokuSpice.BitVector
    content.vb: Public Function GetMissingValuesForRow(row As Integer) As BitVector
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow*
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  id: GetMissingValuesForColumn(System.Int32)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: GetMissingValuesForColumn(Int32)
  nameWithType: StandardRuleKeeper.GetMissingValuesForColumn(Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetMissingValuesForColumn
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 174
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  example: []
  syntax:
    content: public BitVector GetMissingValuesForColumn(int column)
    parameters:
    - id: column
      type: System.Int32
    return:
      type: SudokuSpice.BitVector
    content.vb: Public Function GetMissingValuesForColumn(column As Integer) As BitVector
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn*
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  id: GetMissingValuesForBox(System.Int32)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: GetMissingValuesForBox(Int32)
  nameWithType: StandardRuleKeeper.GetMissingValuesForBox(Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetMissingValuesForBox
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 177
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  example: []
  syntax:
    content: public BitVector GetMissingValuesForBox(int box)
    parameters:
    - id: box
      type: System.Int32
    return:
      type: SudokuSpice.BitVector
    content.vb: Public Function GetMissingValuesForBox(box As Integer) As BitVector
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox*
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  id: Unset(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: Unset(Coordinate, Int32)
  nameWithType: StandardRuleKeeper.Unset(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Unset
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 180
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  example: []
  syntax:
    content: public void Unset(in Coordinate c, int value)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: value
      type: System.Int32
    content.vb: Public Sub Unset(ByRef c As Coordinate, value As Integer)
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.Unset*
  implements:
  - SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  nameWithType.vb: StandardRuleKeeper.Unset(ByRef Coordinate, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Unset(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: Unset(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate@)
  id: GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: GetPossibleValues(Coordinate)
  nameWithType: StandardRuleKeeper.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetPossibleValues
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 245
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nNot implemented.\n"
  example: []
  syntax:
    content: public BitVector GetPossibleValues(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    return:
      type: SudokuSpice.BitVector
    content.vb: Public Function GetPossibleValues(ByRef c As Coordinate) As BitVector
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Always
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  nameWithType.vb: StandardRuleKeeper.GetPossibleValues(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  name.vb: GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32)
  id: Revert(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: Revert(Coordinate, Int32)
  nameWithType: StandardRuleKeeper.Revert(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Revert
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 251
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nNot implemented.\n"
  example: []
  syntax:
    content: public void Revert(in Coordinate c, int val)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: val
      type: System.Int32
    content.vb: Public Sub Revert(ByRef c As Coordinate, val As Integer)
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.Revert*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Always
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  nameWithType.vb: StandardRuleKeeper.Revert(ByRef Coordinate, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  id: Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: StandardRuleKeeper.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Revert
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 257
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nNot implemented.\n"
  example: []
  syntax:
    content: public void Revert(in Coordinate c, int val, CoordinateTracker coordTracker)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: val
      type: System.Int32
    - id: coordTracker
      type: SudokuSpice.CoordinateTracker
    content.vb: Public Sub Revert(ByRef c As Coordinate, val As Integer, coordTracker As CoordinateTracker)
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.Revert*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Always
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  nameWithType.vb: StandardRuleKeeper.Revert(ByRef Coordinate, Int32, CoordinateTracker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  id: Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: StandardRuleKeeper.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Update
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 263
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nNot implemented.\n"
  example: []
  syntax:
    content: public void Update(in Coordinate c, int val, CoordinateTracker coordTracker)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: val
      type: System.Int32
    - id: coordTracker
      type: SudokuSpice.CoordinateTracker
    content.vb: Public Sub Update(ByRef c As Coordinate, val As Integer, coordTracker As CoordinateTracker)
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.Update*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Always
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  nameWithType.vb: StandardRuleKeeper.Update(ByRef Coordinate, Int32, CoordinateTracker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  id: CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.StandardRuleKeeper
  langs:
  - csharp
  - vb
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: StandardRuleKeeper.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CopyWithNewReference
    path: ../SudokuSpice/RuleBased/framework/StandardRuleKeeper.cs
    startLine: 269
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased
  summary: "\nNot implemented.\n"
  example: []
  syntax:
    content: public ISudokuRule CopyWithNewReference(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
    return:
      type: SudokuSpice.RuleBased.Rules.ISudokuRule
    content.vb: Public Function CopyWithNewReference(puzzle As IReadOnlyPuzzle) As ISudokuRule
  overload: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Always
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper
  commentId: T:SudokuSpice.RuleBased.ISudokuRuleKeeper
  parent: SudokuSpice.RuleBased
  name: ISudokuRuleKeeper
  nameWithType: ISudokuRuleKeeper
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingRowValuesTracker
  nameWithType: IMissingRowValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingColumnValuesTracker
  nameWithType: IMissingColumnValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingBoxValuesTracker
  nameWithType: IMissingBoxValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule
  commentId: T:SudokuSpice.RuleBased.Rules.ISudokuRule
  parent: SudokuSpice.RuleBased.Rules
  name: ISudokuRule
  nameWithType: ISudokuRule
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.RuleBased.Rules
  commentId: N:SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.#ctor
  name: StandardRuleKeeper
  nameWithType: StandardRuleKeeper.StandardRuleKeeper
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.StandardRuleKeeper
- uid: SudokuSpice.IReadOnlyBoxPuzzle
  commentId: T:SudokuSpice.IReadOnlyBoxPuzzle
  parent: SudokuSpice
  name: IReadOnlyBoxPuzzle
  nameWithType: IReadOnlyBoxPuzzle
  fullName: SudokuSpice.IReadOnlyBoxPuzzle
- uid: SudokuSpice.RuleBased.PossibleValues
  commentId: T:SudokuSpice.RuleBased.PossibleValues
  parent: SudokuSpice.RuleBased
  name: PossibleValues
  nameWithType: PossibleValues
  fullName: SudokuSpice.RuleBased.PossibleValues
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences
  name: CopyWithNewReferences
  nameWithType: StandardRuleKeeper.CopyWithNewReferences
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  name: CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues)
  nameWithType: ISudokuRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.RuleBased.PossibleValues)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
    name: CopyWithNewReferences
    nameWithType: ISudokuRuleKeeper.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.PossibleValues
    name: PossibleValues
    nameWithType: PossibleValues
    fullName: SudokuSpice.RuleBased.PossibleValues
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues)
    name: CopyWithNewReferences
    nameWithType: ISudokuRuleKeeper.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.PossibleValues
    name: PossibleValues
    nameWithType: PossibleValues
    fullName: SudokuSpice.RuleBased.PossibleValues
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.TrySet
  name: TrySet
  nameWithType: StandardRuleKeeper.TrySet
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  isExternal: true
  name: TrySet(Coordinate, Int32)
  nameWithType: ISudokuRuleKeeper.TrySet(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
    name: TrySet
    nameWithType: ISudokuRuleKeeper.TrySet
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
    name: TrySet
    nameWithType: ISudokuRuleKeeper.TrySet
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  name: GetRules
  nameWithType: StandardRuleKeeper.GetRules
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  name: GetRules()
  nameWithType: ISudokuRuleKeeper.GetRules()
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
    name: GetRules
    nameWithType: ISudokuRuleKeeper.GetRules
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
    name: GetRules
    nameWithType: ISudokuRuleKeeper.GetRules
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
  commentId: T:System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ISudokuRule>
  nameWithType: IReadOnlyList<ISudokuRule>
  fullName: System.Collections.Generic.IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>
  nameWithType.vb: IReadOnlyList(Of ISudokuRule)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule)
  name.vb: IReadOnlyList(Of ISudokuRule)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow
  name: GetMissingValuesForRow
  nameWithType: StandardRuleKeeper.GetMissingValuesForRow
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  isExternal: true
  name: GetMissingValuesForRow(Int32)
  nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow(Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
    name: GetMissingValuesForRow
    nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow
    fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
    name: GetMissingValuesForRow
    nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow
    fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.BitVector
  commentId: T:SudokuSpice.BitVector
  parent: SudokuSpice
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.BitVector
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn
  name: GetMissingValuesForColumn
  nameWithType: StandardRuleKeeper.GetMissingValuesForColumn
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  isExternal: true
  name: GetMissingValuesForColumn(Int32)
  nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn(Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
    name: GetMissingValuesForColumn
    nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn
    fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
    name: GetMissingValuesForColumn
    nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn
    fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox
  name: GetMissingValuesForBox
  nameWithType: StandardRuleKeeper.GetMissingValuesForBox
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  isExternal: true
  name: GetMissingValuesForBox(Int32)
  nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox(Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
    name: GetMissingValuesForBox
    nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox
    fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
    name: GetMissingValuesForBox
    nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox
    fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Unset*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.Unset
  name: Unset
  nameWithType: StandardRuleKeeper.Unset
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Unset
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.ISudokuRuleKeeper
  isExternal: true
  name: Unset(Coordinate, Int32)
  nameWithType: ISudokuRuleKeeper.Unset(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
    name: Unset
    nameWithType: ISudokuRuleKeeper.Unset
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
    name: Unset
    nameWithType: ISudokuRuleKeeper.Unset
    fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
  isExternal: true
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues
  name: GetPossibleValues
  nameWithType: StandardRuleKeeper.GetPossibleValues
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  name: GetPossibleValues(Coordinate)
  nameWithType: ISudokuRule.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: ISudokuRule.GetPossibleValues
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: ISudokuRule.GetPossibleValues
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Revert*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.Revert
  name: Revert
  nameWithType: StandardRuleKeeper.Revert
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Revert
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  isExternal: true
  name: Revert(Coordinate, Int32)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate, System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  isExternal: true
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.CoordinateTracker
  commentId: T:SudokuSpice.CoordinateTracker
  parent: SudokuSpice
  name: CoordinateTracker
  nameWithType: CoordinateTracker
  fullName: SudokuSpice.CoordinateTracker
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Update*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.Update
  name: Update
  nameWithType: StandardRuleKeeper.Update
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Update
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  isExternal: true
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Update
    nameWithType: ISudokuRule.Update
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Update
    nameWithType: ISudokuRule.Update
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference*
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference
  name: CopyWithNewReference
  nameWithType: StandardRuleKeeper.CopyWithNewReference
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: ISudokuRule.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: ISudokuRule.CopyWithNewReference
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: ISudokuRule.CopyWithNewReference
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
