### YamlMime:ManagedReference
items:
- uid: SudokuSpice.SolveStats
  commentId: T:SudokuSpice.SolveStats
  id: SolveStats
  parent: SudokuSpice
  children:
  - SudokuSpice.SolveStats.Equals(SudokuSpice.SolveStats)
  - SudokuSpice.SolveStats.Equals(System.Object)
  - SudokuSpice.SolveStats.GetHashCode
  - SudokuSpice.SolveStats.NumSolutionsFound
  - SudokuSpice.SolveStats.NumSquaresGuessed
  - SudokuSpice.SolveStats.NumTotalGuesses
  - SudokuSpice.SolveStats.op_Equality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  - SudokuSpice.SolveStats.op_Inequality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  - SudokuSpice.SolveStats.ToString
  langs:
  - csharp
  - vb
  name: SolveStats
  nameWithType: SolveStats
  fullName: SudokuSpice.SolveStats
  type: Struct
  source:
    remote:
      path: SudokuSpice/Data/SolveStats.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: SolveStats
    path: ../SudokuSpice/Data/SolveStats.cs
    startLine: 7
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nContains statistics about an attempt to solve a puzzle.\n"
  example: []
  syntax:
    content: 'public struct SolveStats : IEquatable<SolveStats>'
    content.vb: >-
      Public Structure SolveStats

          Implements IEquatable(Of SolveStats)
  implements:
  - System.IEquatable{SudokuSpice.SolveStats}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: SudokuSpice.SolveStats.NumSolutionsFound
  commentId: P:SudokuSpice.SolveStats.NumSolutionsFound
  id: NumSolutionsFound
  parent: SudokuSpice.SolveStats
  langs:
  - csharp
  - vb
  name: NumSolutionsFound
  nameWithType: SolveStats.NumSolutionsFound
  fullName: SudokuSpice.SolveStats.NumSolutionsFound
  type: Property
  source:
    remote:
      path: SudokuSpice/Data/SolveStats.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: NumSolutionsFound
    path: ../SudokuSpice/Data/SolveStats.cs
    startLine: 13
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nThe number of solutions found for this puzzle. For any real Sudoku puzzle, this should\nbe 1.\n"
  example: []
  syntax:
    content: public int NumSolutionsFound { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property NumSolutionsFound As Integer
  overload: SudokuSpice.SolveStats.NumSolutionsFound*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SudokuSpice.SolveStats.NumSquaresGuessed
  commentId: P:SudokuSpice.SolveStats.NumSquaresGuessed
  id: NumSquaresGuessed
  parent: SudokuSpice.SolveStats
  langs:
  - csharp
  - vb
  name: NumSquaresGuessed
  nameWithType: SolveStats.NumSquaresGuessed
  fullName: SudokuSpice.SolveStats.NumSquaresGuessed
  type: Property
  source:
    remote:
      path: SudokuSpice/Data/SolveStats.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: NumSquaresGuessed
    path: ../SudokuSpice/Data/SolveStats.cs
    startLine: 23
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nThe number of squares for which the solver had to guess while finding a solution.\n"
  remarks: "\nUnlike <xref href=\"SudokuSpice.SolveStats.NumTotalGuesses\" data-throw-if-not-resolved=\"false\"></xref>, if the solver was\nsetting a square that had three possible values, this would only add 1 to\n<code>NumSquaresGuessed</code>. If NumSolutionsFound is greater than 1, then the precise\nmeaning of this value is undefined.\n"
  example: []
  syntax:
    content: public int NumSquaresGuessed { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property NumSquaresGuessed As Integer
  overload: SudokuSpice.SolveStats.NumSquaresGuessed*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SudokuSpice.SolveStats.NumTotalGuesses
  commentId: P:SudokuSpice.SolveStats.NumTotalGuesses
  id: NumTotalGuesses
  parent: SudokuSpice.SolveStats
  langs:
  - csharp
  - vb
  name: NumTotalGuesses
  nameWithType: SolveStats.NumTotalGuesses
  fullName: SudokuSpice.SolveStats.NumTotalGuesses
  type: Property
  source:
    remote:
      path: SudokuSpice/Data/SolveStats.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: NumTotalGuesses
    path: ../SudokuSpice/Data/SolveStats.cs
    startLine: 35
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nThe total number of guesses used to solve the puzzle. A &apos;guess&apos; is any time the\nsolver tries setting a square to one value when there are multiple possible values\nfor that square.\n"
  remarks: "\nExample Guesses: if the solver tried to set square (0,1) with possible values [2, 3, 5]\nthen this would add three total guesses since there were three possible values for this\ncoordinate. This would be true even if only one of the values actually led to a\nsolution.\n"
  example: []
  syntax:
    content: public int NumTotalGuesses { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property NumTotalGuesses As Integer
  overload: SudokuSpice.SolveStats.NumTotalGuesses*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SudokuSpice.SolveStats.Equals(System.Object)
  commentId: M:SudokuSpice.SolveStats.Equals(System.Object)
  id: Equals(System.Object)
  parent: SudokuSpice.SolveStats
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SolveStats.Equals(Object)
  fullName: SudokuSpice.SolveStats.Equals(System.Object)
  type: Method
  source:
    remote:
      path: SudokuSpice/Data/SolveStats.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Equals
    path: ../SudokuSpice/Data/SolveStats.cs
    startLine: 37
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: SudokuSpice.SolveStats.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SudokuSpice.SolveStats.Equals(SudokuSpice.SolveStats)
  commentId: M:SudokuSpice.SolveStats.Equals(SudokuSpice.SolveStats)
  id: Equals(SudokuSpice.SolveStats)
  parent: SudokuSpice.SolveStats
  langs:
  - csharp
  - vb
  name: Equals(SolveStats)
  nameWithType: SolveStats.Equals(SolveStats)
  fullName: SudokuSpice.SolveStats.Equals(SudokuSpice.SolveStats)
  type: Method
  source:
    remote:
      path: SudokuSpice/Data/SolveStats.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Equals
    path: ../SudokuSpice/Data/SolveStats.cs
    startLine: 46
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public bool Equals(SolveStats other)
    parameters:
    - id: other
      type: SudokuSpice.SolveStats
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As SolveStats) As Boolean
  overload: SudokuSpice.SolveStats.Equals*
  implements:
  - System.IEquatable{SudokuSpice.SolveStats}.Equals(SudokuSpice.SolveStats)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.SolveStats.GetHashCode
  commentId: M:SudokuSpice.SolveStats.GetHashCode
  id: GetHashCode
  parent: SudokuSpice.SolveStats
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SolveStats.GetHashCode()
  fullName: SudokuSpice.SolveStats.GetHashCode()
  type: Method
  source:
    remote:
      path: SudokuSpice/Data/SolveStats.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetHashCode
    path: ../SudokuSpice/Data/SolveStats.cs
    startLine: 53
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: SudokuSpice.SolveStats.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: SudokuSpice.SolveStats.op_Equality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  commentId: M:SudokuSpice.SolveStats.op_Equality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  id: op_Equality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  parent: SudokuSpice.SolveStats
  langs:
  - csharp
  - vb
  name: Equality(SolveStats, SolveStats)
  nameWithType: SolveStats.Equality(SolveStats, SolveStats)
  fullName: SudokuSpice.SolveStats.Equality(SudokuSpice.SolveStats, SudokuSpice.SolveStats)
  type: Operator
  source:
    remote:
      path: SudokuSpice/Data/SolveStats.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: op_Equality
    path: ../SudokuSpice/Data/SolveStats.cs
    startLine: 55
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public static bool operator ==(SolveStats left, SolveStats right)
    parameters:
    - id: left
      type: SudokuSpice.SolveStats
    - id: right
      type: SudokuSpice.SolveStats
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As SolveStats, right As SolveStats) As Boolean
  overload: SudokuSpice.SolveStats.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SudokuSpice.SolveStats.op_Inequality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  commentId: M:SudokuSpice.SolveStats.op_Inequality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  id: op_Inequality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  parent: SudokuSpice.SolveStats
  langs:
  - csharp
  - vb
  name: Inequality(SolveStats, SolveStats)
  nameWithType: SolveStats.Inequality(SolveStats, SolveStats)
  fullName: SudokuSpice.SolveStats.Inequality(SudokuSpice.SolveStats, SudokuSpice.SolveStats)
  type: Operator
  source:
    remote:
      path: SudokuSpice/Data/SolveStats.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: op_Inequality
    path: ../SudokuSpice/Data/SolveStats.cs
    startLine: 57
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public static bool operator !=(SolveStats left, SolveStats right)
    parameters:
    - id: left
      type: SudokuSpice.SolveStats
    - id: right
      type: SudokuSpice.SolveStats
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As SolveStats, right As SolveStats) As Boolean
  overload: SudokuSpice.SolveStats.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SudokuSpice.SolveStats.ToString
  commentId: M:SudokuSpice.SolveStats.ToString
  id: ToString
  parent: SudokuSpice.SolveStats
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SolveStats.ToString()
  fullName: SudokuSpice.SolveStats.ToString()
  type: Method
  source:
    remote:
      path: SudokuSpice/Data/SolveStats.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ToString
    path: ../SudokuSpice/Data/SolveStats.cs
    startLine: 59
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: SudokuSpice.SolveStats.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: System.IEquatable{SudokuSpice.SolveStats}
  commentId: T:System.IEquatable{SudokuSpice.SolveStats}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<SolveStats>
  nameWithType: IEquatable<SolveStats>
  fullName: System.IEquatable<SudokuSpice.SolveStats>
  nameWithType.vb: IEquatable(Of SolveStats)
  fullName.vb: System.IEquatable(Of SudokuSpice.SolveStats)
  name.vb: IEquatable(Of SolveStats)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.SolveStats
    name: SolveStats
    nameWithType: SolveStats
    fullName: SudokuSpice.SolveStats
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.SolveStats
    name: SolveStats
    nameWithType: SolveStats
    fullName: SudokuSpice.SolveStats
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.SolveStats.NumSolutionsFound*
  commentId: Overload:SudokuSpice.SolveStats.NumSolutionsFound
  name: NumSolutionsFound
  nameWithType: SolveStats.NumSolutionsFound
  fullName: SudokuSpice.SolveStats.NumSolutionsFound
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.SolveStats.NumTotalGuesses
  commentId: P:SudokuSpice.SolveStats.NumTotalGuesses
  isExternal: true
- uid: SudokuSpice.SolveStats.NumSquaresGuessed*
  commentId: Overload:SudokuSpice.SolveStats.NumSquaresGuessed
  name: NumSquaresGuessed
  nameWithType: SolveStats.NumSquaresGuessed
  fullName: SudokuSpice.SolveStats.NumSquaresGuessed
- uid: SudokuSpice.SolveStats.NumTotalGuesses*
  commentId: Overload:SudokuSpice.SolveStats.NumTotalGuesses
  name: NumTotalGuesses
  nameWithType: SolveStats.NumTotalGuesses
  fullName: SudokuSpice.SolveStats.NumTotalGuesses
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.SolveStats.Equals*
  commentId: Overload:SudokuSpice.SolveStats.Equals
  name: Equals
  nameWithType: SolveStats.Equals
  fullName: SudokuSpice.SolveStats.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.IEquatable{SudokuSpice.SolveStats}.Equals(SudokuSpice.SolveStats)
  commentId: M:System.IEquatable{SudokuSpice.SolveStats}.Equals(SudokuSpice.SolveStats)
  parent: System.IEquatable{SudokuSpice.SolveStats}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(SolveStats)
  nameWithType: IEquatable<SolveStats>.Equals(SolveStats)
  fullName: System.IEquatable<SudokuSpice.SolveStats>.Equals(SudokuSpice.SolveStats)
  nameWithType.vb: IEquatable(Of SolveStats).Equals(SolveStats)
  fullName.vb: System.IEquatable(Of SudokuSpice.SolveStats).Equals(SudokuSpice.SolveStats)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<SolveStats>.Equals
    fullName: System.IEquatable<SudokuSpice.SolveStats>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.SolveStats
    name: SolveStats
    nameWithType: SolveStats
    fullName: SudokuSpice.SolveStats
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of SolveStats).Equals
    fullName: System.IEquatable(Of SudokuSpice.SolveStats).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.SolveStats
    name: SolveStats
    nameWithType: SolveStats
    fullName: SudokuSpice.SolveStats
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.SolveStats
  commentId: T:SudokuSpice.SolveStats
  parent: SudokuSpice
  name: SolveStats
  nameWithType: SolveStats
  fullName: SudokuSpice.SolveStats
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.SolveStats.GetHashCode*
  commentId: Overload:SudokuSpice.SolveStats.GetHashCode
  name: GetHashCode
  nameWithType: SolveStats.GetHashCode
  fullName: SudokuSpice.SolveStats.GetHashCode
- uid: SudokuSpice.SolveStats.op_Equality*
  commentId: Overload:SudokuSpice.SolveStats.op_Equality
  name: Equality
  nameWithType: SolveStats.Equality
  fullName: SudokuSpice.SolveStats.Equality
- uid: SudokuSpice.SolveStats.op_Inequality*
  commentId: Overload:SudokuSpice.SolveStats.op_Inequality
  name: Inequality
  nameWithType: SolveStats.Inequality
  fullName: SudokuSpice.SolveStats.Inequality
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.SolveStats.ToString*
  commentId: Overload:SudokuSpice.SolveStats.ToString
  name: ToString
  nameWithType: SolveStats.ToString
  fullName: SudokuSpice.SolveStats.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
