### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.AndGroup
  commentId: T:SudokuSpice.ConstraintBased.AndGroup
  id: AndGroup
  parent: SudokuSpice.ConstraintBased
  children:
  - SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Requirement},System.Boolean)
  - SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected(System.ReadOnlySpan{SudokuSpice.ConstraintBased.RequirementGroup},System.Boolean)
  langs:
  - csharp
  - vb
  name: AndGroup
  nameWithType: AndGroup
  fullName: SudokuSpice.ConstraintBased.AndGroup
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/AndGroup.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: AndGroup
    path: ../SudokuSpice/ConstraintBased/AndGroup.cs
    startLine: 6
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  syntax:
    content: 'public class AndGroup : RequirementGroup, IObjective<RequirementGroup, Requirement>, IObjective<RequirementGroup, RequirementGroup>, IPossibility<RequirementGroup, RequirementGroup>'
    content.vb: >-
      Public Class AndGroup
          Inherits RequirementGroup
          Implements IObjective(Of RequirementGroup, Requirement), IObjective(Of RequirementGroup, RequirementGroup), IPossibility(Of RequirementGroup, RequirementGroup)
  inheritance:
  - System.Object
  - SudokuSpice.ConstraintBased.RequirementGroup
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Requirement},System.Boolean)
  commentId: M:SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Requirement},System.Boolean)
  id: CreateFullyConnected(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Requirement},System.Boolean)
  parent: SudokuSpice.ConstraintBased.AndGroup
  langs:
  - csharp
  - vb
  name: CreateFullyConnected(ReadOnlySpan<Requirement>, Boolean)
  nameWithType: AndGroup.CreateFullyConnected(ReadOnlySpan<Requirement>, Boolean)
  fullName: SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected(System.ReadOnlySpan<SudokuSpice.ConstraintBased.Requirement>, System.Boolean)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/AndGroup.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: CreateFullyConnected
    path: ../SudokuSpice/ConstraintBased/AndGroup.cs
    startLine: 20
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  syntax:
    content: public static AndGroup CreateFullyConnected(ReadOnlySpan<Requirement> requirements, bool isOptional = false)
    parameters:
    - id: requirements
      type: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Requirement}
    - id: isOptional
      type: System.Boolean
    return:
      type: SudokuSpice.ConstraintBased.AndGroup
    content.vb: Public Shared Function CreateFullyConnected(requirements As ReadOnlySpan(Of Requirement), isOptional As Boolean = False) As AndGroup
  overload: SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected*
  nameWithType.vb: AndGroup.CreateFullyConnected(ReadOnlySpan(Of Requirement), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected(System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Requirement), System.Boolean)
  name.vb: CreateFullyConnected(ReadOnlySpan(Of Requirement), Boolean)
- uid: SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected(System.ReadOnlySpan{SudokuSpice.ConstraintBased.RequirementGroup},System.Boolean)
  commentId: M:SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected(System.ReadOnlySpan{SudokuSpice.ConstraintBased.RequirementGroup},System.Boolean)
  id: CreateFullyConnected(System.ReadOnlySpan{SudokuSpice.ConstraintBased.RequirementGroup},System.Boolean)
  parent: SudokuSpice.ConstraintBased.AndGroup
  langs:
  - csharp
  - vb
  name: CreateFullyConnected(ReadOnlySpan<RequirementGroup>, Boolean)
  nameWithType: AndGroup.CreateFullyConnected(ReadOnlySpan<RequirementGroup>, Boolean)
  fullName: SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected(System.ReadOnlySpan<SudokuSpice.ConstraintBased.RequirementGroup>, System.Boolean)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/AndGroup.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: CreateFullyConnected
    path: ../SudokuSpice/ConstraintBased/AndGroup.cs
    startLine: 30
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  syntax:
    content: public static AndGroup CreateFullyConnected(ReadOnlySpan<RequirementGroup> groups, bool isOptional = false)
    parameters:
    - id: groups
      type: System.ReadOnlySpan{SudokuSpice.ConstraintBased.RequirementGroup}
    - id: isOptional
      type: System.Boolean
    return:
      type: SudokuSpice.ConstraintBased.AndGroup
    content.vb: Public Shared Function CreateFullyConnected(groups As ReadOnlySpan(Of RequirementGroup), isOptional As Boolean = False) As AndGroup
  overload: SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected*
  nameWithType.vb: AndGroup.CreateFullyConnected(ReadOnlySpan(Of RequirementGroup), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected(System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.RequirementGroup), System.Boolean)
  name.vb: CreateFullyConnected(ReadOnlySpan(Of RequirementGroup), Boolean)
references:
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.ConstraintBased.RequirementGroup
  commentId: T:SudokuSpice.ConstraintBased.RequirementGroup
  parent: SudokuSpice.ConstraintBased
  name: RequirementGroup
  nameWithType: RequirementGroup
  fullName: SudokuSpice.ConstraintBased.RequirementGroup
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected*
  commentId: Overload:SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected
  name: CreateFullyConnected
  nameWithType: AndGroup.CreateFullyConnected
  fullName: SudokuSpice.ConstraintBased.AndGroup.CreateFullyConnected
- uid: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Requirement}
  commentId: T:System.ReadOnlySpan{SudokuSpice.ConstraintBased.Requirement}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Requirement>
  nameWithType: ReadOnlySpan<Requirement>
  fullName: System.ReadOnlySpan<SudokuSpice.ConstraintBased.Requirement>
  nameWithType.vb: ReadOnlySpan(Of Requirement)
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Requirement)
  name.vb: ReadOnlySpan(Of Requirement)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.Requirement
    name: Requirement
    nameWithType: Requirement
    fullName: SudokuSpice.ConstraintBased.Requirement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.Requirement
    name: Requirement
    nameWithType: Requirement
    fullName: SudokuSpice.ConstraintBased.Requirement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.ConstraintBased.AndGroup
  commentId: T:SudokuSpice.ConstraintBased.AndGroup
  parent: SudokuSpice.ConstraintBased
  name: AndGroup
  nameWithType: AndGroup
  fullName: SudokuSpice.ConstraintBased.AndGroup
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ReadOnlySpan{SudokuSpice.ConstraintBased.RequirementGroup}
  commentId: T:System.ReadOnlySpan{SudokuSpice.ConstraintBased.RequirementGroup}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<RequirementGroup>
  nameWithType: ReadOnlySpan<RequirementGroup>
  fullName: System.ReadOnlySpan<SudokuSpice.ConstraintBased.RequirementGroup>
  nameWithType.vb: ReadOnlySpan(Of RequirementGroup)
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.RequirementGroup)
  name.vb: ReadOnlySpan(Of RequirementGroup)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.RequirementGroup
    name: RequirementGroup
    nameWithType: RequirementGroup
    fullName: SudokuSpice.ConstraintBased.RequirementGroup
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.RequirementGroup
    name: RequirementGroup
    nameWithType: RequirementGroup
    fullName: SudokuSpice.ConstraintBased.RequirementGroup
  - name: )
    nameWithType: )
    fullName: )
