### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1
  commentId: T:SudokuSpice.ConstraintBased.PuzzleSolver`1
  id: PuzzleSolver`1
  parent: SudokuSpice.ConstraintBased
  children:
  - SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor(System.Collections.Generic.IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})
  - SudokuSpice.ConstraintBased.PuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{System.Threading.CancellationToken})
  - SudokuSpice.ConstraintBased.PuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{System.Threading.CancellationToken})
  - SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve(`0,System.Boolean)
  - SudokuSpice.ConstraintBased.PuzzleSolver`1.TrySolve(`0,System.Boolean)
  langs:
  - csharp
  - vb
  name: PuzzleSolver<TPuzzle>
  nameWithType: PuzzleSolver<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/PuzzleSolver.cs
      branch: generics
      repo: https://github.com/MorganR/SudokuSpice.git
    id: PuzzleSolver
    path: ../SudokuSpice/ConstraintBased/PuzzleSolver.cs
    startLine: 17
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nSolves puzzles of the given type using an <xref href=\"SudokuSpice.ConstraintBased.ExactCoverMatrix\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis class is thread-safe as long as the given constraints&apos; implementations of\n<xref href=\"SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle%2cSudokuSpice.ConstraintBased.ExactCoverMatrix)\" data-throw-if-not-resolved=\"false\"></xref> are also\nthread-safe. If that&apos;s true, then it&apos;s safe to solve multiple puzzles concurrently via\nthe same solver object.\n"
  example: []
  syntax:
    content: 'public class PuzzleSolver<TPuzzle> : IPuzzleSolver<TPuzzle> where TPuzzle : class, IPuzzle<TPuzzle>'
    typeParameters:
    - id: TPuzzle
      description: The type of puzzle to solve.
    content.vb: >-
      Public Class PuzzleSolver(Of TPuzzle As {Class, IPuzzle(Of TPuzzle)})
          Implements IPuzzleSolver(Of TPuzzle)
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.IPuzzleSolver{{TPuzzle}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: PuzzleSolver(Of TPuzzle)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle)
  name.vb: PuzzleSolver(Of TPuzzle)
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor(System.Collections.Generic.IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor(System.Collections.Generic.IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})
  id: '#ctor(System.Collections.Generic.IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})'
  parent: SudokuSpice.ConstraintBased.PuzzleSolver`1
  langs:
  - csharp
  - vb
  name: PuzzleSolver(IReadOnlyList<IConstraint>)
  nameWithType: PuzzleSolver<TPuzzle>.PuzzleSolver(IReadOnlyList<IConstraint>)
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.PuzzleSolver(System.Collections.Generic.IReadOnlyList<SudokuSpice.ConstraintBased.Constraints.IConstraint>)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/ConstraintBased/PuzzleSolver.cs
      branch: generics
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/ConstraintBased/PuzzleSolver.cs
    startLine: 26
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nCreates a solver that can solve puzzles using the given\n<xref href=\"SudokuSpice.ConstraintBased.Constraints.IConstraint\" data-throw-if-not-resolved=\"false\"></xref>s. The same solver can be reused for multiple puzzles.\n"
  example: []
  syntax:
    content: public PuzzleSolver(IReadOnlyList<IConstraint> constraints)
    parameters:
    - id: constraints
      type: System.Collections.Generic.IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint}
      description: The constraints to satisfy when solving puzzles.
    content.vb: Public Sub New(constraints As IReadOnlyList(Of IConstraint))
  overload: SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor*
  nameWithType.vb: PuzzleSolver(Of TPuzzle).PuzzleSolver(IReadOnlyList(Of IConstraint))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).PuzzleSolver(System.Collections.Generic.IReadOnlyList(Of SudokuSpice.ConstraintBased.Constraints.IConstraint))
  name.vb: PuzzleSolver(IReadOnlyList(Of IConstraint))
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve(`0,System.Boolean)
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve(`0,System.Boolean)
  id: Solve(`0,System.Boolean)
  parent: SudokuSpice.ConstraintBased.PuzzleSolver`1
  langs:
  - csharp
  - vb
  name: Solve(TPuzzle, Boolean)
  nameWithType: PuzzleSolver<TPuzzle>.Solve(TPuzzle, Boolean)
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.Solve(TPuzzle, System.Boolean)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/PuzzleSolver.cs
      branch: generics
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Solve
    path: ../SudokuSpice/ConstraintBased/PuzzleSolver.cs
    startLine: 32
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nSolves the given puzzle in place.\n"
  example: []
  syntax:
    content: public TPuzzle Solve(TPuzzle puzzle, bool randomizeGuesses = false)
    parameters:
    - id: puzzle
      type: '{TPuzzle}'
      description: "\nThe puzzle to solve. This will be copied instead of solved in-place.\n"
    - id: randomizeGuesses
      type: System.Boolean
      description: "\nIf true, this will guess in a random order when forced to guess. Else, the guessing\norder is up to the implementation, but it should be stable.\n"
    return:
      type: '{TPuzzle}'
      description: A solved copy of the given puzzle.
    content.vb: Public Function Solve(puzzle As TPuzzle, randomizeGuesses As Boolean = False) As TPuzzle
  overload: SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nThrown if this puzzle can&apos;t be solved by this solver.\n"
  implements:
  - SudokuSpice.IPuzzleSolver{{TPuzzle}}.Solve({TPuzzle},System.Boolean)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).Solve(TPuzzle, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).Solve(TPuzzle, System.Boolean)
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.TrySolve(`0,System.Boolean)
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.TrySolve(`0,System.Boolean)
  id: TrySolve(`0,System.Boolean)
  parent: SudokuSpice.ConstraintBased.PuzzleSolver`1
  langs:
  - csharp
  - vb
  name: TrySolve(TPuzzle, Boolean)
  nameWithType: PuzzleSolver<TPuzzle>.TrySolve(TPuzzle, Boolean)
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.TrySolve(TPuzzle, System.Boolean)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/PuzzleSolver.cs
      branch: generics
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TrySolve
    path: ../SudokuSpice/ConstraintBased/PuzzleSolver.cs
    startLine: 58
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nAttempts to solve the given puzzle.\n"
  example: []
  syntax:
    content: public bool TrySolve(TPuzzle puzzle, bool randomizeGuesses = false)
    parameters:
    - id: puzzle
      type: '{TPuzzle}'
      description: The puzzle to solve. This will be solved in place.
    - id: randomizeGuesses
      type: System.Boolean
      description: "\nIf true, this will guess in a random order when forced to guess. Else, the guessing\norder is up to the implementation, but it should be stable.\n"
    return:
      type: System.Boolean
    content.vb: Public Function TrySolve(puzzle As TPuzzle, randomizeGuesses As Boolean = False) As Boolean
  overload: SudokuSpice.ConstraintBased.PuzzleSolver`1.TrySolve*
  implements:
  - SudokuSpice.IPuzzleSolver{{TPuzzle}}.TrySolve({TPuzzle},System.Boolean)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).TrySolve(TPuzzle, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).TrySolve(TPuzzle, System.Boolean)
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{System.Threading.CancellationToken})
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{System.Threading.CancellationToken})
  id: ComputeStatsForAllSolutions(`0,System.Nullable{System.Threading.CancellationToken})
  parent: SudokuSpice.ConstraintBased.PuzzleSolver`1
  langs:
  - csharp
  - vb
  name: ComputeStatsForAllSolutions(TPuzzle, Nullable<CancellationToken>)
  nameWithType: PuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions(TPuzzle, Nullable<CancellationToken>)
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions(TPuzzle, System.Nullable<System.Threading.CancellationToken>)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/PuzzleSolver.cs
      branch: generics
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ComputeStatsForAllSolutions
    path: ../SudokuSpice/ConstraintBased/PuzzleSolver.cs
    startLine: 78
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nFinds stats for all the solutions to the given puzzle. The puzzle is left unchanged.\n"
  example: []
  syntax:
    content: public SolveStats ComputeStatsForAllSolutions(TPuzzle puzzle, CancellationToken? token = default(CancellationToken? ))
    parameters:
    - id: puzzle
      type: '{TPuzzle}'
    - id: token
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: SudokuSpice.SolveStats
    content.vb: Public Function ComputeStatsForAllSolutions(puzzle As TPuzzle, token As CancellationToken? = Nothing) As SolveStats
  overload: SudokuSpice.ConstraintBased.PuzzleSolver`1.ComputeStatsForAllSolutions*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\nMay be thrown if the given cancellation token is canceled during the operation.\n"
  implements:
  - SudokuSpice.IPuzzleSolver{{TPuzzle}}.ComputeStatsForAllSolutions({TPuzzle},System.Nullable{System.Threading.CancellationToken})
  nameWithType.vb: PuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions(TPuzzle, Nullable(Of CancellationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions(TPuzzle, System.Nullable(Of System.Threading.CancellationToken))
  name.vb: ComputeStatsForAllSolutions(TPuzzle, Nullable(Of CancellationToken))
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{System.Threading.CancellationToken})
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{System.Threading.CancellationToken})
  id: HasUniqueSolution(`0,System.Nullable{System.Threading.CancellationToken})
  parent: SudokuSpice.ConstraintBased.PuzzleSolver`1
  langs:
  - csharp
  - vb
  name: HasUniqueSolution(TPuzzle, Nullable<CancellationToken>)
  nameWithType: PuzzleSolver<TPuzzle>.HasUniqueSolution(TPuzzle, Nullable<CancellationToken>)
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.HasUniqueSolution(TPuzzle, System.Nullable<System.Threading.CancellationToken>)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/PuzzleSolver.cs
      branch: generics
      repo: https://github.com/MorganR/SudokuSpice.git
    id: HasUniqueSolution
    path: ../SudokuSpice/ConstraintBased/PuzzleSolver.cs
    startLine: 84
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nDetermines if the given puzzle has a unique solution. The puzzle is left unchanged.\n"
  example: []
  syntax:
    content: public bool HasUniqueSolution(TPuzzle puzzle, CancellationToken? token = default(CancellationToken? ))
    parameters:
    - id: puzzle
      type: '{TPuzzle}'
    - id: token
      type: System.Nullable{System.Threading.CancellationToken}
    return:
      type: System.Boolean
    content.vb: Public Function HasUniqueSolution(puzzle As TPuzzle, token As CancellationToken? = Nothing) As Boolean
  overload: SudokuSpice.ConstraintBased.PuzzleSolver`1.HasUniqueSolution*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\nMay be thrown if the given cancellation token is canceled during the operation.\n"
  implements:
  - SudokuSpice.IPuzzleSolver{{TPuzzle}}.HasUniqueSolution({TPuzzle},System.Nullable{System.Threading.CancellationToken})
  nameWithType.vb: PuzzleSolver(Of TPuzzle).HasUniqueSolution(TPuzzle, Nullable(Of CancellationToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).HasUniqueSolution(TPuzzle, System.Nullable(Of System.Threading.CancellationToken))
  name.vb: HasUniqueSolution(TPuzzle, Nullable(Of CancellationToken))
references:
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix
  parent: SudokuSpice.ConstraintBased
  name: ExactCoverMatrix
  nameWithType: ExactCoverMatrix
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  parent: SudokuSpice.ConstraintBased.Constraints.IConstraint
  name: TryConstrain(IReadOnlyPuzzle, ExactCoverMatrix)
  nameWithType: IConstraint.TryConstrain(IReadOnlyPuzzle, ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
    name: TryConstrain
    nameWithType: IConstraint.TryConstrain
    fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
    name: TryConstrain
    nameWithType: IConstraint.TryConstrain
    fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
    name: ExactCoverMatrix
    nameWithType: ExactCoverMatrix
    fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.IPuzzleSolver{{TPuzzle}}
  commentId: T:SudokuSpice.IPuzzleSolver{`0}
  parent: SudokuSpice
  definition: SudokuSpice.IPuzzleSolver`1
  name: IPuzzleSolver<TPuzzle>
  nameWithType: IPuzzleSolver<TPuzzle>
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>
  nameWithType.vb: IPuzzleSolver(Of TPuzzle)
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle)
  name.vb: IPuzzleSolver(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.IPuzzleSolver`1
    name: IPuzzleSolver
    nameWithType: IPuzzleSolver
    fullName: SudokuSpice.IPuzzleSolver
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.IPuzzleSolver`1
    name: IPuzzleSolver
    nameWithType: IPuzzleSolver
    fullName: SudokuSpice.IPuzzleSolver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint
  commentId: T:SudokuSpice.ConstraintBased.Constraints.IConstraint
  parent: SudokuSpice.ConstraintBased.Constraints
  name: IConstraint
  nameWithType: IConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.IPuzzleSolver`1
  commentId: T:SudokuSpice.IPuzzleSolver`1
  name: IPuzzleSolver<TPuzzle>
  nameWithType: IPuzzleSolver<TPuzzle>
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>
  nameWithType.vb: IPuzzleSolver(Of TPuzzle)
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle)
  name.vb: IPuzzleSolver(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.IPuzzleSolver`1
    name: IPuzzleSolver
    nameWithType: IPuzzleSolver
    fullName: SudokuSpice.IPuzzleSolver
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.IPuzzleSolver`1
    name: IPuzzleSolver
    nameWithType: IPuzzleSolver
    fullName: SudokuSpice.IPuzzleSolver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.ConstraintBased.Constraints
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor*
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor
  name: PuzzleSolver
  nameWithType: PuzzleSolver<TPuzzle>.PuzzleSolver
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.PuzzleSolver
  nameWithType.vb: PuzzleSolver(Of TPuzzle).PuzzleSolver
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).PuzzleSolver
- uid: System.Collections.Generic.IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint}
  commentId: T:System.Collections.Generic.IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<IConstraint>
  nameWithType: IReadOnlyList<IConstraint>
  fullName: System.Collections.Generic.IReadOnlyList<SudokuSpice.ConstraintBased.Constraints.IConstraint>
  nameWithType.vb: IReadOnlyList(Of IConstraint)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of SudokuSpice.ConstraintBased.Constraints.IConstraint)
  name.vb: IReadOnlyList(Of IConstraint)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.Constraints.IConstraint
    name: IConstraint
    nameWithType: IConstraint
    fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.Constraints.IConstraint
    name: IConstraint
    nameWithType: IConstraint
    fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve*
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve
  name: Solve
  nameWithType: PuzzleSolver<TPuzzle>.Solve
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.Solve
  nameWithType.vb: PuzzleSolver(Of TPuzzle).Solve
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).Solve
- uid: SudokuSpice.IPuzzleSolver{{TPuzzle}}.Solve({TPuzzle},System.Boolean)
  commentId: M:SudokuSpice.IPuzzleSolver{`0}.Solve(`0,System.Boolean)
  parent: SudokuSpice.IPuzzleSolver{{TPuzzle}}
  definition: SudokuSpice.IPuzzleSolver`1.Solve(`0,System.Boolean)
  name: Solve(TPuzzle, Boolean)
  nameWithType: IPuzzleSolver<TPuzzle>.Solve(TPuzzle, Boolean)
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.Solve(TPuzzle, System.Boolean)
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).Solve(TPuzzle, Boolean)
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).Solve(TPuzzle, System.Boolean)
  spec.csharp:
  - uid: SudokuSpice.IPuzzleSolver`1.Solve(`0,System.Boolean)
    name: Solve
    nameWithType: IPuzzleSolver<TPuzzle>.Solve
    fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.Solve
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IPuzzleSolver`1.Solve(`0,System.Boolean)
    name: Solve
    nameWithType: IPuzzleSolver(Of TPuzzle).Solve
    fullName: SudokuSpice.IPuzzleSolver(Of TPuzzle).Solve
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: '{TPuzzle}'
  commentId: '!:TPuzzle'
  definition: TPuzzle
  name: TPuzzle
  nameWithType: TPuzzle
  fullName: TPuzzle
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.IPuzzleSolver`1.Solve(`0,System.Boolean)
  commentId: M:SudokuSpice.IPuzzleSolver`1.Solve(`0,System.Boolean)
  isExternal: true
  name: Solve(TPuzzle, Boolean)
  nameWithType: IPuzzleSolver<TPuzzle>.Solve(TPuzzle, Boolean)
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.Solve(TPuzzle, System.Boolean)
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).Solve(TPuzzle, Boolean)
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).Solve(TPuzzle, System.Boolean)
  spec.csharp:
  - uid: SudokuSpice.IPuzzleSolver`1.Solve(`0,System.Boolean)
    name: Solve
    nameWithType: IPuzzleSolver<TPuzzle>.Solve
    fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.Solve
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IPuzzleSolver`1.Solve(`0,System.Boolean)
    name: Solve
    nameWithType: IPuzzleSolver(Of TPuzzle).Solve
    fullName: SudokuSpice.IPuzzleSolver(Of TPuzzle).Solve
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TPuzzle
  name: TPuzzle
  nameWithType: TPuzzle
  fullName: TPuzzle
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.TrySolve*
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.TrySolve
  name: TrySolve
  nameWithType: PuzzleSolver<TPuzzle>.TrySolve
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.TrySolve
  nameWithType.vb: PuzzleSolver(Of TPuzzle).TrySolve
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).TrySolve
- uid: SudokuSpice.IPuzzleSolver{{TPuzzle}}.TrySolve({TPuzzle},System.Boolean)
  commentId: M:SudokuSpice.IPuzzleSolver{`0}.TrySolve(`0,System.Boolean)
  parent: SudokuSpice.IPuzzleSolver{{TPuzzle}}
  definition: SudokuSpice.IPuzzleSolver`1.TrySolve(`0,System.Boolean)
  name: TrySolve(TPuzzle, Boolean)
  nameWithType: IPuzzleSolver<TPuzzle>.TrySolve(TPuzzle, Boolean)
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.TrySolve(TPuzzle, System.Boolean)
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).TrySolve(TPuzzle, Boolean)
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).TrySolve(TPuzzle, System.Boolean)
  spec.csharp:
  - uid: SudokuSpice.IPuzzleSolver`1.TrySolve(`0,System.Boolean)
    name: TrySolve
    nameWithType: IPuzzleSolver<TPuzzle>.TrySolve
    fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.TrySolve
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IPuzzleSolver`1.TrySolve(`0,System.Boolean)
    name: TrySolve
    nameWithType: IPuzzleSolver(Of TPuzzle).TrySolve
    fullName: SudokuSpice.IPuzzleSolver(Of TPuzzle).TrySolve
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IPuzzleSolver`1.TrySolve(`0,System.Boolean)
  commentId: M:SudokuSpice.IPuzzleSolver`1.TrySolve(`0,System.Boolean)
  isExternal: true
  name: TrySolve(TPuzzle, Boolean)
  nameWithType: IPuzzleSolver<TPuzzle>.TrySolve(TPuzzle, Boolean)
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.TrySolve(TPuzzle, System.Boolean)
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).TrySolve(TPuzzle, Boolean)
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).TrySolve(TPuzzle, System.Boolean)
  spec.csharp:
  - uid: SudokuSpice.IPuzzleSolver`1.TrySolve(`0,System.Boolean)
    name: TrySolve
    nameWithType: IPuzzleSolver<TPuzzle>.TrySolve
    fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.TrySolve
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IPuzzleSolver`1.TrySolve(`0,System.Boolean)
    name: TrySolve
    nameWithType: IPuzzleSolver(Of TPuzzle).TrySolve
    fullName: SudokuSpice.IPuzzleSolver(Of TPuzzle).TrySolve
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.ComputeStatsForAllSolutions*
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.ComputeStatsForAllSolutions
  name: ComputeStatsForAllSolutions
  nameWithType: PuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions
  nameWithType.vb: PuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions
- uid: SudokuSpice.IPuzzleSolver{{TPuzzle}}.ComputeStatsForAllSolutions({TPuzzle},System.Nullable{System.Threading.CancellationToken})
  commentId: M:SudokuSpice.IPuzzleSolver{`0}.ComputeStatsForAllSolutions(`0,System.Nullable{System.Threading.CancellationToken})
  parent: SudokuSpice.IPuzzleSolver{{TPuzzle}}
  definition: SudokuSpice.IPuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{System.Threading.CancellationToken})
  name: ComputeStatsForAllSolutions(TPuzzle, Nullable<CancellationToken>)
  nameWithType: IPuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions(TPuzzle, Nullable<CancellationToken>)
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions(TPuzzle, System.Nullable<System.Threading.CancellationToken>)
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions(TPuzzle, Nullable(Of CancellationToken))
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions(TPuzzle, System.Nullable(Of System.Threading.CancellationToken))
  name.vb: ComputeStatsForAllSolutions(TPuzzle, Nullable(Of CancellationToken))
  spec.csharp:
  - uid: SudokuSpice.IPuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{System.Threading.CancellationToken})
    name: ComputeStatsForAllSolutions
    nameWithType: IPuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions
    fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IPuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{System.Threading.CancellationToken})
    name: ComputeStatsForAllSolutions
    nameWithType: IPuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions
    fullName: SudokuSpice.IPuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
  isExternal: true
- uid: System.Nullable{System.Threading.CancellationToken}
  commentId: T:System.Nullable{System.Threading.CancellationToken}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CancellationToken>
  nameWithType: Nullable<CancellationToken>
  fullName: System.Nullable<System.Threading.CancellationToken>
  nameWithType.vb: Nullable(Of CancellationToken)
  fullName.vb: System.Nullable(Of System.Threading.CancellationToken)
  name.vb: Nullable(Of CancellationToken)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.SolveStats
  commentId: T:SudokuSpice.SolveStats
  parent: SudokuSpice
  name: SolveStats
  nameWithType: SolveStats
  fullName: SudokuSpice.SolveStats
- uid: SudokuSpice.IPuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{System.Threading.CancellationToken})
  commentId: M:SudokuSpice.IPuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{System.Threading.CancellationToken})
  isExternal: true
  name: ComputeStatsForAllSolutions(TPuzzle, Nullable<CancellationToken>)
  nameWithType: IPuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions(TPuzzle, Nullable<CancellationToken>)
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions(TPuzzle, System.Nullable<System.Threading.CancellationToken>)
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions(TPuzzle, Nullable(Of CancellationToken))
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions(TPuzzle, System.Nullable(Of System.Threading.CancellationToken))
  name.vb: ComputeStatsForAllSolutions(TPuzzle, Nullable(Of CancellationToken))
  spec.csharp:
  - uid: SudokuSpice.IPuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{System.Threading.CancellationToken})
    name: ComputeStatsForAllSolutions
    nameWithType: IPuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions
    fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IPuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{System.Threading.CancellationToken})
    name: ComputeStatsForAllSolutions
    nameWithType: IPuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions
    fullName: SudokuSpice.IPuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.HasUniqueSolution*
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.HasUniqueSolution
  name: HasUniqueSolution
  nameWithType: PuzzleSolver<TPuzzle>.HasUniqueSolution
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.HasUniqueSolution
  nameWithType.vb: PuzzleSolver(Of TPuzzle).HasUniqueSolution
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).HasUniqueSolution
- uid: SudokuSpice.IPuzzleSolver{{TPuzzle}}.HasUniqueSolution({TPuzzle},System.Nullable{System.Threading.CancellationToken})
  commentId: M:SudokuSpice.IPuzzleSolver{`0}.HasUniqueSolution(`0,System.Nullable{System.Threading.CancellationToken})
  parent: SudokuSpice.IPuzzleSolver{{TPuzzle}}
  definition: SudokuSpice.IPuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{System.Threading.CancellationToken})
  name: HasUniqueSolution(TPuzzle, Nullable<CancellationToken>)
  nameWithType: IPuzzleSolver<TPuzzle>.HasUniqueSolution(TPuzzle, Nullable<CancellationToken>)
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.HasUniqueSolution(TPuzzle, System.Nullable<System.Threading.CancellationToken>)
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).HasUniqueSolution(TPuzzle, Nullable(Of CancellationToken))
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).HasUniqueSolution(TPuzzle, System.Nullable(Of System.Threading.CancellationToken))
  name.vb: HasUniqueSolution(TPuzzle, Nullable(Of CancellationToken))
  spec.csharp:
  - uid: SudokuSpice.IPuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{System.Threading.CancellationToken})
    name: HasUniqueSolution
    nameWithType: IPuzzleSolver<TPuzzle>.HasUniqueSolution
    fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.HasUniqueSolution
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IPuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{System.Threading.CancellationToken})
    name: HasUniqueSolution
    nameWithType: IPuzzleSolver(Of TPuzzle).HasUniqueSolution
    fullName: SudokuSpice.IPuzzleSolver(Of TPuzzle).HasUniqueSolution
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IPuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{System.Threading.CancellationToken})
  commentId: M:SudokuSpice.IPuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{System.Threading.CancellationToken})
  isExternal: true
  name: HasUniqueSolution(TPuzzle, Nullable<CancellationToken>)
  nameWithType: IPuzzleSolver<TPuzzle>.HasUniqueSolution(TPuzzle, Nullable<CancellationToken>)
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.HasUniqueSolution(TPuzzle, System.Nullable<System.Threading.CancellationToken>)
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).HasUniqueSolution(TPuzzle, Nullable(Of CancellationToken))
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).HasUniqueSolution(TPuzzle, System.Nullable(Of System.Threading.CancellationToken))
  name.vb: HasUniqueSolution(TPuzzle, Nullable(Of CancellationToken))
  spec.csharp:
  - uid: SudokuSpice.IPuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{System.Threading.CancellationToken})
    name: HasUniqueSolution
    nameWithType: IPuzzleSolver<TPuzzle>.HasUniqueSolution
    fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.HasUniqueSolution
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.IPuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{System.Threading.CancellationToken})
    name: HasUniqueSolution
    nameWithType: IPuzzleSolver(Of TPuzzle).HasUniqueSolution
    fullName: SudokuSpice.IPuzzleSolver(Of TPuzzle).HasUniqueSolution
  - name: (
    nameWithType: (
    fullName: (
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
