### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  id: UniqueInRowHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  children:
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  langs:
  - csharp
  - vb
  name: UniqueInRowHeuristic
  nameWithType: UniqueInRowHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: UniqueInRowHeuristic
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 15
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nChecks for any squares that are the unique provider of a given possible value within a row.\nSets the possible values for those squares to just their unique value.\n"
  remarks: "\nFor example, if a row had three unset squares with possible values: <code>A: [1, 2]</code>,\n<code>B: [1, 2]</code>, and <code>C: [1, 2, 3]</code>, then this would set <code>C</code>&apos;s possible values\nto <code>[3]</code>.\n"
  example: []
  syntax:
    content: 'public class UniqueInRowHeuristic : UniqueInXHeuristic, ISudokuHeuristic'
    content.vb: >-
      Public Class UniqueInRowHeuristic
          Inherits UniqueInXHeuristic
          Implements ISudokuHeuristic
  inheritance:
  - System.Object
  - SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  implements:
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  inheritedMembers:
  - SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  - SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate
  - SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  id: '#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)'
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: UniqueInRowHeuristic(IMissingRowValuesTracker)
  nameWithType: UniqueInRowHeuristic.UniqueInRowHeuristic(IMissingRowValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UniqueInRowHeuristic(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 26
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nCreates the heuristic.\n"
  example: []
  syntax:
    content: public UniqueInRowHeuristic(IMissingRowValuesTracker rowValuesTracker)
    parameters:
    - id: rowValuesTracker
      type: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
      description: "\nSomething that tracks the possible values for each row. Rules often do this already,\nfor example.\n"
    content.vb: Public Sub New(rowValuesTracker As IMissingRowValuesTracker)
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  id: CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType: UniqueInRowHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CopyWithNewReferences
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 44
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nCreates a deep copy of this heuristic. Requires <code>rules</code> to contain an\n<xref href=\"SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override ISudokuHeuristic CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues puzzle, IReadOnlyList<ISudokuRule> rules)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    - id: rules
      type: IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
    return:
      type: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
    content.vb: Public Overrides Function CopyWithNewReferences(puzzle As IReadOnlyPuzzleWithMutablePossibleValues, rules As IReadOnlyList(Of ISudokuRule)) As ISudokuHeuristic
  overridden: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences*
  nameWithType.vb: UniqueInRowHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  id: GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: GetNumDimensions(IReadOnlyPuzzle)
  nameWithType: UniqueInRowHeuristic.GetNumDimensions(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetNumDimensions
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 52
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  syntax:
    content: protected override int GetNumDimensions(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzle
    return:
      type: System.Int32
    content.vb: Protected Overrides Function GetNumDimensions(puzzle As IReadOnlyPuzzle) As Integer
  overridden: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  id: GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: GetMissingValuesForDimension(Int32, IReadOnlyPuzzle)
  nameWithType: UniqueInRowHeuristic.GetMissingValuesForDimension(Int32, IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension(System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetMissingValuesForDimension
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 53
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  syntax:
    content: protected override BitVector GetMissingValuesForDimension(int row, IReadOnlyPuzzle _)
    parameters:
    - id: row
      type: System.Int32
    - id: _
      type: SudokuSpice.RuleBased.IReadOnlyPuzzle
    return:
      type: SudokuSpice.RuleBased.BitVector
    content.vb: Protected Overrides Function GetMissingValuesForDimension(row As Integer, _ As IReadOnlyPuzzle) As BitVector
  overridden: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  id: GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: GetUnsetCoordinatesOnDimension(Int32, IReadOnlyPuzzle)
  nameWithType: UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension(Int32, IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension(System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetUnsetCoordinatesOnDimension
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 54
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  syntax:
    content: protected override IEnumerable<Coordinate> GetUnsetCoordinatesOnDimension(int row, IReadOnlyPuzzle puzzle)
    parameters:
    - id: row
      type: System.Int32
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzle
    return:
      type: IEnumerable{SudokuSpice.Coordinate}
    content.vb: Protected Overrides Function GetUnsetCoordinatesOnDimension(row As Integer, puzzle As IReadOnlyPuzzle) As IEnumerable(Of Coordinate)
  overridden: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: SudokuSpice.RuleBased.Heuristics
  commentId: N:SudokuSpice.RuleBased.Heuristics
  name: SudokuSpice.RuleBased.Heuristics
  nameWithType: SudokuSpice.RuleBased.Heuristics
  fullName: SudokuSpice.RuleBased.Heuristics
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  name: UniqueInXHeuristic
  nameWithType: UniqueInXHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  name: ISudokuHeuristic
  nameWithType: ISudokuHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInXHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: TryInitFor
    nameWithType: UniqueInXHeuristic.TryInitFor
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: TryInitFor
    nameWithType: UniqueInXHeuristic.TryInitFor
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  name: UndoLastUpdate()
  nameWithType: UniqueInXHeuristic.UndoLastUpdate()
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate
    name: UndoLastUpdate
    nameWithType: UniqueInXHeuristic.UndoLastUpdate
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate
    name: UndoLastUpdate
    nameWithType: UniqueInXHeuristic.UndoLastUpdate
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  name: UpdateAll()
  nameWithType: UniqueInXHeuristic.UpdateAll()
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll
    name: UpdateAll
    nameWithType: UniqueInXHeuristic.UpdateAll
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll
    name: UpdateAll
    nameWithType: UniqueInXHeuristic.UpdateAll
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor
  name: UniqueInRowHeuristic
  nameWithType: UniqueInRowHeuristic.UniqueInRowHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UniqueInRowHeuristic
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingRowValuesTracker
  nameWithType: IMissingRowValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
- uid: SudokuSpice.RuleBased.Rules
  commentId: N:SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  isExternal: true
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType: UniqueInXHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  nameWithType.vb: UniqueInXHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
    name: CopyWithNewReferences
    nameWithType: UniqueInXHeuristic.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
    name: CopyWithNewReferences
    nameWithType: UniqueInXHeuristic.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences
  name: CopyWithNewReferences
  nameWithType: UniqueInRowHeuristic.CopyWithNewReferences
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzleWithMutablePossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
- uid: IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
  commentId: '!:IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<ISudokuRule>
  nameWithType: IReadOnlyList<ISudokuRule>
  fullName: IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>
  nameWithType.vb: IReadOnlyList(Of ISudokuRule)
  fullName.vb: IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule)
  name.vb: IReadOnlyList(Of ISudokuRule)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  name: GetNumDimensions(IReadOnlyPuzzle)
  nameWithType: UniqueInXHeuristic.GetNumDimensions(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: GetNumDimensions
    nameWithType: UniqueInXHeuristic.GetNumDimensions
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: GetNumDimensions
    nameWithType: UniqueInXHeuristic.GetNumDimensions
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions
  name: GetNumDimensions
  nameWithType: UniqueInRowHeuristic.GetNumDimensions
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzle
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  isExternal: true
  name: GetMissingValuesForDimension(Int32, IReadOnlyPuzzle)
  nameWithType: UniqueInXHeuristic.GetMissingValuesForDimension(Int32, IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension(System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: GetMissingValuesForDimension
    nameWithType: UniqueInXHeuristic.GetMissingValuesForDimension
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: GetMissingValuesForDimension
    nameWithType: UniqueInXHeuristic.GetMissingValuesForDimension
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension
  name: GetMissingValuesForDimension
  nameWithType: UniqueInRowHeuristic.GetMissingValuesForDimension
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension
- uid: SudokuSpice.RuleBased.BitVector
  commentId: T:SudokuSpice.RuleBased.BitVector
  parent: SudokuSpice.RuleBased
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.RuleBased.BitVector
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  isExternal: true
  name: GetUnsetCoordinatesOnDimension(Int32, IReadOnlyPuzzle)
  nameWithType: UniqueInXHeuristic.GetUnsetCoordinatesOnDimension(Int32, IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension(System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: GetUnsetCoordinatesOnDimension
    nameWithType: UniqueInXHeuristic.GetUnsetCoordinatesOnDimension
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
    name: GetUnsetCoordinatesOnDimension
    nameWithType: UniqueInXHeuristic.GetUnsetCoordinatesOnDimension
    fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension
  name: GetUnsetCoordinatesOnDimension
  nameWithType: UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension
- uid: IEnumerable{SudokuSpice.Coordinate}
  commentId: '!:IEnumerable{SudokuSpice.Coordinate}'
  definition: IEnumerable`1
  name: IEnumerable<Coordinate>
  nameWithType: IEnumerable<Coordinate>
  fullName: IEnumerable<SudokuSpice.Coordinate>
  nameWithType.vb: IEnumerable(Of Coordinate)
  fullName.vb: IEnumerable(Of SudokuSpice.Coordinate)
  name.vb: IEnumerable(Of Coordinate)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
