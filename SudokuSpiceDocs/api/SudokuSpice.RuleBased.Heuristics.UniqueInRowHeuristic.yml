### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  id: UniqueInRowHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  children:
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
  langs:
  - csharp
  - vb
  name: UniqueInRowHeuristic
  nameWithType: UniqueInRowHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: UniqueInRowHeuristic
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 17
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nChecks for any squares that are the unique provider of a given possible value within a row.\nSets the possible values for those squares to just their unique value.\n"
  remarks: "\nFor example, if a row had three unset squares with possible values: <code>A: [1, 2]</code>,\n<code>B: [1, 2]</code>, and <code>C: [1, 2, 3]</code>, then this would set <code>C</code>&apos;s possible values\nto <code>[3]</code>.\n"
  example: []
  syntax:
    content: 'public class UniqueInRowHeuristic : object, IHeuristic'
    content.vb: >-
      Public Class UniqueInRowHeuristic
          Inherits Object
          Implements IHeuristic
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.RuleBased.Heuristics.IHeuristic
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  id: '#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)'
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: UniqueInRowHeuristic(IMissingRowValuesTracker)
  nameWithType: UniqueInRowHeuristic.UniqueInRowHeuristic(IMissingRowValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UniqueInRowHeuristic(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 30
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nCreates the heuristic.\n"
  example: []
  syntax:
    content: public UniqueInRowHeuristic(IMissingRowValuesTracker rowValuesTracker)
    parameters:
    - id: rowValuesTracker
      type: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
      description: "\nSomething that tracks the possible values for each row. Rules often do this already,\nfor example.\n"
    content.vb: Public Sub New(rowValuesTracker As IMissingRowValuesTracker)
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  id: CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  nameWithType: UniqueInRowHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<SudokuSpice.RuleBased.Rules.IRule>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CopyWithNewReferences
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 53
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nCreates a deep copy of this heuristic. Requires <code>rules</code> to contain an\n<xref href=\"SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IHeuristic CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues puzzle, IReadOnlyList<IRule> rules)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    - id: rules
      type: IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule}
    return:
      type: SudokuSpice.RuleBased.Heuristics.IHeuristic
    content.vb: Public Function CopyWithNewReferences(puzzle As IReadOnlyPuzzleWithMutablePossibleValues, rules As IReadOnlyList(Of IRule)) As IHeuristic
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences*
  implements:
  - SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  nameWithType.vb: UniqueInRowHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of SudokuSpice.RuleBased.Rules.IRule))
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  id: TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInRowHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TryInitFor
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 68
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nTries to initialize this heuristic for solving the given puzzle.\n"
  remarks: "\nIn general, it doesn&apos;t make sense to want to maintain the previous state if this method\nfails. Therefore, it is <em>not</em> guaranteed that the heuristic&apos;s state is unchanged\non failure.\n"
  example: []
  syntax:
    content: public bool TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
      description: The puzzle to solve.
    return:
      type: System.Boolean
      description: "\nFalse if this heuristic cannot be initialized for the given puzzle, else true.\n"
    content.vb: Public Function TryInitFor(puzzle As IReadOnlyPuzzleWithMutablePossibleValues) As Boolean
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor*
  implements:
  - SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
  id: UpdateAll
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: UpdateAll()
  nameWithType: UniqueInRowHeuristic.UpdateAll()
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: UpdateAll
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 76
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nUpdates all the current possible values.\n"
  example: []
  syntax:
    content: public bool UpdateAll()
    return:
      type: System.Boolean
      description: Returns true if any modifications were made.
    content.vb: Public Function UpdateAll As Boolean
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll*
  implements:
  - SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
  id: UndoLastUpdate
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: UndoLastUpdate()
  nameWithType: UniqueInRowHeuristic.UndoLastUpdate()
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: UndoLastUpdate
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 93
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nUndoes the last modifications made by this heuristic.\n"
  example: []
  syntax:
    content: public void UndoLastUpdate()
    content.vb: Public Sub UndoLastUpdate
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate*
  implements:
  - SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.RuleBased.Heuristics
  commentId: N:SudokuSpice.RuleBased.Heuristics
  name: SudokuSpice.RuleBased.Heuristics
  nameWithType: SudokuSpice.RuleBased.Heuristics
  fullName: SudokuSpice.RuleBased.Heuristics
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.IHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  name: IHeuristic
  nameWithType: IHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor
  name: UniqueInRowHeuristic
  nameWithType: UniqueInRowHeuristic.UniqueInRowHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UniqueInRowHeuristic
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingRowValuesTracker
  nameWithType: IMissingRowValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
- uid: SudokuSpice.RuleBased.Rules
  commentId: N:SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences
  name: CopyWithNewReferences
  nameWithType: UniqueInRowHeuristic.CopyWithNewReferences
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  commentId: M:SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  parent: SudokuSpice.RuleBased.Heuristics.IHeuristic
  isExternal: true
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  nameWithType: IHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<SudokuSpice.RuleBased.Rules.IRule>)
  nameWithType.vb: IHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
  fullName.vb: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of SudokuSpice.RuleBased.Rules.IRule))
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
    name: CopyWithNewReferences
    nameWithType: IHeuristic.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.IRule
    name: IRule
    nameWithType: IRule
    fullName: SudokuSpice.RuleBased.Rules.IRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
    name: CopyWithNewReferences
    nameWithType: IHeuristic.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.IRule
    name: IRule
    nameWithType: IRule
    fullName: SudokuSpice.RuleBased.Rules.IRule
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzleWithMutablePossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
- uid: IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule}
  commentId: '!:IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<IRule>
  nameWithType: IReadOnlyList<IRule>
  fullName: IReadOnlyList<SudokuSpice.RuleBased.Rules.IRule>
  nameWithType.vb: IReadOnlyList(Of IRule)
  fullName.vb: IReadOnlyList(Of SudokuSpice.RuleBased.Rules.IRule)
  name.vb: IReadOnlyList(Of IRule)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.IRule
    name: IRule
    nameWithType: IRule
    fullName: SudokuSpice.RuleBased.Rules.IRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.IRule
    name: IRule
    nameWithType: IRule
    fullName: SudokuSpice.RuleBased.Rules.IRule
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor
  name: TryInitFor
  nameWithType: UniqueInRowHeuristic.TryInitFor
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.Heuristics.IHeuristic
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: IHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: TryInitFor
    nameWithType: IHeuristic.TryInitFor
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
    name: TryInitFor
    nameWithType: IHeuristic.TryInitFor
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    name: IReadOnlyPuzzleWithMutablePossibleValues
    nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
    fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
  name: UpdateAll
  nameWithType: UniqueInRowHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  parent: SudokuSpice.RuleBased.Heuristics.IHeuristic
  name: UpdateAll()
  nameWithType: IHeuristic.UpdateAll()
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
    name: UpdateAll
    nameWithType: IHeuristic.UpdateAll
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
    name: UpdateAll
    nameWithType: IHeuristic.UpdateAll
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
  name: UndoLastUpdate
  nameWithType: UniqueInRowHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  parent: SudokuSpice.RuleBased.Heuristics.IHeuristic
  name: UndoLastUpdate()
  nameWithType: IHeuristic.UndoLastUpdate()
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
    name: UndoLastUpdate
    nameWithType: IHeuristic.UndoLastUpdate
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
    name: UndoLastUpdate
    nameWithType: IHeuristic.UndoLastUpdate
    fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
