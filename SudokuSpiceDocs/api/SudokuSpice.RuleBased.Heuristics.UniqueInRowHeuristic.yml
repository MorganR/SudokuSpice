### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  id: UniqueInRowHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  children:
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.PossibleValues,SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor(SudokuSpice.IReadOnlyPuzzle)
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
  - SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
  langs:
  - csharp
  - vb
  name: UniqueInRowHeuristic
  nameWithType: UniqueInRowHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: UniqueInRowHeuristic
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 17
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nChecks for any squares that are the unique provider of a given possible value within a row.\nSets the possible values for those squares to just their unique value.\n"
  remarks: "\nFor example, if a row had three unset squares with possible values: <code>A: [1, 2]</code>,\n<code>B: [1, 2]</code>, and <code>C: [1, 2, 3]</code>, then this would set <code>C</code>&apos;s possible values\nto <code>[3]</code>.\n"
  example: []
  syntax:
    content: 'public class UniqueInRowHeuristic : ISudokuHeuristic'
    content.vb: >-
      Public Class UniqueInRowHeuristic
          Implements ISudokuHeuristic
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.PossibleValues,SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.PossibleValues,SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  id: '#ctor(SudokuSpice.RuleBased.PossibleValues,SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)'
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: UniqueInRowHeuristic(PossibleValues, IMissingRowValuesTracker)
  nameWithType: UniqueInRowHeuristic.UniqueInRowHeuristic(PossibleValues, IMissingRowValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UniqueInRowHeuristic(SudokuSpice.RuleBased.PossibleValues, SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 36
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nCreates the heuristic.\n"
  example: []
  syntax:
    content: public UniqueInRowHeuristic(PossibleValues possibleValues, IMissingRowValuesTracker rowValuesTracker)
    parameters:
    - id: possibleValues
      type: SudokuSpice.RuleBased.PossibleValues
      description: "\nThe shared possible values instance to use when solving.\n"
    - id: rowValuesTracker
      type: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
      description: "\nSomething that tracks the possible values for each row. Rules often do this already,\nfor example.\n"
    content.vb: Public Sub New(possibleValues As PossibleValues, rowValuesTracker As IMissingRowValuesTracker)
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  id: CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType: UniqueInRowHeuristic.CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues, IReadOnlyList<ISudokuRule>)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.RuleBased.PossibleValues, System.Collections.Generic.IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CopyWithNewReferences
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 63
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nCreates a deep copy of this heuristic. Requires <code>rules</code> to contain an\n<xref href=\"SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ISudokuHeuristic CopyWithNewReferences(IReadOnlyPuzzle puzzle, PossibleValues possibleValues, IReadOnlyList<ISudokuRule> rules)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
    - id: possibleValues
      type: SudokuSpice.RuleBased.PossibleValues
    - id: rules
      type: System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
    return:
      type: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
    content.vb: Public Function CopyWithNewReferences(puzzle As IReadOnlyPuzzle, possibleValues As PossibleValues, rules As IReadOnlyList(Of ISudokuRule)) As ISudokuHeuristic
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences*
  implements:
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  nameWithType.vb: UniqueInRowHeuristic.CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues, IReadOnlyList(Of ISudokuRule))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.RuleBased.PossibleValues, System.Collections.Generic.IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  name.vb: CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues, IReadOnlyList(Of ISudokuRule))
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor(SudokuSpice.IReadOnlyPuzzle)
  id: TryInitFor(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: TryInitFor(IReadOnlyPuzzle)
  nameWithType: UniqueInRowHeuristic.TryInitFor(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor(SudokuSpice.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: TryInitFor
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 78
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nTries to initialize this heuristic for solving the given puzzle.\n"
  remarks: "\nIn general, it doesn&apos;t make sense to want to maintain the previous state if this method\nfails. Therefore, it is <em>not</em> guaranteed that the heuristic&apos;s state is unchanged\non failure.\n"
  example: []
  syntax:
    content: public bool TryInitFor(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: The puzzle to solve.
    return:
      type: System.Boolean
      description: "\nFalse if this heuristic cannot be initialized for the given puzzle, else true.\n"
    content.vb: Public Function TryInitFor(puzzle As IReadOnlyPuzzle) As Boolean
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor*
  implements:
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.IReadOnlyPuzzle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
  id: UpdateAll
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: UpdateAll()
  nameWithType: UniqueInRowHeuristic.UpdateAll()
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: UpdateAll
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 88
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nUpdates all the current possible values.\n"
  example: []
  syntax:
    content: public bool UpdateAll()
    return:
      type: System.Boolean
      description: Returns true if any modifications were made.
    content.vb: Public Function UpdateAll As Boolean
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll*
  implements:
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
  id: UndoLastUpdate
  parent: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  langs:
  - csharp
  - vb
  name: UndoLastUpdate()
  nameWithType: UniqueInRowHeuristic.UndoLastUpdate()
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: UndoLastUpdate
    path: ../SudokuSpice/RuleBased/Heuristics/UniqueInRowHeuristic.cs
    startLine: 102
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nUndoes the last modifications made by this heuristic.\n"
  example: []
  syntax:
    content: public void UndoLastUpdate()
    content.vb: Public Sub UndoLastUpdate
  overload: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate*
  implements:
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.RuleBased.Heuristics
  commentId: N:SudokuSpice.RuleBased.Heuristics
  name: SudokuSpice.RuleBased.Heuristics
  nameWithType: SudokuSpice.RuleBased.Heuristics
  fullName: SudokuSpice.RuleBased.Heuristics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  name: ISudokuHeuristic
  nameWithType: ISudokuHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor
  name: UniqueInRowHeuristic
  nameWithType: UniqueInRowHeuristic.UniqueInRowHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UniqueInRowHeuristic
- uid: SudokuSpice.RuleBased.PossibleValues
  commentId: T:SudokuSpice.RuleBased.PossibleValues
  parent: SudokuSpice.RuleBased
  name: PossibleValues
  nameWithType: PossibleValues
  fullName: SudokuSpice.RuleBased.PossibleValues
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingRowValuesTracker
  nameWithType: IMissingRowValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.Rules
  commentId: N:SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences
  name: CopyWithNewReferences
  nameWithType: UniqueInRowHeuristic.CopyWithNewReferences
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  parent: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  isExternal: true
  name: CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType: ISudokuHeuristic.CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues, IReadOnlyList<ISudokuRule>)
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.RuleBased.PossibleValues, System.Collections.Generic.IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  nameWithType.vb: ISudokuHeuristic.CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues, IReadOnlyList(Of ISudokuRule))
  fullName.vb: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.RuleBased.PossibleValues, System.Collections.Generic.IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  name.vb: CopyWithNewReferences(IReadOnlyPuzzle, PossibleValues, IReadOnlyList(Of ISudokuRule))
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
    name: CopyWithNewReferences
    nameWithType: ISudokuHeuristic.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.PossibleValues
    name: PossibleValues
    nameWithType: PossibleValues
    fullName: SudokuSpice.RuleBased.PossibleValues
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.RuleBased.PossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
    name: CopyWithNewReferences
    nameWithType: ISudokuHeuristic.CopyWithNewReferences
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.RuleBased.PossibleValues
    name: PossibleValues
    nameWithType: PossibleValues
    fullName: SudokuSpice.RuleBased.PossibleValues
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
  commentId: T:System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ISudokuRule>
  nameWithType: IReadOnlyList<ISudokuRule>
  fullName: System.Collections.Generic.IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>
  nameWithType.vb: IReadOnlyList(Of ISudokuRule)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule)
  name.vb: IReadOnlyList(Of ISudokuRule)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor
  name: TryInitFor
  nameWithType: UniqueInRowHeuristic.TryInitFor
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  name: TryInitFor(IReadOnlyPuzzle)
  nameWithType: ISudokuHeuristic.TryInitFor(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.IReadOnlyPuzzle)
    name: TryInitFor
    nameWithType: ISudokuHeuristic.TryInitFor
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.IReadOnlyPuzzle)
    name: TryInitFor
    nameWithType: ISudokuHeuristic.TryInitFor
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
  name: UpdateAll
  nameWithType: UniqueInRowHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  parent: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  name: UpdateAll()
  nameWithType: ISudokuHeuristic.UpdateAll()
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
    name: UpdateAll
    nameWithType: ISudokuHeuristic.UpdateAll
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
    name: UpdateAll
    nameWithType: ISudokuHeuristic.UpdateAll
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
  name: UndoLastUpdate
  nameWithType: UniqueInRowHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  parent: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  name: UndoLastUpdate()
  nameWithType: ISudokuHeuristic.UndoLastUpdate()
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate()
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
    name: UndoLastUpdate
    nameWithType: ISudokuHeuristic.UndoLastUpdate
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
    name: UndoLastUpdate
    nameWithType: ISudokuHeuristic.UndoLastUpdate
    fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
