### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  commentId: T:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  id: ColumnUniquenessRule
  parent: SudokuSpice.RuleBased.Rules
  children:
  - SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  - SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  - SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn(System.Int32)
  - SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  - SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  - SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  - SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  langs:
  - csharp
  - vb
  name: ColumnUniquenessRule
  nameWithType: ColumnUniquenessRule
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  type: Class
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: ColumnUniquenessRule
    path: ../SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
    startLine: 8
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  summary: "\nRestricts that each column contains all unique values.\n"
  example: []
  syntax:
    content: 'public class ColumnUniquenessRule : IMissingColumnValuesTracker, ISudokuRule'
    content.vb: >-
      Public Class ColumnUniquenessRule

          Implements IMissingColumnValuesTracker, ISudokuRule
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  - SudokuSpice.RuleBased.Rules.ISudokuRule
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  id: '#ctor(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)'
  parent: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  langs:
  - csharp
  - vb
  name: ColumnUniquenessRule(IReadOnlyPuzzle, BitVector)
  nameWithType: ColumnUniquenessRule.ColumnUniquenessRule(IReadOnlyPuzzle, BitVector)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.ColumnUniquenessRule(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
    startLine: 13
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  syntax:
    content: public ColumnUniquenessRule(IReadOnlyPuzzle puzzle, BitVector allUniqueValues)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
    - id: allUniqueValues
      type: SudokuSpice.BitVector
    content.vb: Public Sub New(puzzle As IReadOnlyPuzzle, allUniqueValues As BitVector)
  overload: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  id: CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  langs:
  - csharp
  - vb
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: ColumnUniquenessRule.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: CopyWithNewReference
    path: ../SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
    startLine: 45
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public ISudokuRule CopyWithNewReference(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
    return:
      type: SudokuSpice.RuleBased.Rules.ISudokuRule
    content.vb: Public Function CopyWithNewReference(puzzle As IReadOnlyPuzzle) As ISudokuRule
  overload: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  id: GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  langs:
  - csharp
  - vb
  name: GetPossibleValues(Coordinate)
  nameWithType: ColumnUniquenessRule.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetPossibleValues
    path: ../SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
    startLine: 48
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public BitVector GetPossibleValues(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    return:
      type: SudokuSpice.BitVector
    content.vb: Public Function GetPossibleValues(ByRef c As Coordinate) As BitVector
  overload: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetPossibleValues*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  nameWithType.vb: ColumnUniquenessRule.GetPossibleValues(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  name.vb: GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn(System.Int32)
  id: GetMissingValuesForColumn(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  langs:
  - csharp
  - vb
  name: GetMissingValuesForColumn(Int32)
  nameWithType: ColumnUniquenessRule.GetMissingValuesForColumn(Int32)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetMissingValuesForColumn
    path: ../SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
    startLine: 51
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public BitVector GetMissingValuesForColumn(int col)
    parameters:
    - id: col
      type: System.Int32
    return:
      type: SudokuSpice.BitVector
    content.vb: Public Function GetMissingValuesForColumn(col As Integer) As BitVector
  overload: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn*
  implements:
  - SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  id: Revert(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  langs:
  - csharp
  - vb
  name: Revert(Coordinate, Int32)
  nameWithType: ColumnUniquenessRule.Revert(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert(SudokuSpice.Coordinate, System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Revert
    path: ../SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
    startLine: 54
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public void Revert(in Coordinate c, int val)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: val
      type: System.Int32
    content.vb: Public Sub Revert(ByRef c As Coordinate, val As Integer)
  overload: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  nameWithType.vb: ColumnUniquenessRule.Revert(ByRef Coordinate, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  id: Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  langs:
  - csharp
  - vb
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: ColumnUniquenessRule.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Revert
    path: ../SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
    startLine: 61
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public void Revert(in Coordinate c, int val, CoordinateTracker coordTracker)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: val
      type: System.Int32
    - id: coordTracker
      type: SudokuSpice.CoordinateTracker
    content.vb: Public Sub Revert(ByRef c As Coordinate, val As Integer, coordTracker As CoordinateTracker)
  overload: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  nameWithType.vb: ColumnUniquenessRule.Revert(ByRef Coordinate, Int32, CoordinateTracker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  id: Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  langs:
  - csharp
  - vb
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: ColumnUniquenessRule.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Update
    path: ../SudokuSpice/RuleBased/Rules/ColumnUniquenessRule.cs
    startLine: 68
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Rules
  example: []
  syntax:
    content: public void Update(in Coordinate c, int val, CoordinateTracker coordTracker)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    - id: val
      type: System.Int32
    - id: coordTracker
      type: SudokuSpice.CoordinateTracker
    content.vb: Public Sub Update(ByRef c As Coordinate, val As Integer, coordTracker As CoordinateTracker)
  overload: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Update*
  implements:
  - SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  nameWithType.vb: ColumnUniquenessRule.Update(ByRef Coordinate, Int32, CoordinateTracker)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
references:
- uid: SudokuSpice.RuleBased.Rules
  commentId: N:SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  parent: SudokuSpice.RuleBased.Rules
  name: IMissingColumnValuesTracker
  nameWithType: IMissingColumnValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule
  commentId: T:SudokuSpice.RuleBased.Rules.ISudokuRule
  parent: SudokuSpice.RuleBased.Rules
  name: ISudokuRule
  nameWithType: ISudokuRule
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor*
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor
  name: ColumnUniquenessRule
  nameWithType: ColumnUniquenessRule.ColumnUniquenessRule
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.ColumnUniquenessRule
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice.BitVector
  commentId: T:SudokuSpice.BitVector
  parent: SudokuSpice
  name: BitVector
  nameWithType: BitVector
  fullName: SudokuSpice.BitVector
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference*
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference
  name: CopyWithNewReference
  nameWithType: ColumnUniquenessRule.CopyWithNewReference
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  name: CopyWithNewReference(IReadOnlyPuzzle)
  nameWithType: ISudokuRule.CopyWithNewReference(IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: ISudokuRule.CopyWithNewReference
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
    name: CopyWithNewReference
    nameWithType: ISudokuRule.CopyWithNewReference
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetPossibleValues*
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetPossibleValues
  name: GetPossibleValues
  nameWithType: ColumnUniquenessRule.GetPossibleValues
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  name: GetPossibleValues(Coordinate)
  nameWithType: ISudokuRule.GetPossibleValues(Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: ISudokuRule.GetPossibleValues
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
    name: GetPossibleValues
    nameWithType: ISudokuRule.GetPossibleValues
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn*
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn
  name: GetMissingValuesForColumn
  nameWithType: ColumnUniquenessRule.GetMissingValuesForColumn
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  parent: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  isExternal: true
  name: GetMissingValuesForColumn(Int32)
  nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn(Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
    name: GetMissingValuesForColumn
    nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn
    fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
    name: GetMissingValuesForColumn
    nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn
    fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert*
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert
  name: Revert
  nameWithType: ColumnUniquenessRule.Revert
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Revert
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  isExternal: true
  name: Revert(Coordinate, Int32)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate, System.Int32)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  isExternal: true
  name: Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Revert
    nameWithType: ISudokuRule.Revert
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.CoordinateTracker
  commentId: T:SudokuSpice.CoordinateTracker
  parent: SudokuSpice
  name: CoordinateTracker
  nameWithType: CoordinateTracker
  fullName: SudokuSpice.CoordinateTracker
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Update*
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Update
  name: Update
  nameWithType: ColumnUniquenessRule.Update
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.Update
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  parent: SudokuSpice.RuleBased.Rules.ISudokuRule
  isExternal: true
  name: Update(Coordinate, Int32, CoordinateTracker)
  nameWithType: ISudokuRule.Update(Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  spec.csharp:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Update
    nameWithType: ISudokuRule.Update
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
    name: Update
    nameWithType: ISudokuRule.Update
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.Coordinate
    name: Coordinate
    nameWithType: Coordinate
    fullName: SudokuSpice.Coordinate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.CoordinateTracker
    name: CoordinateTracker
    nameWithType: CoordinateTracker
    fullName: SudokuSpice.CoordinateTracker
  - name: )
    nameWithType: )
    fullName: )
