### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.PuzzleGenerator`1
  commentId: T:SudokuSpice.ConstraintBased.PuzzleGenerator`1
  id: PuzzleGenerator`1
  parent: SudokuSpice.ConstraintBased
  children:
  - SudokuSpice.ConstraintBased.PuzzleGenerator`1.#ctor(Func{`0},IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})
  - SudokuSpice.ConstraintBased.PuzzleGenerator`1.Generate(System.Int32,TimeSpan)
  langs:
  - csharp
  - vb
  name: PuzzleGenerator<TPuzzle>
  nameWithType: PuzzleGenerator<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.PuzzleGenerator<TPuzzle>
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/PuzzleGenerator.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: PuzzleGenerator
    path: ../SudokuSpice/ConstraintBased/PuzzleGenerator.cs
    startLine: 8
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  syntax:
    content: 'public class PuzzleGenerator<TPuzzle> : object where TPuzzle : IPuzzle'
    typeParameters:
    - id: TPuzzle
    content.vb: >-
      Public Class PuzzleGenerator(Of TPuzzle As IPuzzle)
          Inherits Object
  inheritance:
  - System.Object
  nameWithType.vb: PuzzleGenerator(Of TPuzzle)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleGenerator(Of TPuzzle)
  name.vb: PuzzleGenerator(Of TPuzzle)
- uid: SudokuSpice.ConstraintBased.PuzzleGenerator`1.#ctor(Func{`0},IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})
  commentId: M:SudokuSpice.ConstraintBased.PuzzleGenerator`1.#ctor(Func{`0},IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})
  id: '#ctor(Func{`0},IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})'
  parent: SudokuSpice.ConstraintBased.PuzzleGenerator`1
  langs:
  - csharp
  - vb
  name: PuzzleGenerator(Func<TPuzzle>, IReadOnlyList<IConstraint>)
  nameWithType: PuzzleGenerator<TPuzzle>.PuzzleGenerator(Func<TPuzzle>, IReadOnlyList<IConstraint>)
  fullName: SudokuSpice.ConstraintBased.PuzzleGenerator<TPuzzle>.PuzzleGenerator(Func<TPuzzle>, IReadOnlyList<SudokuSpice.ConstraintBased.Constraints.IConstraint>)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/ConstraintBased/PuzzleGenerator.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/ConstraintBased/PuzzleGenerator.cs
    startLine: 24
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nCreates a puzzle generator to create puzzles with custom rules and type.\n"
  example: []
  syntax:
    content: public PuzzleGenerator(Func<TPuzzle> puzzleFactory, IReadOnlyList<IConstraint> constraints)
    parameters:
    - id: puzzleFactory
      type: Func{{TPuzzle}}
      description: "\nA function that constructs an empty <xref href=\"SudokuSpice.IPuzzle\" data-throw-if-not-resolved=\"false\"></xref> of the desired type and shape.\n"
    - id: constraints
      type: IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint}
    content.vb: Public Sub New(puzzleFactory As Func(Of TPuzzle), constraints As IReadOnlyList(Of IConstraint))
  overload: SudokuSpice.ConstraintBased.PuzzleGenerator`1.#ctor*
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).PuzzleGenerator(Func(Of TPuzzle), IReadOnlyList(Of IConstraint))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleGenerator(Of TPuzzle).PuzzleGenerator(Func(Of TPuzzle), IReadOnlyList(Of SudokuSpice.ConstraintBased.Constraints.IConstraint))
  name.vb: PuzzleGenerator(Func(Of TPuzzle), IReadOnlyList(Of IConstraint))
- uid: SudokuSpice.ConstraintBased.PuzzleGenerator`1.Generate(System.Int32,TimeSpan)
  commentId: M:SudokuSpice.ConstraintBased.PuzzleGenerator`1.Generate(System.Int32,TimeSpan)
  id: Generate(System.Int32,TimeSpan)
  parent: SudokuSpice.ConstraintBased.PuzzleGenerator`1
  langs:
  - csharp
  - vb
  name: Generate(Int32, TimeSpan)
  nameWithType: PuzzleGenerator<TPuzzle>.Generate(Int32, TimeSpan)
  fullName: SudokuSpice.ConstraintBased.PuzzleGenerator<TPuzzle>.Generate(System.Int32, TimeSpan)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/PuzzleGenerator.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: Generate
    path: ../SudokuSpice/ConstraintBased/PuzzleGenerator.cs
    startLine: 54
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGenerates a puzzle that has a unique solution with the given number of squares set.\n"
  remarks: "\nBe careful calling this with low values, as it can take a very long time to generate\nunique puzzles as numSquaresToSet approaches the minimum number of clues necessary to\nprovide a unique puzzle for this generator&apos;s size.\n"
  example: []
  syntax:
    content: public TPuzzle Generate(int numSquaresToSet, TimeSpan timeout)
    parameters:
    - id: numSquaresToSet
      type: System.Int32
      description: "\nThe number of squares that will be preset in the generated puzzle.\n"
    - id: timeout
      type: TimeSpan
      description: "\nThe maximum timeout during which this function can search for a unique puzzle.\nEspecially useful when trying to generate puzzles with low\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numSquaresToSet</code>.\n"
    return:
      type: '{TPuzzle}'
      description: "\nA puzzle of type <code>TPuzzle</code> with a unique solution and\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">numSquaresToSet</code> preset squares.\n"
    content.vb: Public Function Generate(numSquaresToSet As Integer, timeout As TimeSpan) As TPuzzle
  overload: SudokuSpice.ConstraintBased.PuzzleGenerator`1.Generate*
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).Generate(Int32, TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleGenerator(Of TPuzzle).Generate(System.Int32, TimeSpan)
references:
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: SudokuSpice.IPuzzle
  commentId: T:SudokuSpice.IPuzzle
  parent: SudokuSpice
  name: IPuzzle
  nameWithType: IPuzzle
  fullName: SudokuSpice.IPuzzle
- uid: SudokuSpice.ConstraintBased.SquareTracker`1
  commentId: T:SudokuSpice.ConstraintBased.SquareTracker`1
  isExternal: true
- uid: SudokuSpice.ConstraintBased.PuzzleGenerator`1.#ctor*
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleGenerator`1.#ctor
  name: PuzzleGenerator
  nameWithType: PuzzleGenerator<TPuzzle>.PuzzleGenerator
  fullName: SudokuSpice.ConstraintBased.PuzzleGenerator<TPuzzle>.PuzzleGenerator
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).PuzzleGenerator
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleGenerator(Of TPuzzle).PuzzleGenerator
- uid: Func{{TPuzzle}}
  commentId: '!:Func{`0}'
  definition: Func`1
  name: Func<TPuzzle>
  nameWithType: Func<TPuzzle>
  fullName: Func<TPuzzle>
  nameWithType.vb: Func(Of TPuzzle)
  fullName.vb: Func(Of TPuzzle)
  name.vb: Func(Of TPuzzle)
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint}
  commentId: '!:IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<IConstraint>
  nameWithType: IReadOnlyList<IConstraint>
  fullName: IReadOnlyList<SudokuSpice.ConstraintBased.Constraints.IConstraint>
  nameWithType.vb: IReadOnlyList(Of IConstraint)
  fullName.vb: IReadOnlyList(Of SudokuSpice.ConstraintBased.Constraints.IConstraint)
  name.vb: IReadOnlyList(Of IConstraint)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.Constraints.IConstraint
    name: IConstraint
    nameWithType: IConstraint
    fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.Constraints.IConstraint
    name: IConstraint
    nameWithType: IConstraint
    fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: Func`1
  commentId: '!:Func`1'
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.PuzzleGenerator`1.Generate*
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleGenerator`1.Generate
  name: Generate
  nameWithType: PuzzleGenerator<TPuzzle>.Generate
  fullName: SudokuSpice.ConstraintBased.PuzzleGenerator<TPuzzle>.Generate
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).Generate
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleGenerator(Of TPuzzle).Generate
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: '{TPuzzle}'
  commentId: '!:TPuzzle'
  definition: TPuzzle
  name: TPuzzle
  nameWithType: TPuzzle
  fullName: TPuzzle
- uid: TPuzzle
  name: TPuzzle
  nameWithType: TPuzzle
  fullName: TPuzzle
