### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  commentId: T:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  id: MagicSquaresConstraint
  parent: SudokuSpice.ConstraintBased.Constraints
  children:
  - SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor(SudokuSpice.ReadOnlySpan{System.Int32},IEnumerable{SudokuSpice.Box},System.Boolean)
  - SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  langs:
  - csharp
  - vb
  name: MagicSquaresConstraint
  nameWithType: MagicSquaresConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/MagicSquaresConstraint.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: MagicSquaresConstraint
    path: ../SudokuSpice/ConstraintBased/Constraints/MagicSquaresConstraint.cs
    startLine: 49
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nEnforces a constraint that certain regions in a puzzle must be\n<a href=\"https://en.wikipedia.org/wiki/Magic_square\">magic squares</a>, i.e. the sums of the\nvalues in each of their rows, columns, and (optionally) their diagonals add up to the same\nvalue.\n\nNote that this does <em>not</em> enforce uniqueness of values within the magic square as a\nwhole. It <em>does</em>, however, prevent value duplication within each row, column, and/or\ndiagonal. This can be combined with the <xref href=\"SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint\" data-throw-if-not-resolved=\"false\"></xref> if you need\nbox-level uniqueness.\n"
  remarks: "\nThis makes use of <xref href=\"SudokuSpice.ConstraintBased.OptionalObjective\" data-throw-if-not-resolved=\"false\"></xref> objects to construct a complicated graph.\n\nFor example, in a standard 3x3 magic square for a standard 9x9 Sudoku puzzle, the magic sum\n(i.e. required sum for each row/column/diagonal) is 15. This can be formed through various\ncombinations, eg:\n\n* 1,5,9\n* 1,6,8\n...\n\nFor each row or column or diagonal, this looks at the existing values to determine the\npossible sets. It drops impossible <xref href=\"SudokuSpice.ConstraintBased.Possibility\" data-throw-if-not-resolved=\"false\"></xref> objects, and groups the\nremaining possibilities as follows (using the 1,5,9 set as an example):\n\nIn this row/column/diagonal, create an optional objective to require that a single 1 is\nselected from these squares. Repeat for the 5 and the 9. \n\nThen, group each of these optional objectives into another optional objective that requires\nall of them to be satisfied. This defines an individual possible set for this\nrow/column/diagonal.\n\nRepeat this for all the possible sets on this row/column/diagonal. Reuse groups where\npossible, for example set 1,6,8 would use the same &quot;1&quot; grouping from set 1,5,8.\n\nNow group all these optional set objectives into a single required objective that can be\nsatisfied by any of these optional sets.\n\nIn the end, this results in a single required objective for each row/column/diagonal,\nenforcing that this row/column/diagonal is composed of one of the possible sets.\n"
  example: []
  syntax:
    content: 'public class MagicSquaresConstraint : object, IConstraint'
    content.vb: >-
      Public Class MagicSquaresConstraint
          Inherits Object
          Implements IConstraint
  inheritance:
  - System.Object
  implements:
  - SudokuSpice.ConstraintBased.Constraints.IConstraint
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor(SudokuSpice.ReadOnlySpan{System.Int32},IEnumerable{SudokuSpice.Box},System.Boolean)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor(SudokuSpice.ReadOnlySpan{System.Int32},IEnumerable{SudokuSpice.Box},System.Boolean)
  id: '#ctor(SudokuSpice.ReadOnlySpan{System.Int32},IEnumerable{SudokuSpice.Box},System.Boolean)'
  parent: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  langs:
  - csharp
  - vb
  name: MagicSquaresConstraint(ReadOnlySpan<Int32>, IEnumerable<Box>, Boolean)
  nameWithType: MagicSquaresConstraint.MagicSquaresConstraint(ReadOnlySpan<Int32>, IEnumerable<Box>, Boolean)
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.MagicSquaresConstraint(SudokuSpice.ReadOnlySpan<System.Int32>, IEnumerable<SudokuSpice.Box>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/MagicSquaresConstraint.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: .ctor
    path: ../SudokuSpice/ConstraintBased/Constraints/MagicSquaresConstraint.cs
    startLine: 75
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nConstructs a constraint that will enforce that the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">squares</code> are\nmagic squares based on the rows, columns, and, optionally, the diagonals.\n"
  example: []
  syntax:
    content: public MagicSquaresConstraint(ReadOnlySpan<int> possibleValues, IEnumerable<Box> squares, bool includeDiagonals = true)
    parameters:
    - id: possibleValues
      type: SudokuSpice.ReadOnlySpan{System.Int32}
      description: "\nThe possible values that can be in the magic squares.\n"
    - id: squares
      type: IEnumerable{SudokuSpice.Box}
      description: "\nThe locations of the magic squares.\n"
    - id: includeDiagonals
      type: System.Boolean
      description: "\nIf true, values along the diagonals of the square must also sum to the magic number.\n"
    content.vb: Public Sub New(possibleValues As ReadOnlySpan(Of Integer), squares As IEnumerable(Of Box), includeDiagonals As Boolean = True)
  overload: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor*
  nameWithType.vb: MagicSquaresConstraint.MagicSquaresConstraint(ReadOnlySpan(Of Int32), IEnumerable(Of Box), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.MagicSquaresConstraint(SudokuSpice.ReadOnlySpan(Of System.Int32), IEnumerable(Of SudokuSpice.Box), System.Boolean)
  name.vb: MagicSquaresConstraint(ReadOnlySpan(Of Int32), IEnumerable(Of Box), Boolean)
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  id: TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  parent: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  langs:
  - csharp
  - vb
  name: TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  nameWithType: MagicSquaresConstraint.TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverGraph)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/Constraints/MagicSquaresConstraint.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TryConstrain
    path: ../SudokuSpice/ConstraintBased/Constraints/MagicSquaresConstraint.cs
    startLine: 103
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased.Constraints
  summary: "\nAdds necessary <xref href=\"SudokuSpice.ConstraintBased.IObjective\" data-throw-if-not-resolved=\"false\"></xref>s and links to the given\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">graph</code> in order to solve the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">puzzle</code>\naccording to this constraint. The details here are implementation-specific.\n"
  remarks: "\nThis should skip adding objectives that are already satisfied by the given\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">puzzle</code>. Instead, it should drop the relevant\n<xref href=\"SudokuSpice.ConstraintBased.Possibility\" data-throw-if-not-resolved=\"false\"></xref>s that are no longer possible.\n\nNote: See <xref href=\"SudokuSpice.ConstraintBased.ExactCoverGraph\" data-throw-if-not-resolved=\"false\"></xref> to understand how the graph works.\n"
  example: []
  syntax:
    content: public bool TryConstrain(IReadOnlyPuzzle puzzle, ExactCoverGraph graph)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: The puzzle to solve.
    - id: graph
      type: SudokuSpice.ConstraintBased.ExactCoverGraph
      description: The exact-cover graph to constrain.
    return:
      type: System.Boolean
      description: "\nFalse if the constraint could not be satisfied by the given puzzle, else true.\n"
    content.vb: Public Function TryConstrain(puzzle As IReadOnlyPuzzle, graph As ExactCoverGraph) As Boolean
  overload: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain*
  implements:
  - SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  commentId: T:SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  name: BoxUniquenessConstraint
  nameWithType: BoxUniquenessConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
- uid: SudokuSpice.ConstraintBased.OptionalObjective
  commentId: T:SudokuSpice.ConstraintBased.OptionalObjective
  parent: SudokuSpice.ConstraintBased
  name: OptionalObjective
  nameWithType: OptionalObjective
  fullName: SudokuSpice.ConstraintBased.OptionalObjective
- uid: SudokuSpice.ConstraintBased.Possibility
  commentId: T:SudokuSpice.ConstraintBased.Possibility
  name: Possibility
  nameWithType: Possibility
  fullName: SudokuSpice.ConstraintBased.Possibility
- uid: SudokuSpice.ConstraintBased.Constraints
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint
  commentId: T:SudokuSpice.ConstraintBased.Constraints.IConstraint
  parent: SudokuSpice.ConstraintBased.Constraints
  name: IConstraint
  nameWithType: IConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor
  name: MagicSquaresConstraint
  nameWithType: MagicSquaresConstraint.MagicSquaresConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.MagicSquaresConstraint
- uid: SudokuSpice.ReadOnlySpan{System.Int32}
  commentId: '!:SudokuSpice.ReadOnlySpan{System.Int32}'
  definition: SudokuSpice.ReadOnlySpan`1
  name: ReadOnlySpan<Int32>
  nameWithType: ReadOnlySpan<Int32>
  fullName: SudokuSpice.ReadOnlySpan<System.Int32>
  nameWithType.vb: ReadOnlySpan(Of Int32)
  fullName.vb: SudokuSpice.ReadOnlySpan(Of System.Int32)
  name.vb: ReadOnlySpan(Of Int32)
  spec.csharp:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{SudokuSpice.Box}
  commentId: '!:IEnumerable{SudokuSpice.Box}'
  definition: IEnumerable`1
  name: IEnumerable<Box>
  nameWithType: IEnumerable<Box>
  fullName: IEnumerable<SudokuSpice.Box>
  nameWithType.vb: IEnumerable(Of Box)
  fullName.vb: IEnumerable(Of SudokuSpice.Box)
  name.vb: IEnumerable(Of Box)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Box
    name: Box
    nameWithType: Box
    fullName: SudokuSpice.Box
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Box
    name: Box
    nameWithType: Box
    fullName: SudokuSpice.Box
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<>
  nameWithType: ReadOnlySpan<>
  fullName: SudokuSpice.ReadOnlySpan<>
  nameWithType.vb: ReadOnlySpan(Of )
  fullName.vb: SudokuSpice.ReadOnlySpan(Of )
  name.vb: ReadOnlySpan(Of )
  spec.csharp:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: SudokuSpice.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain*
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain
  name: TryConstrain
  nameWithType: MagicSquaresConstraint.TryConstrain
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  commentId: M:SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  parent: SudokuSpice.ConstraintBased.Constraints.IConstraint
  name: TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  nameWithType: IConstraint.TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverGraph)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
    name: TryConstrain
    nameWithType: IConstraint.TryConstrain
    fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.ConstraintBased.ExactCoverGraph
    name: ExactCoverGraph
    nameWithType: ExactCoverGraph
    fullName: SudokuSpice.ConstraintBased.ExactCoverGraph
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
    name: TryConstrain
    nameWithType: IConstraint.TryConstrain
    fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain
  - name: (
    nameWithType: (
    fullName: (
  - uid: SudokuSpice.IReadOnlyPuzzle
    name: IReadOnlyPuzzle
    nameWithType: IReadOnlyPuzzle
    fullName: SudokuSpice.IReadOnlyPuzzle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SudokuSpice.ConstraintBased.ExactCoverGraph
    name: ExactCoverGraph
    nameWithType: ExactCoverGraph
    fullName: SudokuSpice.ConstraintBased.ExactCoverGraph
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverGraph
  parent: SudokuSpice.ConstraintBased
  name: ExactCoverGraph
  nameWithType: ExactCoverGraph
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
