### YamlMime:ManagedReference
items:
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  id: ISudokuHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  children:
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  - SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  langs:
  - csharp
  - vb
  name: ISudokuHeuristic
  nameWithType: ISudokuHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  type: Interface
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/ISudokuHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ISudokuHeuristic
    path: ../SudokuSpice/RuleBased/Heuristics/ISudokuHeuristic.cs
    startLine: 10
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nPerforms some logical trickery to reduce the number of possible values for a square. Unlike\nan <code>ISudokuRule</code>, this depends on the current possible values in the puzzle, not just\nthe currently set values.\n"
  example: []
  syntax:
    content: public interface ISudokuHeuristic
    content.vb: Public Interface ISudokuHeuristic
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  id: TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  parent: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  langs:
  - csharp
  - vb
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: ISudokuHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/ISudokuHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: TryInitFor
    path: ../SudokuSpice/RuleBased/Heuristics/ISudokuHeuristic.cs
    startLine: 24
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nTries to initialize this heuristic for solving the given puzzle.\n"
  remarks: "\nIn general, it doesn&apos;t make sense to want to maintain the previous state if this method\nfails. Therefore, it is <em>not</em> guaranteed that the heuristic&apos;s state is unchanged\non failure.\n"
  example: []
  syntax:
    content: bool TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
      description: The puzzle to solve.
    return:
      type: System.Boolean
      description: "\nFalse if this heuristic cannot be initialized for the given puzzle, else true.\n"
    content.vb: Function TryInitFor(puzzle As IReadOnlyPuzzleWithMutablePossibleValues) As Boolean
  overload: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor*
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  id: UpdateAll
  parent: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  langs:
  - csharp
  - vb
  name: UpdateAll()
  nameWithType: ISudokuHeuristic.UpdateAll()
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/ISudokuHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: UpdateAll
    path: ../SudokuSpice/RuleBased/Heuristics/ISudokuHeuristic.cs
    startLine: 30
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nUpdates all the current possible values.\n"
  example: []
  syntax:
    content: bool UpdateAll()
    return:
      type: System.Boolean
      description: Returns true if any modifications were made.
    content.vb: Function UpdateAll As Boolean
  overload: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll*
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  id: UndoLastUpdate
  parent: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  langs:
  - csharp
  - vb
  name: UndoLastUpdate()
  nameWithType: ISudokuHeuristic.UndoLastUpdate()
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate()
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/ISudokuHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: UndoLastUpdate
    path: ../SudokuSpice/RuleBased/Heuristics/ISudokuHeuristic.cs
    startLine: 35
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nUndoes the last modifications made by this heuristic.\n"
  example: []
  syntax:
    content: void UndoLastUpdate()
    content.vb: Sub UndoLastUpdate
  overload: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate*
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  id: CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  parent: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  langs:
  - csharp
  - vb
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType: ISudokuHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  type: Method
  source:
    remote:
      path: SudokuSpice/RuleBased/Heuristics/ISudokuHeuristic.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice.git
    id: CopyWithNewReferences
    path: ../SudokuSpice/RuleBased/Heuristics/ISudokuHeuristic.cs
    startLine: 42
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.RuleBased.Heuristics
  summary: "\nCreates a deep copy of this heuristic, replacing internal references with the ones\nprovided. These references may or may not be used during the copy, depending on the\nimplementation of the heuristic.\n"
  example: []
  syntax:
    content: ISudokuHeuristic CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues puzzle, IReadOnlyList<ISudokuRule> rules)
    parameters:
    - id: puzzle
      type: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
    - id: rules
      type: IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
    return:
      type: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
    content.vb: Function CopyWithNewReferences(puzzle As IReadOnlyPuzzleWithMutablePossibleValues, rules As IReadOnlyList(Of ISudokuRule)) As ISudokuHeuristic
  overload: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences*
  nameWithType.vb: ISudokuHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  fullName.vb: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
references:
- uid: SudokuSpice.RuleBased.Heuristics
  commentId: N:SudokuSpice.RuleBased.Heuristics
  name: SudokuSpice.RuleBased.Heuristics
  nameWithType: SudokuSpice.RuleBased.Heuristics
  fullName: SudokuSpice.RuleBased.Heuristics
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor
  name: TryInitFor
  nameWithType: ISudokuHeuristic.TryInitFor
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  parent: SudokuSpice.RuleBased
  name: IReadOnlyPuzzleWithMutablePossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.RuleBased
  commentId: N:SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  name: UpdateAll
  nameWithType: ISudokuHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  name: UndoLastUpdate
  nameWithType: ISudokuHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences*
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences
  name: CopyWithNewReferences
  nameWithType: ISudokuHeuristic.CopyWithNewReferences
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences
- uid: IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}
  commentId: '!:IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<ISudokuRule>
  nameWithType: IReadOnlyList<ISudokuRule>
  fullName: IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>
  nameWithType.vb: IReadOnlyList(Of ISudokuRule)
  fullName.vb: IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule)
  name.vb: IReadOnlyList(Of ISudokuRule)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.RuleBased.Rules.ISudokuRule
    name: ISudokuRule
    nameWithType: ISudokuRule
    fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  commentId: T:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  parent: SudokuSpice.RuleBased.Heuristics
  name: ISudokuHeuristic
  nameWithType: ISudokuHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
