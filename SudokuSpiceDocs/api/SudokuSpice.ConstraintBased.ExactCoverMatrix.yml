### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix
  id: ExactCoverMatrix
  parent: SudokuSpice.ConstraintBased
  children:
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(SudokuSpice.Coordinate@)
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn(System.Int32)
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow(System.Int32)
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  langs:
  - csharp
  - vb
  name: ExactCoverMatrix
  nameWithType: ExactCoverMatrix
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ExactCoverMatrix
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 16
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nHolds an exact-cover matrix for the current puzzle being solved.\n"
  remarks: "\nThe exact cover matrix is organized by <xref href=\"SudokuSpice.ConstraintBased.Square\" data-throw-if-not-resolved=\"false\"></xref>s, which in turn contain\n<xref href=\"SudokuSpice.ConstraintBased.PossibleSquareValue\" data-throw-if-not-resolved=\"false\"></xref>s. Each of these represents a row in the exact-cover\nmatrix. <xref href=\"SudokuSpice.ConstraintBased.Constraints.IConstraint\" data-throw-if-not-resolved=\"false\"></xref>s will then add\n<xref href=\"SudokuSpice.ConstraintBased.ConstraintHeader\" data-throw-if-not-resolved=\"false\"></xref>s, the columns of the matrix and corresponding links.\n"
  example: []
  syntax:
    content: 'public class ExactCoverMatrix : object'
    content.vb: >-
      Public Class ExactCoverMatrix
          Inherits Object
  seealso:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Exact_cover
    altText: https://en.wikipedia.org/wiki/Exact_cover
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  commentId: P:SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  id: AllPossibleValues
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: AllPossibleValues
  nameWithType: ExactCoverMatrix.AllPossibleValues
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: AllPossibleValues
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 25
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nContains the possible values for the current puzzle.\n"
  example: []
  syntax:
    content: public ReadOnlySpan<int> AllPossibleValues { get; }
    parameters: []
    return:
      type: ReadOnlySpan{System.Int32}
    content.vb: Public ReadOnly Property AllPossibleValues As ReadOnlySpan(Of Integer)
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  commentId: P:SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  id: ValuesToIndices
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: ValuesToIndices
  nameWithType: ExactCoverMatrix.ValuesToIndices
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: ValuesToIndices
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 31
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nMaps possible values for the puzzle to indices in the <xref href=\"SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues\" data-throw-if-not-resolved=\"false\"></xref>\narray.\n"
  example: []
  syntax:
    content: public IReadOnlyDictionary<int, int> ValuesToIndices { get; }
    parameters: []
    return:
      type: IReadOnlyDictionary{System.Int32,System.Int32}
    content.vb: Public ReadOnly Property ValuesToIndices As IReadOnlyDictionary(Of Integer, Integer)
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(SudokuSpice.Coordinate@)
  id: GetSquare(SudokuSpice.Coordinate@)
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: GetSquare(Coordinate)
  nameWithType: ExactCoverMatrix.GetSquare(Coordinate)
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetSquare
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 101
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets the square representing the given <xref href=\"SudokuSpice.Coordinate\" data-throw-if-not-resolved=\"false\"></xref>. This returns null if\nthe square&apos;s value was preset in the current puzzle being solved.\n"
  example: []
  syntax:
    content: public Square GetSquare(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    return:
      type: SudokuSpice.ConstraintBased.Square
    content.vb: Public Function GetSquare(ByRef c As Coordinate) As Square
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare*
  nameWithType.vb: ExactCoverMatrix.GetSquare(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(ByRef SudokuSpice.Coordinate)
  name.vb: GetSquare(ByRef Coordinate)
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow(System.Int32)
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow(System.Int32)
  id: GetSquaresOnRow(System.Int32)
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: GetSquaresOnRow(Int32)
  nameWithType: ExactCoverMatrix.GetSquaresOnRow(Int32)
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetSquaresOnRow
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 107
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets all the <xref href=\"SudokuSpice.ConstraintBased.Square\" data-throw-if-not-resolved=\"false\"></xref>s on the requested row.\n"
  example: []
  syntax:
    content: public ReadOnlySpan<Square> GetSquaresOnRow(int row)
    parameters:
    - id: row
      type: System.Int32
      description: A zero-based row index.
    return:
      type: ReadOnlySpan{SudokuSpice.ConstraintBased.Square}
    content.vb: Public Function GetSquaresOnRow(row As Integer) As ReadOnlySpan(Of Square)
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn(System.Int32)
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn(System.Int32)
  id: GetSquaresOnColumn(System.Int32)
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: GetSquaresOnColumn(Int32)
  nameWithType: ExactCoverMatrix.GetSquaresOnColumn(Int32)
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetSquaresOnColumn
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 113
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets all the <xref href=\"SudokuSpice.ConstraintBased.Square\" data-throw-if-not-resolved=\"false\"></xref>s on the requested column.\n"
  example: []
  syntax:
    content: public List<Square> GetSquaresOnColumn(int column)
    parameters:
    - id: column
      type: System.Int32
      description: A zero-based column index.
    return:
      type: List{SudokuSpice.ConstraintBased.Square}
    content.vb: Public Function GetSquaresOnColumn(column As Integer) As List(Of Square)
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders
  id: GetUnsatisfiedConstraintHeaders
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: GetUnsatisfiedConstraintHeaders()
  nameWithType: ExactCoverMatrix.GetUnsatisfiedConstraintHeaders()
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders()
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: internal-puzzle
      repo: https://github.com/MorganR/SudokuSpice.git
    id: GetUnsatisfiedConstraintHeaders
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 126
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets all the currently unsatisfied <xref href=\"SudokuSpice.ConstraintBased.ConstraintHeader\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  example: []
  syntax:
    content: public IEnumerable<ConstraintHeader> GetUnsatisfiedConstraintHeaders()
    return:
      type: IEnumerable{SudokuSpice.ConstraintBased.ConstraintHeader}
    content.vb: Public Function GetUnsatisfiedConstraintHeaders As IEnumerable(Of ConstraintHeader)
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.ConstraintBased.Square
  commentId: T:SudokuSpice.ConstraintBased.Square
  parent: SudokuSpice.ConstraintBased
  name: Square
  nameWithType: Square
  fullName: SudokuSpice.ConstraintBased.Square
- uid: SudokuSpice.ConstraintBased.PossibleSquareValue
  commentId: T:SudokuSpice.ConstraintBased.PossibleSquareValue
  parent: SudokuSpice.ConstraintBased
  name: PossibleSquareValue
  nameWithType: PossibleSquareValue
  fullName: SudokuSpice.ConstraintBased.PossibleSquareValue
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint
  commentId: T:SudokuSpice.ConstraintBased.Constraints.IConstraint
  parent: SudokuSpice.ConstraintBased.Constraints
  name: IConstraint
  nameWithType: IConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint
- uid: SudokuSpice.ConstraintBased.ConstraintHeader
  commentId: T:SudokuSpice.ConstraintBased.ConstraintHeader
  parent: SudokuSpice.ConstraintBased
  name: ConstraintHeader
  nameWithType: ConstraintHeader
  fullName: SudokuSpice.ConstraintBased.ConstraintHeader
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: SudokuSpice.ConstraintBased.Constraints
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  name: AllPossibleValues
  nameWithType: ExactCoverMatrix.AllPossibleValues
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
- uid: ReadOnlySpan{System.Int32}
  commentId: '!:ReadOnlySpan{System.Int32}'
  definition: ReadOnlySpan`1
  name: ReadOnlySpan<Int32>
  nameWithType: ReadOnlySpan<Int32>
  fullName: ReadOnlySpan<System.Int32>
  nameWithType.vb: ReadOnlySpan(Of Int32)
  fullName.vb: ReadOnlySpan(Of System.Int32)
  name.vb: ReadOnlySpan(Of Int32)
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<>
  nameWithType: ReadOnlySpan<>
  fullName: ReadOnlySpan<>
  nameWithType.vb: ReadOnlySpan(Of )
  fullName.vb: ReadOnlySpan(Of )
  name.vb: ReadOnlySpan(Of )
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  commentId: P:SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  isExternal: true
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  name: ValuesToIndices
  nameWithType: ExactCoverMatrix.ValuesToIndices
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
- uid: IReadOnlyDictionary{System.Int32,System.Int32}
  commentId: '!:IReadOnlyDictionary{System.Int32,System.Int32}'
  definition: IReadOnlyDictionary`2
  name: IReadOnlyDictionary<Int32, Int32>
  nameWithType: IReadOnlyDictionary<Int32, Int32>
  fullName: IReadOnlyDictionary<System.Int32, System.Int32>
  nameWithType.vb: IReadOnlyDictionary(Of Int32, Int32)
  fullName.vb: IReadOnlyDictionary(Of System.Int32, System.Int32)
  name.vb: IReadOnlyDictionary(Of Int32, Int32)
  spec.csharp:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyDictionary`2
  commentId: '!:IReadOnlyDictionary`2'
  isExternal: true
  name: IReadOnlyDictionary<, >
  nameWithType: IReadOnlyDictionary<, >
  fullName: IReadOnlyDictionary<, >
  nameWithType.vb: IReadOnlyDictionary(Of , )
  fullName.vb: IReadOnlyDictionary(Of , )
  name.vb: IReadOnlyDictionary(Of , )
  spec.csharp:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare
  name: GetSquare
  nameWithType: ExactCoverMatrix.GetSquare
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow
  name: GetSquaresOnRow
  nameWithType: ExactCoverMatrix.GetSquaresOnRow
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: ReadOnlySpan{SudokuSpice.ConstraintBased.Square}
  commentId: '!:ReadOnlySpan{SudokuSpice.ConstraintBased.Square}'
  definition: ReadOnlySpan`1
  name: ReadOnlySpan<Square>
  nameWithType: ReadOnlySpan<Square>
  fullName: ReadOnlySpan<SudokuSpice.ConstraintBased.Square>
  nameWithType.vb: ReadOnlySpan(Of Square)
  fullName.vb: ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square)
  name.vb: ReadOnlySpan(Of Square)
  spec.csharp:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.Square
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.Square
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn
  name: GetSquaresOnColumn
  nameWithType: ExactCoverMatrix.GetSquaresOnColumn
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn
- uid: List{SudokuSpice.ConstraintBased.Square}
  commentId: '!:List{SudokuSpice.ConstraintBased.Square}'
  definition: List`1
  name: List<Square>
  nameWithType: List<Square>
  fullName: List<SudokuSpice.ConstraintBased.Square>
  nameWithType.vb: List(Of Square)
  fullName.vb: List(Of SudokuSpice.ConstraintBased.Square)
  name.vb: List(Of Square)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.Square
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.Square
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders
  name: GetUnsatisfiedConstraintHeaders
  nameWithType: ExactCoverMatrix.GetUnsatisfiedConstraintHeaders
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders
- uid: IEnumerable{SudokuSpice.ConstraintBased.ConstraintHeader}
  commentId: '!:IEnumerable{SudokuSpice.ConstraintBased.ConstraintHeader}'
  definition: IEnumerable`1
  name: IEnumerable<ConstraintHeader>
  nameWithType: IEnumerable<ConstraintHeader>
  fullName: IEnumerable<SudokuSpice.ConstraintBased.ConstraintHeader>
  nameWithType.vb: IEnumerable(Of ConstraintHeader)
  fullName.vb: IEnumerable(Of SudokuSpice.ConstraintBased.ConstraintHeader)
  name.vb: IEnumerable(Of ConstraintHeader)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.ConstraintHeader
    name: ConstraintHeader
    nameWithType: ConstraintHeader
    fullName: SudokuSpice.ConstraintBased.ConstraintHeader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.ConstraintHeader
    name: ConstraintHeader
    nameWithType: ConstraintHeader
    fullName: SudokuSpice.ConstraintBased.ConstraintHeader
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
