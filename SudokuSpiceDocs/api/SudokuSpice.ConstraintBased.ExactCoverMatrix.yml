### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix
  id: ExactCoverMatrix
  parent: SudokuSpice.ConstraintBased
  children:
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.#ctor(SudokuSpice.IReadOnlyPuzzle)
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(SudokuSpice.Coordinate@)
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn(System.Int32)
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow(System.Int32)
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedRequirements
  - SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  langs:
  - csharp
  - vb
  name: ExactCoverMatrix
  nameWithType: ExactCoverMatrix
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: ExactCoverMatrix
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 16
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nHolds an exact-cover matrix for the current puzzle being solved.\n"
  remarks: "\nThe exact cover matrix is organized by <xref href=\"SudokuSpice.ConstraintBased.Square\" data-throw-if-not-resolved=\"false\"></xref>s, which in turn contain\n<xref href=\"SudokuSpice.ConstraintBased.Possibility\" data-throw-if-not-resolved=\"false\"></xref>s. Each of these represents a row in the exact-cover\nmatrix. <xref href=\"SudokuSpice.ConstraintBased.Constraints.IConstraint\" data-throw-if-not-resolved=\"false\"></xref>s will then add\n<xref href=\"SudokuSpice.ConstraintBased.Requirement\" data-throw-if-not-resolved=\"false\"></xref>s, the columns of the matrix and corresponding links.\n"
  example: []
  syntax:
    content: public class ExactCoverMatrix
    content.vb: Public Class ExactCoverMatrix
  seealso:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Exact_cover
    altText: https://en.wikipedia.org/wiki/Exact_cover
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  commentId: P:SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  id: AllPossibleValues
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: AllPossibleValues
  nameWithType: ExactCoverMatrix.AllPossibleValues
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: AllPossibleValues
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 25
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nContains the possible values for the current puzzle.\n"
  example: []
  syntax:
    content: public ReadOnlySpan<int> AllPossibleValues { get; }
    parameters: []
    return:
      type: System.ReadOnlySpan{System.Int32}
    content.vb: Public ReadOnly Property AllPossibleValues As ReadOnlySpan(Of Integer)
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  commentId: P:SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  id: ValuesToIndices
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: ValuesToIndices
  nameWithType: ExactCoverMatrix.ValuesToIndices
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: ValuesToIndices
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 31
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nMaps possible values for the puzzle to indices in the <xref href=\"SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues\" data-throw-if-not-resolved=\"false\"></xref>\narray.\n"
  example: []
  syntax:
    content: public IReadOnlyDictionary<int, int> ValuesToIndices { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Int32}
    content.vb: Public ReadOnly Property ValuesToIndices As IReadOnlyDictionary(Of Integer, Integer)
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.#ctor(SudokuSpice.IReadOnlyPuzzle)
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.#ctor(SudokuSpice.IReadOnlyPuzzle)
  id: '#ctor(SudokuSpice.IReadOnlyPuzzle)'
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: ExactCoverMatrix(IReadOnlyPuzzle)
  nameWithType: ExactCoverMatrix.ExactCoverMatrix(IReadOnlyPuzzle)
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.ExactCoverMatrix(SudokuSpice.IReadOnlyPuzzle)
  type: Constructor
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: .ctor
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 43
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nConstructs an empty ExactCoverMatrix for solving the given puzzle.\n\nThis matrix is essentially just a single column of row headers until\n<xref href=\"SudokuSpice.ConstraintBased.Requirement\" data-throw-if-not-resolved=\"false\"></xref>s are attached. Requirements are necessary to define the\nrelationships between squares and their possible values.\n\nRow headers are only created for unset squares in the puzzle.\n"
  example: []
  syntax:
    content: public ExactCoverMatrix(IReadOnlyPuzzle puzzle)
    parameters:
    - id: puzzle
      type: SudokuSpice.IReadOnlyPuzzle
      description: The puzzle to be solved.
    content.vb: Public Sub New(puzzle As IReadOnlyPuzzle)
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(SudokuSpice.Coordinate@)
  id: GetSquare(SudokuSpice.Coordinate@)
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: GetSquare(Coordinate)
  nameWithType: ExactCoverMatrix.GetSquare(Coordinate)
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: GetSquare
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 111
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets the square representing the given <xref href=\"SudokuSpice.Coordinate\" data-throw-if-not-resolved=\"false\"></xref>. This returns null if\nthe square&apos;s value was preset in the current puzzle being solved.\n"
  example: []
  syntax:
    content: public Square GetSquare(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    return:
      type: SudokuSpice.ConstraintBased.Square
    content.vb: Public Function GetSquare(ByRef c As Coordinate) As Square
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare*
  nameWithType.vb: ExactCoverMatrix.GetSquare(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(ByRef SudokuSpice.Coordinate)
  name.vb: GetSquare(ByRef Coordinate)
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow(System.Int32)
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow(System.Int32)
  id: GetSquaresOnRow(System.Int32)
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: GetSquaresOnRow(Int32)
  nameWithType: ExactCoverMatrix.GetSquaresOnRow(Int32)
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: GetSquaresOnRow
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 117
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets all the <xref href=\"SudokuSpice.ConstraintBased.Square\" data-throw-if-not-resolved=\"false\"></xref>s on the requested row.\n"
  example: []
  syntax:
    content: public ReadOnlySpan<Square> GetSquaresOnRow(int row)
    parameters:
    - id: row
      type: System.Int32
      description: A zero-based row index.
    return:
      type: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square}
    content.vb: Public Function GetSquaresOnRow(row As Integer) As ReadOnlySpan(Of Square)
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn(System.Int32)
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn(System.Int32)
  id: GetSquaresOnColumn(System.Int32)
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: GetSquaresOnColumn(Int32)
  nameWithType: ExactCoverMatrix.GetSquaresOnColumn(Int32)
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: GetSquaresOnColumn
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 123
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets all the <xref href=\"SudokuSpice.ConstraintBased.Square\" data-throw-if-not-resolved=\"false\"></xref>s on the requested column.\n"
  example: []
  syntax:
    content: public List<Square> GetSquaresOnColumn(int column)
    parameters:
    - id: column
      type: System.Int32
      description: A zero-based column index.
    return:
      type: System.Collections.Generic.List{SudokuSpice.ConstraintBased.Square}
    content.vb: Public Function GetSquaresOnColumn(column As Integer) As List(Of Square)
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedRequirements
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedRequirements
  id: GetUnsatisfiedRequirements
  parent: SudokuSpice.ConstraintBased.ExactCoverMatrix
  langs:
  - csharp
  - vb
  name: GetUnsatisfiedRequirements()
  nameWithType: ExactCoverMatrix.GetUnsatisfiedRequirements()
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedRequirements()
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
      branch: flexible-constraints
      repo: https://github.com/MorganR/SudokuSpice
    id: GetUnsatisfiedRequirements
    path: ../SudokuSpice/ConstraintBased/ExactCoverMatrix.cs
    startLine: 136
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets all the currently unsatisfied <xref href=\"SudokuSpice.ConstraintBased.Requirement\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  example: []
  syntax:
    content: public IEnumerable<Requirement> GetUnsatisfiedRequirements()
    return:
      type: System.Collections.Generic.IEnumerable{SudokuSpice.ConstraintBased.Requirement}
    content.vb: Public Function GetUnsatisfiedRequirements As IEnumerable(Of Requirement)
  overload: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedRequirements*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SudokuSpice.ConstraintBased.Square
  commentId: T:SudokuSpice.ConstraintBased.Square
  parent: SudokuSpice.ConstraintBased
  name: Square
  nameWithType: Square
  fullName: SudokuSpice.ConstraintBased.Square
- uid: SudokuSpice.ConstraintBased.Possibility
  commentId: T:SudokuSpice.ConstraintBased.Possibility
  parent: SudokuSpice.ConstraintBased
  name: Possibility
  nameWithType: Possibility
  fullName: SudokuSpice.ConstraintBased.Possibility
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint
  commentId: T:SudokuSpice.ConstraintBased.Constraints.IConstraint
  parent: SudokuSpice.ConstraintBased.Constraints
  name: IConstraint
  nameWithType: IConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint
- uid: SudokuSpice.ConstraintBased.Requirement
  commentId: T:SudokuSpice.ConstraintBased.Requirement
  parent: SudokuSpice.ConstraintBased
  name: Requirement
  nameWithType: Requirement
  fullName: SudokuSpice.ConstraintBased.Requirement
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.Constraints
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  name: AllPossibleValues
  nameWithType: ExactCoverMatrix.AllPossibleValues
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
- uid: System.ReadOnlySpan{System.Int32}
  commentId: T:System.ReadOnlySpan{System.Int32}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Int32>
  nameWithType: ReadOnlySpan<Int32>
  fullName: System.ReadOnlySpan<System.Int32>
  nameWithType.vb: ReadOnlySpan(Of Int32)
  fullName.vb: System.ReadOnlySpan(Of System.Int32)
  name.vb: ReadOnlySpan(Of Int32)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  commentId: P:SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  isExternal: true
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  name: ValuesToIndices
  nameWithType: ExactCoverMatrix.ValuesToIndices
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
- uid: System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Int32}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<Int32, Int32>
  nameWithType: IReadOnlyDictionary<Int32, Int32>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.Int32, System.Int32>
  nameWithType.vb: IReadOnlyDictionary(Of Int32, Int32)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.Int32, System.Int32)
  name.vb: IReadOnlyDictionary(Of Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.#ctor*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.#ctor
  name: ExactCoverMatrix
  nameWithType: ExactCoverMatrix.ExactCoverMatrix
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.ExactCoverMatrix
- uid: SudokuSpice.IReadOnlyPuzzle
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  parent: SudokuSpice
  name: IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare
  name: GetSquare
  nameWithType: ExactCoverMatrix.GetSquare
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow
  name: GetSquaresOnRow
  nameWithType: ExactCoverMatrix.GetSquaresOnRow
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square}
  commentId: T:System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Square>
  nameWithType: ReadOnlySpan<Square>
  fullName: System.ReadOnlySpan<SudokuSpice.ConstraintBased.Square>
  nameWithType.vb: ReadOnlySpan(Of Square)
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square)
  name.vb: ReadOnlySpan(Of Square)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.Square
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.Square
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn
  name: GetSquaresOnColumn
  nameWithType: ExactCoverMatrix.GetSquaresOnColumn
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn
- uid: System.Collections.Generic.List{SudokuSpice.ConstraintBased.Square}
  commentId: T:System.Collections.Generic.List{SudokuSpice.ConstraintBased.Square}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Square>
  nameWithType: List<Square>
  fullName: System.Collections.Generic.List<SudokuSpice.ConstraintBased.Square>
  nameWithType.vb: List(Of Square)
  fullName.vb: System.Collections.Generic.List(Of SudokuSpice.ConstraintBased.Square)
  name.vb: List(Of Square)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.Square
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.Square
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.ConstraintBased.Square
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedRequirements*
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedRequirements
  name: GetUnsatisfiedRequirements
  nameWithType: ExactCoverMatrix.GetUnsatisfiedRequirements
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedRequirements
- uid: System.Collections.Generic.IEnumerable{SudokuSpice.ConstraintBased.Requirement}
  commentId: T:System.Collections.Generic.IEnumerable{SudokuSpice.ConstraintBased.Requirement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Requirement>
  nameWithType: IEnumerable<Requirement>
  fullName: System.Collections.Generic.IEnumerable<SudokuSpice.ConstraintBased.Requirement>
  nameWithType.vb: IEnumerable(Of Requirement)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SudokuSpice.ConstraintBased.Requirement)
  name.vb: IEnumerable(Of Requirement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintBased.Requirement
    name: Requirement
    nameWithType: Requirement
    fullName: SudokuSpice.ConstraintBased.Requirement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintBased.Requirement
    name: Requirement
    nameWithType: Requirement
    fullName: SudokuSpice.ConstraintBased.Requirement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
