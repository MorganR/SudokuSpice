### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ExactCoverMatrix`1
  commentId: T:SudokuSpice.ExactCoverMatrix`1
  id: ExactCoverMatrix`1
  parent: SudokuSpice
  children:
  - SudokuSpice.ExactCoverMatrix`1.AllPossibleValues
  - SudokuSpice.ExactCoverMatrix`1.GetSquare(SudokuSpice.Coordinate@)
  - SudokuSpice.ExactCoverMatrix`1.GetSquaresOnColumn(System.Int32)
  - SudokuSpice.ExactCoverMatrix`1.GetSquaresOnRow(System.Int32)
  - SudokuSpice.ExactCoverMatrix`1.GetUnsatisfiedConstraintHeaders
  - SudokuSpice.ExactCoverMatrix`1.ValuesToIndices
  langs:
  - csharp
  - vb
  name: ExactCoverMatrix<TPuzzle>
  nameWithType: ExactCoverMatrix<TPuzzle>
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>
  type: Class
  source:
    remote:
      path: SudokuSpice/Data/ExactCoverMatrix.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: ExactCoverMatrix
    path: ../SudokuSpice/Data/ExactCoverMatrix.cs
    startLine: 16
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nHolds an exact-cover matrix for the current puzzle being solved.\n"
  remarks: "\nThe exact cover matrix is organized by <see cref=\"!:Square\"></see>s, which in turn contain\n<see cref=\"!:PossibleSquareValue\"></see>s. Each of these represents a row in the exact-cover\nmatrix. <see cref=\"!:SudokuSpice.Constraints.IConstraint\">IConstraint</see>s will then add\n<see cref=\"!:ConstraintHeader\"></see>s, the columns of the matrix and corresponding links.\n"
  example: []
  syntax:
    content: >-
      public class ExactCoverMatrix<TPuzzle>
          where TPuzzle : IReadOnlyPuzzle
    typeParameters:
    - id: TPuzzle
    content.vb: Public Class ExactCoverMatrix(Of TPuzzle As IReadOnlyPuzzle)
  seealso:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Exact_cover
    altText: https://en.wikipedia.org/wiki/Exact_cover
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle)
  name.vb: ExactCoverMatrix(Of TPuzzle)
- uid: SudokuSpice.ExactCoverMatrix`1.AllPossibleValues
  commentId: P:SudokuSpice.ExactCoverMatrix`1.AllPossibleValues
  id: AllPossibleValues
  parent: SudokuSpice.ExactCoverMatrix`1
  langs:
  - csharp
  - vb
  name: AllPossibleValues
  nameWithType: ExactCoverMatrix<TPuzzle>.AllPossibleValues
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>.AllPossibleValues
  type: Property
  source:
    remote:
      path: SudokuSpice/Data/ExactCoverMatrix.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: AllPossibleValues
    path: ../SudokuSpice/Data/ExactCoverMatrix.cs
    startLine: 25
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nContains the possible values for the current puzzle.\n"
  example: []
  syntax:
    content: public ReadOnlySpan<int> AllPossibleValues { get; }
    parameters: []
    return:
      type: System.ReadOnlySpan{System.Int32}
    content.vb: Public ReadOnly Property AllPossibleValues As ReadOnlySpan(Of Integer)
  overload: SudokuSpice.ExactCoverMatrix`1.AllPossibleValues*
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle).AllPossibleValues
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle).AllPossibleValues
- uid: SudokuSpice.ExactCoverMatrix`1.ValuesToIndices
  commentId: P:SudokuSpice.ExactCoverMatrix`1.ValuesToIndices
  id: ValuesToIndices
  parent: SudokuSpice.ExactCoverMatrix`1
  langs:
  - csharp
  - vb
  name: ValuesToIndices
  nameWithType: ExactCoverMatrix<TPuzzle>.ValuesToIndices
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>.ValuesToIndices
  type: Property
  source:
    remote:
      path: SudokuSpice/Data/ExactCoverMatrix.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: ValuesToIndices
    path: ../SudokuSpice/Data/ExactCoverMatrix.cs
    startLine: 31
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nMaps possible values for the puzzle to indices in the <xref href=\"SudokuSpice.ExactCoverMatrix%601.AllPossibleValues\" data-throw-if-not-resolved=\"false\"></xref>\narray.\n"
  example: []
  syntax:
    content: public IReadOnlyDictionary<int, int> ValuesToIndices { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Int32}
    content.vb: Public ReadOnly Property ValuesToIndices As IReadOnlyDictionary(Of Integer, Integer)
  overload: SudokuSpice.ExactCoverMatrix`1.ValuesToIndices*
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle).ValuesToIndices
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle).ValuesToIndices
- uid: SudokuSpice.ExactCoverMatrix`1.GetSquare(SudokuSpice.Coordinate@)
  commentId: M:SudokuSpice.ExactCoverMatrix`1.GetSquare(SudokuSpice.Coordinate@)
  id: GetSquare(SudokuSpice.Coordinate@)
  parent: SudokuSpice.ExactCoverMatrix`1
  langs:
  - csharp
  - vb
  name: GetSquare(Coordinate)
  nameWithType: ExactCoverMatrix<TPuzzle>.GetSquare(Coordinate)
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>.GetSquare(SudokuSpice.Coordinate)
  type: Method
  source:
    remote:
      path: SudokuSpice/Data/ExactCoverMatrix.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetSquare
    path: ../SudokuSpice/Data/ExactCoverMatrix.cs
    startLine: 104
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nGets the square representing the given <xref href=\"SudokuSpice.Coordinate\" data-throw-if-not-resolved=\"false\"></xref>. This returns null if\nthe square&apos;s value was preset in the current puzzle being solved.\n"
  example: []
  syntax:
    content: public Square<TPuzzle> GetSquare(in Coordinate c)
    parameters:
    - id: c
      type: SudokuSpice.Coordinate
    return:
      type: SudokuSpice.Square{{TPuzzle}}
    content.vb: Public Function GetSquare(ByRef c As Coordinate) As Square(Of TPuzzle)
  overload: SudokuSpice.ExactCoverMatrix`1.GetSquare*
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle).GetSquare(ByRef Coordinate)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle).GetSquare(ByRef SudokuSpice.Coordinate)
  name.vb: GetSquare(ByRef Coordinate)
- uid: SudokuSpice.ExactCoverMatrix`1.GetSquaresOnRow(System.Int32)
  commentId: M:SudokuSpice.ExactCoverMatrix`1.GetSquaresOnRow(System.Int32)
  id: GetSquaresOnRow(System.Int32)
  parent: SudokuSpice.ExactCoverMatrix`1
  langs:
  - csharp
  - vb
  name: GetSquaresOnRow(Int32)
  nameWithType: ExactCoverMatrix<TPuzzle>.GetSquaresOnRow(Int32)
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>.GetSquaresOnRow(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/Data/ExactCoverMatrix.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetSquaresOnRow
    path: ../SudokuSpice/Data/ExactCoverMatrix.cs
    startLine: 113
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nGets all the <see cref=\"!:Square\"></see>s on the requested row.\n"
  example: []
  syntax:
    content: public ReadOnlySpan<Square<TPuzzle>> GetSquaresOnRow(int row)
    parameters:
    - id: row
      type: System.Int32
      description: A zero-based row index.
    return:
      type: System.ReadOnlySpan{SudokuSpice.Square{{TPuzzle}}}
    content.vb: Public Function GetSquaresOnRow(row As Integer) As ReadOnlySpan(Of Square(Of TPuzzle))
  overload: SudokuSpice.ExactCoverMatrix`1.GetSquaresOnRow*
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle).GetSquaresOnRow(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle).GetSquaresOnRow(System.Int32)
- uid: SudokuSpice.ExactCoverMatrix`1.GetSquaresOnColumn(System.Int32)
  commentId: M:SudokuSpice.ExactCoverMatrix`1.GetSquaresOnColumn(System.Int32)
  id: GetSquaresOnColumn(System.Int32)
  parent: SudokuSpice.ExactCoverMatrix`1
  langs:
  - csharp
  - vb
  name: GetSquaresOnColumn(Int32)
  nameWithType: ExactCoverMatrix<TPuzzle>.GetSquaresOnColumn(Int32)
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>.GetSquaresOnColumn(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/Data/ExactCoverMatrix.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetSquaresOnColumn
    path: ../SudokuSpice/Data/ExactCoverMatrix.cs
    startLine: 122
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nGets all the <see cref=\"!:Square\"></see>s on the requested column.\n"
  example: []
  syntax:
    content: public List<Square<TPuzzle>> GetSquaresOnColumn(int column)
    parameters:
    - id: column
      type: System.Int32
      description: A zero-based column index.
    return:
      type: System.Collections.Generic.List{SudokuSpice.Square{{TPuzzle}}}
    content.vb: Public Function GetSquaresOnColumn(column As Integer) As List(Of Square(Of TPuzzle))
  overload: SudokuSpice.ExactCoverMatrix`1.GetSquaresOnColumn*
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle).GetSquaresOnColumn(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle).GetSquaresOnColumn(System.Int32)
- uid: SudokuSpice.ExactCoverMatrix`1.GetUnsatisfiedConstraintHeaders
  commentId: M:SudokuSpice.ExactCoverMatrix`1.GetUnsatisfiedConstraintHeaders
  id: GetUnsatisfiedConstraintHeaders
  parent: SudokuSpice.ExactCoverMatrix`1
  langs:
  - csharp
  - vb
  name: GetUnsatisfiedConstraintHeaders()
  nameWithType: ExactCoverMatrix<TPuzzle>.GetUnsatisfiedConstraintHeaders()
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>.GetUnsatisfiedConstraintHeaders()
  type: Method
  source:
    remote:
      path: SudokuSpice/Data/ExactCoverMatrix.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetUnsatisfiedConstraintHeaders
    path: ../SudokuSpice/Data/ExactCoverMatrix.cs
    startLine: 135
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice
  summary: "\nGets all the currently unsatisfied <see cref=\"!:ConstraintHeader\"></see>s.\n"
  example: []
  syntax:
    content: public IEnumerable<ConstraintHeader<TPuzzle>> GetUnsatisfiedConstraintHeaders()
    return:
      type: System.Collections.Generic.IEnumerable{SudokuSpice.ConstraintHeader{{TPuzzle}}}
    content.vb: Public Function GetUnsatisfiedConstraintHeaders As IEnumerable(Of ConstraintHeader(Of TPuzzle))
  overload: SudokuSpice.ExactCoverMatrix`1.GetUnsatisfiedConstraintHeaders*
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle).GetUnsatisfiedConstraintHeaders()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle).GetUnsatisfiedConstraintHeaders()
references:
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.ExactCoverMatrix`1.AllPossibleValues*
  commentId: Overload:SudokuSpice.ExactCoverMatrix`1.AllPossibleValues
  name: AllPossibleValues
  nameWithType: ExactCoverMatrix<TPuzzle>.AllPossibleValues
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>.AllPossibleValues
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle).AllPossibleValues
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle).AllPossibleValues
- uid: System.ReadOnlySpan{System.Int32}
  commentId: T:System.ReadOnlySpan{System.Int32}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Int32>
  nameWithType: ReadOnlySpan<Int32>
  fullName: System.ReadOnlySpan<System.Int32>
  nameWithType.vb: ReadOnlySpan(Of Int32)
  fullName.vb: System.ReadOnlySpan(Of System.Int32)
  name.vb: ReadOnlySpan(Of Int32)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ExactCoverMatrix`1.AllPossibleValues
  commentId: P:SudokuSpice.ExactCoverMatrix`1.AllPossibleValues
  isExternal: true
- uid: SudokuSpice.ExactCoverMatrix`1.ValuesToIndices*
  commentId: Overload:SudokuSpice.ExactCoverMatrix`1.ValuesToIndices
  name: ValuesToIndices
  nameWithType: ExactCoverMatrix<TPuzzle>.ValuesToIndices
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>.ValuesToIndices
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle).ValuesToIndices
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle).ValuesToIndices
- uid: System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Int32}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<Int32, Int32>
  nameWithType: IReadOnlyDictionary<Int32, Int32>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.Int32, System.Int32>
  nameWithType.vb: IReadOnlyDictionary(Of Int32, Int32)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.Int32, System.Int32)
  name.vb: IReadOnlyDictionary(Of Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice.ExactCoverMatrix`1.GetSquare*
  commentId: Overload:SudokuSpice.ExactCoverMatrix`1.GetSquare
  name: GetSquare
  nameWithType: ExactCoverMatrix<TPuzzle>.GetSquare
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>.GetSquare
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle).GetSquare
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle).GetSquare
- uid: SudokuSpice.Square{{TPuzzle}}
  commentId: T:SudokuSpice.Square{`0}
  parent: SudokuSpice
  definition: SudokuSpice.Square`1
  name: Square<TPuzzle>
  nameWithType: Square<TPuzzle>
  fullName: SudokuSpice.Square<TPuzzle>
  nameWithType.vb: Square(Of TPuzzle)
  fullName.vb: SudokuSpice.Square(Of TPuzzle)
  name.vb: Square(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.Square`1
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.Square
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.Square`1
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.Square
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.Square`1
  commentId: T:SudokuSpice.Square`1
  name: Square<TPuzzle>
  nameWithType: Square<TPuzzle>
  fullName: SudokuSpice.Square<TPuzzle>
  nameWithType.vb: Square(Of TPuzzle)
  fullName.vb: SudokuSpice.Square(Of TPuzzle)
  name.vb: Square(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.Square`1
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.Square
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.Square`1
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.Square
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ExactCoverMatrix`1.GetSquaresOnRow*
  commentId: Overload:SudokuSpice.ExactCoverMatrix`1.GetSquaresOnRow
  name: GetSquaresOnRow
  nameWithType: ExactCoverMatrix<TPuzzle>.GetSquaresOnRow
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>.GetSquaresOnRow
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle).GetSquaresOnRow
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle).GetSquaresOnRow
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ReadOnlySpan{SudokuSpice.Square{{TPuzzle}}}
  commentId: T:System.ReadOnlySpan{SudokuSpice.Square{``0}}
  parent: System
  definition: System.ReadOnlySpan`1
  name: ReadOnlySpan<Square<TPuzzle>>
  nameWithType: ReadOnlySpan<Square<TPuzzle>>
  fullName: System.ReadOnlySpan<SudokuSpice.Square<TPuzzle>>
  nameWithType.vb: ReadOnlySpan(Of Square(Of TPuzzle))
  fullName.vb: System.ReadOnlySpan(Of SudokuSpice.Square(Of TPuzzle))
  name.vb: ReadOnlySpan(Of Square(Of TPuzzle))
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Square`1
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.Square
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Square`1
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.Square
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ExactCoverMatrix`1.GetSquaresOnColumn*
  commentId: Overload:SudokuSpice.ExactCoverMatrix`1.GetSquaresOnColumn
  name: GetSquaresOnColumn
  nameWithType: ExactCoverMatrix<TPuzzle>.GetSquaresOnColumn
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>.GetSquaresOnColumn
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle).GetSquaresOnColumn
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle).GetSquaresOnColumn
- uid: System.Collections.Generic.List{SudokuSpice.Square{{TPuzzle}}}
  commentId: T:System.Collections.Generic.List{SudokuSpice.Square{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Square<TPuzzle>>
  nameWithType: List<Square<TPuzzle>>
  fullName: System.Collections.Generic.List<SudokuSpice.Square<TPuzzle>>
  nameWithType.vb: List(Of Square(Of TPuzzle))
  fullName.vb: System.Collections.Generic.List(Of SudokuSpice.Square(Of TPuzzle))
  name.vb: List(Of Square(Of TPuzzle))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.Square`1
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.Square
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.Square`1
    name: Square
    nameWithType: Square
    fullName: SudokuSpice.Square
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ExactCoverMatrix`1.GetUnsatisfiedConstraintHeaders*
  commentId: Overload:SudokuSpice.ExactCoverMatrix`1.GetUnsatisfiedConstraintHeaders
  name: GetUnsatisfiedConstraintHeaders
  nameWithType: ExactCoverMatrix<TPuzzle>.GetUnsatisfiedConstraintHeaders
  fullName: SudokuSpice.ExactCoverMatrix<TPuzzle>.GetUnsatisfiedConstraintHeaders
  nameWithType.vb: ExactCoverMatrix(Of TPuzzle).GetUnsatisfiedConstraintHeaders
  fullName.vb: SudokuSpice.ExactCoverMatrix(Of TPuzzle).GetUnsatisfiedConstraintHeaders
- uid: System.Collections.Generic.IEnumerable{SudokuSpice.ConstraintHeader{{TPuzzle}}}
  commentId: T:System.Collections.Generic.IEnumerable{SudokuSpice.ConstraintHeader{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ConstraintHeader<TPuzzle>>
  nameWithType: IEnumerable<ConstraintHeader<TPuzzle>>
  fullName: System.Collections.Generic.IEnumerable<SudokuSpice.ConstraintHeader<TPuzzle>>
  nameWithType.vb: IEnumerable(Of ConstraintHeader(Of TPuzzle))
  fullName.vb: System.Collections.Generic.IEnumerable(Of SudokuSpice.ConstraintHeader(Of TPuzzle))
  name.vb: IEnumerable(Of ConstraintHeader(Of TPuzzle))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SudokuSpice.ConstraintHeader`1
    name: ConstraintHeader
    nameWithType: ConstraintHeader
    fullName: SudokuSpice.ConstraintHeader
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SudokuSpice.ConstraintHeader`1
    name: ConstraintHeader
    nameWithType: ConstraintHeader
    fullName: SudokuSpice.ConstraintHeader
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
