### YamlMime:ManagedReference
items:
- uid: SudokuSpice.ConstraintBased.Square`1
  commentId: T:SudokuSpice.ConstraintBased.Square`1
  id: Square`1
  parent: SudokuSpice.ConstraintBased
  children:
  - SudokuSpice.ConstraintBased.Square`1.Coordinate
  - SudokuSpice.ConstraintBased.Square`1.GetPossibleValue(System.Int32)
  - SudokuSpice.ConstraintBased.Square`1.IsSet
  - SudokuSpice.ConstraintBased.Square`1.NumPossibleValues
  langs:
  - csharp
  - vb
  name: Square<TPuzzle>
  nameWithType: Square<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.Square<TPuzzle>
  type: Class
  source:
    remote:
      path: SudokuSpice/ConstraintBased/framework/Square.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Square
    path: ../SudokuSpice/ConstraintBased/framework/Square.cs
    startLine: 10
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nRepresents a location in a puzzle, including tracking the current possible values at that\nlocation.\n"
  example: []
  syntax:
    content: >-
      public class Square<TPuzzle>

          where TPuzzle : IReadOnlyPuzzle
    typeParameters:
    - id: TPuzzle
    content.vb: Public Class Square(Of TPuzzle As IReadOnlyPuzzle)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Square(Of TPuzzle)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SudokuSpice.ConstraintBased.Square(Of TPuzzle)
  name.vb: Square(Of TPuzzle)
- uid: SudokuSpice.ConstraintBased.Square`1.Coordinate
  commentId: P:SudokuSpice.ConstraintBased.Square`1.Coordinate
  id: Coordinate
  parent: SudokuSpice.ConstraintBased.Square`1
  langs:
  - csharp
  - vb
  name: Coordinate
  nameWithType: Square<TPuzzle>.Coordinate
  fullName: SudokuSpice.ConstraintBased.Square<TPuzzle>.Coordinate
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/framework/Square.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: Coordinate
    path: ../SudokuSpice/ConstraintBased/framework/Square.cs
    startLine: 20
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets the <xref href=\"SudokuSpice.ConstraintBased.Square%601.Coordinate\" data-throw-if-not-resolved=\"false\"></xref> of this square.\n"
  example: []
  syntax:
    content: public Coordinate Coordinate { get; }
    parameters: []
    return:
      type: SudokuSpice.Coordinate
    content.vb: Public ReadOnly Property Coordinate As Coordinate
  overload: SudokuSpice.ConstraintBased.Square`1.Coordinate*
  nameWithType.vb: Square(Of TPuzzle).Coordinate
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SudokuSpice.ConstraintBased.Square(Of TPuzzle).Coordinate
- uid: SudokuSpice.ConstraintBased.Square`1.NumPossibleValues
  commentId: P:SudokuSpice.ConstraintBased.Square`1.NumPossibleValues
  id: NumPossibleValues
  parent: SudokuSpice.ConstraintBased.Square`1
  langs:
  - csharp
  - vb
  name: NumPossibleValues
  nameWithType: Square<TPuzzle>.NumPossibleValues
  fullName: SudokuSpice.ConstraintBased.Square<TPuzzle>.NumPossibleValues
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/framework/Square.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: NumPossibleValues
    path: ../SudokuSpice/ConstraintBased/framework/Square.cs
    startLine: 24
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets the current number of possible values this square has.\n"
  example: []
  syntax:
    content: public int NumPossibleValues { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumPossibleValues As Integer
  overload: SudokuSpice.ConstraintBased.Square`1.NumPossibleValues*
  nameWithType.vb: Square(Of TPuzzle).NumPossibleValues
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SudokuSpice.ConstraintBased.Square(Of TPuzzle).NumPossibleValues
- uid: SudokuSpice.ConstraintBased.Square`1.IsSet
  commentId: P:SudokuSpice.ConstraintBased.Square`1.IsSet
  id: IsSet
  parent: SudokuSpice.ConstraintBased.Square`1
  langs:
  - csharp
  - vb
  name: IsSet
  nameWithType: Square<TPuzzle>.IsSet
  fullName: SudokuSpice.ConstraintBased.Square<TPuzzle>.IsSet
  type: Property
  source:
    remote:
      path: SudokuSpice/ConstraintBased/framework/Square.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: IsSet
    path: ../SudokuSpice/ConstraintBased/framework/Square.cs
    startLine: 28
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets whether or not this square&apos;s value is currently set.\n"
  example: []
  syntax:
    content: public bool IsSet { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSet As Boolean
  overload: SudokuSpice.ConstraintBased.Square`1.IsSet*
  nameWithType.vb: Square(Of TPuzzle).IsSet
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SudokuSpice.ConstraintBased.Square(Of TPuzzle).IsSet
- uid: SudokuSpice.ConstraintBased.Square`1.GetPossibleValue(System.Int32)
  commentId: M:SudokuSpice.ConstraintBased.Square`1.GetPossibleValue(System.Int32)
  id: GetPossibleValue(System.Int32)
  parent: SudokuSpice.ConstraintBased.Square`1
  langs:
  - csharp
  - vb
  name: GetPossibleValue(Int32)
  nameWithType: Square<TPuzzle>.GetPossibleValue(Int32)
  fullName: SudokuSpice.ConstraintBased.Square<TPuzzle>.GetPossibleValue(System.Int32)
  type: Method
  source:
    remote:
      path: SudokuSpice/ConstraintBased/framework/Square.cs
      branch: master
      repo: https://github.com/MorganR/SudokuSpice
    id: GetPossibleValue
    path: ../SudokuSpice/ConstraintBased/framework/Square.cs
    startLine: 64
  assemblies:
  - SudokuSpice
  namespace: SudokuSpice.ConstraintBased
  summary: "\nGets the possible value with the given value-index.\n"
  example: []
  syntax:
    content: public PossibleValue<TPuzzle> GetPossibleValue(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: SudokuSpice.ConstraintBased.PossibleValue{{TPuzzle}}
    content.vb: Public Function GetPossibleValue(index As Integer) As PossibleValue(Of TPuzzle)
  overload: SudokuSpice.ConstraintBased.Square`1.GetPossibleValue*
  nameWithType.vb: Square(Of TPuzzle).GetPossibleValue(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SudokuSpice.ConstraintBased.Square(Of TPuzzle).GetPossibleValue(System.Int32)
references:
- uid: SudokuSpice.ConstraintBased
  commentId: N:SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SudokuSpice.ConstraintBased.Square`1.Coordinate
  commentId: P:SudokuSpice.ConstraintBased.Square`1.Coordinate
  isExternal: true
- uid: SudokuSpice.ConstraintBased.Square`1.Coordinate*
  commentId: Overload:SudokuSpice.ConstraintBased.Square`1.Coordinate
  name: Coordinate
  nameWithType: Square<TPuzzle>.Coordinate
  fullName: SudokuSpice.ConstraintBased.Square<TPuzzle>.Coordinate
  nameWithType.vb: Square(Of TPuzzle).Coordinate
  fullName.vb: SudokuSpice.ConstraintBased.Square(Of TPuzzle).Coordinate
- uid: SudokuSpice.Coordinate
  commentId: T:SudokuSpice.Coordinate
  parent: SudokuSpice
  name: Coordinate
  nameWithType: Coordinate
  fullName: SudokuSpice.Coordinate
- uid: SudokuSpice
  commentId: N:SudokuSpice
  name: SudokuSpice
  nameWithType: SudokuSpice
  fullName: SudokuSpice
- uid: SudokuSpice.ConstraintBased.Square`1.NumPossibleValues*
  commentId: Overload:SudokuSpice.ConstraintBased.Square`1.NumPossibleValues
  name: NumPossibleValues
  nameWithType: Square<TPuzzle>.NumPossibleValues
  fullName: SudokuSpice.ConstraintBased.Square<TPuzzle>.NumPossibleValues
  nameWithType.vb: Square(Of TPuzzle).NumPossibleValues
  fullName.vb: SudokuSpice.ConstraintBased.Square(Of TPuzzle).NumPossibleValues
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SudokuSpice.ConstraintBased.Square`1.IsSet*
  commentId: Overload:SudokuSpice.ConstraintBased.Square`1.IsSet
  name: IsSet
  nameWithType: Square<TPuzzle>.IsSet
  fullName: SudokuSpice.ConstraintBased.Square<TPuzzle>.IsSet
  nameWithType.vb: Square(Of TPuzzle).IsSet
  fullName.vb: SudokuSpice.ConstraintBased.Square(Of TPuzzle).IsSet
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SudokuSpice.ConstraintBased.Square`1.GetPossibleValue*
  commentId: Overload:SudokuSpice.ConstraintBased.Square`1.GetPossibleValue
  name: GetPossibleValue
  nameWithType: Square<TPuzzle>.GetPossibleValue
  fullName: SudokuSpice.ConstraintBased.Square<TPuzzle>.GetPossibleValue
  nameWithType.vb: Square(Of TPuzzle).GetPossibleValue
  fullName.vb: SudokuSpice.ConstraintBased.Square(Of TPuzzle).GetPossibleValue
- uid: SudokuSpice.ConstraintBased.PossibleValue{{TPuzzle}}
  commentId: T:SudokuSpice.ConstraintBased.PossibleValue{`0}
  parent: SudokuSpice.ConstraintBased
  definition: SudokuSpice.ConstraintBased.PossibleValue`1
  name: PossibleValue<TPuzzle>
  nameWithType: PossibleValue<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.PossibleValue<TPuzzle>
  nameWithType.vb: PossibleValue(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.PossibleValue(Of TPuzzle)
  name.vb: PossibleValue(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.PossibleValue`1
    name: PossibleValue
    nameWithType: PossibleValue
    fullName: SudokuSpice.ConstraintBased.PossibleValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.PossibleValue`1
    name: PossibleValue
    nameWithType: PossibleValue
    fullName: SudokuSpice.ConstraintBased.PossibleValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
- uid: SudokuSpice.ConstraintBased.PossibleValue`1
  commentId: T:SudokuSpice.ConstraintBased.PossibleValue`1
  name: PossibleValue<TPuzzle>
  nameWithType: PossibleValue<TPuzzle>
  fullName: SudokuSpice.ConstraintBased.PossibleValue<TPuzzle>
  nameWithType.vb: PossibleValue(Of TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.PossibleValue(Of TPuzzle)
  name.vb: PossibleValue(Of TPuzzle)
  spec.csharp:
  - uid: SudokuSpice.ConstraintBased.PossibleValue`1
    name: PossibleValue
    nameWithType: PossibleValue
    fullName: SudokuSpice.ConstraintBased.PossibleValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SudokuSpice.ConstraintBased.PossibleValue`1
    name: PossibleValue
    nameWithType: PossibleValue
    fullName: SudokuSpice.ConstraintBased.PossibleValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPuzzle
    nameWithType: TPuzzle
    fullName: TPuzzle
  - name: )
    nameWithType: )
    fullName: )
