### YamlMime:XRefMap
sorted: true
references:
- uid: SudokuSpice
  name: SudokuSpice
  href: api/SudokuSpice.html
  commentId: N:SudokuSpice
  fullName: SudokuSpice
  nameWithType: SudokuSpice
- uid: SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  href: api/SudokuSpice.ConstraintBased.html
  commentId: N:SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
- uid: SudokuSpice.ConstraintBased.ConstraintHeader
  name: ConstraintHeader
  href: api/SudokuSpice.ConstraintBased.ConstraintHeader.html
  commentId: T:SudokuSpice.ConstraintBased.ConstraintHeader
  fullName: SudokuSpice.ConstraintBased.ConstraintHeader
  nameWithType: ConstraintHeader
- uid: SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader(SudokuSpice.ConstraintBased.ExactCoverMatrix,System.ReadOnlySpan{SudokuSpice.ConstraintBased.PossibleValue})
  name: CreateConnectedHeader(ExactCoverMatrix, ReadOnlySpan<PossibleValue>)
  href: api/SudokuSpice.ConstraintBased.ConstraintHeader.html#SudokuSpice_ConstraintBased_ConstraintHeader_CreateConnectedHeader_SudokuSpice_ConstraintBased_ExactCoverMatrix_System_ReadOnlySpan_SudokuSpice_ConstraintBased_PossibleValue__
  commentId: M:SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader(SudokuSpice.ConstraintBased.ExactCoverMatrix,System.ReadOnlySpan{SudokuSpice.ConstraintBased.PossibleValue})
  name.vb: CreateConnectedHeader(ExactCoverMatrix, ReadOnlySpan(Of PossibleValue))
  fullName: SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader(SudokuSpice.ConstraintBased.ExactCoverMatrix, System.ReadOnlySpan<SudokuSpice.ConstraintBased.PossibleValue>)
  fullName.vb: SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader(SudokuSpice.ConstraintBased.ExactCoverMatrix, System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.PossibleValue))
  nameWithType: ConstraintHeader.CreateConnectedHeader(ExactCoverMatrix, ReadOnlySpan<PossibleValue>)
  nameWithType.vb: ConstraintHeader.CreateConnectedHeader(ExactCoverMatrix, ReadOnlySpan(Of PossibleValue))
- uid: SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader*
  name: CreateConnectedHeader
  href: api/SudokuSpice.ConstraintBased.ConstraintHeader.html#SudokuSpice_ConstraintBased_ConstraintHeader_CreateConnectedHeader_
  commentId: Overload:SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ConstraintHeader.CreateConnectedHeader
  nameWithType: ConstraintHeader.CreateConnectedHeader
- uid: SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  href: api/SudokuSpice.ConstraintBased.Constraints.html
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
- uid: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  name: BoxUniquenessConstraint
  href: api/SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  nameWithType: BoxUniquenessConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name: Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
  href: api/SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_BoxUniquenessConstraint_Constrain_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverMatrix_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  nameWithType: BoxUniquenessConstraint.Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
- uid: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain*
  name: Constrain
  href: api/SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_BoxUniquenessConstraint_Constrain_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.Constrain
  nameWithType: BoxUniquenessConstraint.Constrain
- uid: SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint
  name: ColumnUniquenessConstraint
  href: api/SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint
  nameWithType: ColumnUniquenessConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name: Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
  href: api/SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_ColumnUniquenessConstraint_Constrain_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverMatrix_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  nameWithType: ColumnUniquenessConstraint.Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
- uid: SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.Constrain*
  name: Constrain
  href: api/SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_ColumnUniquenessConstraint_Constrain_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.Constrain
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.Constrain
  nameWithType: ColumnUniquenessConstraint.Constrain
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  name: ConstraintUtil
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  nameWithType: ConstraintUtil
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name: AddConstraintHeadersForValueIndex(ReadOnlySpan<Square>, Int32, ExactCoverMatrix)
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_AddConstraintHeadersForValueIndex_System_ReadOnlySpan_SudokuSpice_ConstraintBased_Square__System_Int32_SudokuSpice_ConstraintBased_ExactCoverMatrix_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name.vb: AddConstraintHeadersForValueIndex(ReadOnlySpan(Of Square), Int32, ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex(System.ReadOnlySpan<SudokuSpice.ConstraintBased.Square>, System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex(System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square), System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  nameWithType: ConstraintUtil.AddConstraintHeadersForValueIndex(ReadOnlySpan<Square>, Int32, ExactCoverMatrix)
  nameWithType.vb: ConstraintUtil.AddConstraintHeadersForValueIndex(ReadOnlySpan(Of Square), Int32, ExactCoverMatrix)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex*
  name: AddConstraintHeadersForValueIndex
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_AddConstraintHeadersForValueIndex_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.AddConstraintHeadersForValueIndex
  nameWithType: ConstraintUtil.AddConstraintHeadersForValueIndex
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  name: CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan<Coordinate>, Span<Boolean>)
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_CheckForSetValues_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverMatrix_System_ReadOnlySpan_SudokuSpice_Coordinate__System_Span_System_Boolean__
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix,System.ReadOnlySpan{SudokuSpice.Coordinate},System.Span{System.Boolean})
  name.vb: CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan(Of Coordinate), Span(Of Boolean))
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix, System.ReadOnlySpan<SudokuSpice.Coordinate>, System.Span<System.Boolean>)
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix, System.ReadOnlySpan(Of SudokuSpice.Coordinate), System.Span(Of System.Boolean))
  nameWithType: ConstraintUtil.CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan<Coordinate>, Span<Boolean>)
  nameWithType.vb: ConstraintUtil.CheckForSetValues(IReadOnlyPuzzle, ExactCoverMatrix, ReadOnlySpan(Of Coordinate), Span(Of Boolean))
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues*
  name: CheckForSetValues
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_CheckForSetValues_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.CheckForSetValues
  nameWithType: ConstraintUtil.CheckForSetValues
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name: DropPossibleSquaresForValueIndex(ReadOnlySpan<Square>, Int32, ExactCoverMatrix)
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_DropPossibleSquaresForValueIndex_System_ReadOnlySpan_SudokuSpice_ConstraintBased_Square__System_Int32_SudokuSpice_ConstraintBased_ExactCoverMatrix_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex(System.ReadOnlySpan{SudokuSpice.ConstraintBased.Square},System.Int32,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name.vb: DropPossibleSquaresForValueIndex(ReadOnlySpan(Of Square), Int32, ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex(System.ReadOnlySpan<SudokuSpice.ConstraintBased.Square>, System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex(System.ReadOnlySpan(Of SudokuSpice.ConstraintBased.Square), System.Int32, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  nameWithType: ConstraintUtil.DropPossibleSquaresForValueIndex(ReadOnlySpan<Square>, Int32, ExactCoverMatrix)
  nameWithType.vb: ConstraintUtil.DropPossibleSquaresForValueIndex(ReadOnlySpan(Of Square), Int32, ExactCoverMatrix)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex*
  name: DropPossibleSquaresForValueIndex
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_DropPossibleSquaresForValueIndex_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.DropPossibleSquaresForValueIndex
  nameWithType: ConstraintUtil.DropPossibleSquaresForValueIndex
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name: ImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan<Coordinate>, ExactCoverMatrix)
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_ImplementUniquenessConstraintForSquares_SudokuSpice_IReadOnlyPuzzle_System_ReadOnlySpan_SudokuSpice_Coordinate__SudokuSpice_ConstraintBased_ExactCoverMatrix_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,System.ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name.vb: ImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan(Of Coordinate), ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle, System.ReadOnlySpan<SudokuSpice.Coordinate>, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle, System.ReadOnlySpan(Of SudokuSpice.Coordinate), SudokuSpice.ConstraintBased.ExactCoverMatrix)
  nameWithType: ConstraintUtil.ImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan<Coordinate>, ExactCoverMatrix)
  nameWithType.vb: ConstraintUtil.ImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan(Of Coordinate), ExactCoverMatrix)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares*
  name: ImplementUniquenessConstraintForSquares
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_ImplementUniquenessConstraintForSquares_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.ImplementUniquenessConstraintForSquares
  nameWithType: ConstraintUtil.ImplementUniquenessConstraintForSquares
- uid: SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint
  name: DiagonalUniquenessConstraint
  href: api/SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint
  nameWithType: DiagonalUniquenessConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name: Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
  href: api/SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_DiagonalUniquenessConstraint_Constrain_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverMatrix_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  nameWithType: DiagonalUniquenessConstraint.Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
- uid: SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.Constrain*
  name: Constrain
  href: api/SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_DiagonalUniquenessConstraint_Constrain_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.Constrain
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.Constrain
  nameWithType: DiagonalUniquenessConstraint.Constrain
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint
  name: IConstraint
  href: api/SudokuSpice.ConstraintBased.Constraints.IConstraint.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.IConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint
  nameWithType: IConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name: Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
  href: api/SudokuSpice.ConstraintBased.Constraints.IConstraint.html#SudokuSpice_ConstraintBased_Constraints_IConstraint_Constrain_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverMatrix_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  nameWithType: IConstraint.Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain*
  name: Constrain
  href: api/SudokuSpice.ConstraintBased.Constraints.IConstraint.html#SudokuSpice_ConstraintBased_Constraints_IConstraint_Constrain_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.Constrain
  nameWithType: IConstraint.Constrain
- uid: SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint
  name: RowUniquenessConstraint
  href: api/SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint
  nameWithType: RowUniquenessConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  name: Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
  href: api/SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_RowUniquenessConstraint_Constrain_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverMatrix_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverMatrix)
  fullName: SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.Constrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverMatrix)
  nameWithType: RowUniquenessConstraint.Constrain(IReadOnlyPuzzle, ExactCoverMatrix)
- uid: SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.Constrain*
  name: Constrain
  href: api/SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_RowUniquenessConstraint_Constrain_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.Constrain
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.Constrain
  nameWithType: RowUniquenessConstraint.Constrain
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix
  name: ExactCoverMatrix
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverMatrix
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix
  nameWithType: ExactCoverMatrix
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  name: AllPossibleValues
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html#SudokuSpice_ConstraintBased_ExactCoverMatrix_AllPossibleValues
  commentId: P:SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  nameWithType: ExactCoverMatrix.AllPossibleValues
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues*
  name: AllPossibleValues
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html#SudokuSpice_ConstraintBased_ExactCoverMatrix_AllPossibleValues_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.AllPossibleValues
  nameWithType: ExactCoverMatrix.AllPossibleValues
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(SudokuSpice.Coordinate@)
  name: GetSquare(Coordinate)
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html#SudokuSpice_ConstraintBased_ExactCoverMatrix_GetSquare_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(SudokuSpice.Coordinate@)
  name.vb: GetSquare(ByRef Coordinate)
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare(ByRef SudokuSpice.Coordinate)
  nameWithType: ExactCoverMatrix.GetSquare(Coordinate)
  nameWithType.vb: ExactCoverMatrix.GetSquare(ByRef Coordinate)
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare*
  name: GetSquare
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html#SudokuSpice_ConstraintBased_ExactCoverMatrix_GetSquare_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquare
  nameWithType: ExactCoverMatrix.GetSquare
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn(System.Int32)
  name: GetSquaresOnColumn(Int32)
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html#SudokuSpice_ConstraintBased_ExactCoverMatrix_GetSquaresOnColumn_System_Int32_
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn(System.Int32)
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn(System.Int32)
  nameWithType: ExactCoverMatrix.GetSquaresOnColumn(Int32)
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn*
  name: GetSquaresOnColumn
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html#SudokuSpice_ConstraintBased_ExactCoverMatrix_GetSquaresOnColumn_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnColumn
  nameWithType: ExactCoverMatrix.GetSquaresOnColumn
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow(System.Int32)
  name: GetSquaresOnRow(Int32)
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html#SudokuSpice_ConstraintBased_ExactCoverMatrix_GetSquaresOnRow_System_Int32_
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow(System.Int32)
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow(System.Int32)
  nameWithType: ExactCoverMatrix.GetSquaresOnRow(Int32)
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow*
  name: GetSquaresOnRow
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html#SudokuSpice_ConstraintBased_ExactCoverMatrix_GetSquaresOnRow_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetSquaresOnRow
  nameWithType: ExactCoverMatrix.GetSquaresOnRow
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders
  name: GetUnsatisfiedConstraintHeaders()
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html#SudokuSpice_ConstraintBased_ExactCoverMatrix_GetUnsatisfiedConstraintHeaders
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders()
  nameWithType: ExactCoverMatrix.GetUnsatisfiedConstraintHeaders()
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders*
  name: GetUnsatisfiedConstraintHeaders
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html#SudokuSpice_ConstraintBased_ExactCoverMatrix_GetUnsatisfiedConstraintHeaders_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.GetUnsatisfiedConstraintHeaders
  nameWithType: ExactCoverMatrix.GetUnsatisfiedConstraintHeaders
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  name: ValuesToIndices
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html#SudokuSpice_ConstraintBased_ExactCoverMatrix_ValuesToIndices
  commentId: P:SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  nameWithType: ExactCoverMatrix.ValuesToIndices
- uid: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices*
  name: ValuesToIndices
  href: api/SudokuSpice.ConstraintBased.ExactCoverMatrix.html#SudokuSpice_ConstraintBased_ExactCoverMatrix_ValuesToIndices_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverMatrix.ValuesToIndices
  nameWithType: ExactCoverMatrix.ValuesToIndices
- uid: SudokuSpice.ConstraintBased.PossibleSquareState
  name: PossibleSquareState
  href: api/SudokuSpice.ConstraintBased.PossibleSquareState.html
  commentId: T:SudokuSpice.ConstraintBased.PossibleSquareState
  fullName: SudokuSpice.ConstraintBased.PossibleSquareState
  nameWithType: PossibleSquareState
- uid: SudokuSpice.ConstraintBased.PossibleSquareState.DROPPED
  name: DROPPED
  href: api/SudokuSpice.ConstraintBased.PossibleSquareState.html#SudokuSpice_ConstraintBased_PossibleSquareState_DROPPED
  commentId: F:SudokuSpice.ConstraintBased.PossibleSquareState.DROPPED
  fullName: SudokuSpice.ConstraintBased.PossibleSquareState.DROPPED
  nameWithType: PossibleSquareState.DROPPED
- uid: SudokuSpice.ConstraintBased.PossibleSquareState.SELECTED
  name: SELECTED
  href: api/SudokuSpice.ConstraintBased.PossibleSquareState.html#SudokuSpice_ConstraintBased_PossibleSquareState_SELECTED
  commentId: F:SudokuSpice.ConstraintBased.PossibleSquareState.SELECTED
  fullName: SudokuSpice.ConstraintBased.PossibleSquareState.SELECTED
  nameWithType: PossibleSquareState.SELECTED
- uid: SudokuSpice.ConstraintBased.PossibleSquareState.UNKNOWN
  name: UNKNOWN
  href: api/SudokuSpice.ConstraintBased.PossibleSquareState.html#SudokuSpice_ConstraintBased_PossibleSquareState_UNKNOWN
  commentId: F:SudokuSpice.ConstraintBased.PossibleSquareState.UNKNOWN
  fullName: SudokuSpice.ConstraintBased.PossibleSquareState.UNKNOWN
  nameWithType: PossibleSquareState.UNKNOWN
- uid: SudokuSpice.ConstraintBased.PossibleValue
  name: PossibleValue
  href: api/SudokuSpice.ConstraintBased.PossibleValue.html
  commentId: T:SudokuSpice.ConstraintBased.PossibleValue
  fullName: SudokuSpice.ConstraintBased.PossibleValue
  nameWithType: PossibleValue
- uid: SudokuSpice.ConstraintBased.PossibleValue.Square
  name: Square
  href: api/SudokuSpice.ConstraintBased.PossibleValue.html#SudokuSpice_ConstraintBased_PossibleValue_Square
  commentId: P:SudokuSpice.ConstraintBased.PossibleValue.Square
  fullName: SudokuSpice.ConstraintBased.PossibleValue.Square
  nameWithType: PossibleValue.Square
- uid: SudokuSpice.ConstraintBased.PossibleValue.Square*
  name: Square
  href: api/SudokuSpice.ConstraintBased.PossibleValue.html#SudokuSpice_ConstraintBased_PossibleValue_Square_
  commentId: Overload:SudokuSpice.ConstraintBased.PossibleValue.Square
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PossibleValue.Square
  nameWithType: PossibleValue.Square
- uid: SudokuSpice.ConstraintBased.PossibleValue.State
  name: State
  href: api/SudokuSpice.ConstraintBased.PossibleValue.html#SudokuSpice_ConstraintBased_PossibleValue_State
  commentId: P:SudokuSpice.ConstraintBased.PossibleValue.State
  fullName: SudokuSpice.ConstraintBased.PossibleValue.State
  nameWithType: PossibleValue.State
- uid: SudokuSpice.ConstraintBased.PossibleValue.State*
  name: State
  href: api/SudokuSpice.ConstraintBased.PossibleValue.html#SudokuSpice_ConstraintBased_PossibleValue_State_
  commentId: Overload:SudokuSpice.ConstraintBased.PossibleValue.State
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PossibleValue.State
  nameWithType: PossibleValue.State
- uid: SudokuSpice.ConstraintBased.PossibleValue.ValueIndex
  name: ValueIndex
  href: api/SudokuSpice.ConstraintBased.PossibleValue.html#SudokuSpice_ConstraintBased_PossibleValue_ValueIndex
  commentId: P:SudokuSpice.ConstraintBased.PossibleValue.ValueIndex
  fullName: SudokuSpice.ConstraintBased.PossibleValue.ValueIndex
  nameWithType: PossibleValue.ValueIndex
- uid: SudokuSpice.ConstraintBased.PossibleValue.ValueIndex*
  name: ValueIndex
  href: api/SudokuSpice.ConstraintBased.PossibleValue.html#SudokuSpice_ConstraintBased_PossibleValue_ValueIndex_
  commentId: Overload:SudokuSpice.ConstraintBased.PossibleValue.ValueIndex
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PossibleValue.ValueIndex
  nameWithType: PossibleValue.ValueIndex
- uid: SudokuSpice.ConstraintBased.PuzzleGenerator`1
  name: PuzzleGenerator<TPuzzle>
  href: api/SudokuSpice.ConstraintBased.PuzzleGenerator-1.html
  commentId: T:SudokuSpice.ConstraintBased.PuzzleGenerator`1
  name.vb: PuzzleGenerator(Of TPuzzle)
  fullName: SudokuSpice.ConstraintBased.PuzzleGenerator<TPuzzle>
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleGenerator(Of TPuzzle)
  nameWithType: PuzzleGenerator<TPuzzle>
  nameWithType.vb: PuzzleGenerator(Of TPuzzle)
- uid: SudokuSpice.ConstraintBased.PuzzleGenerator`1.#ctor(System.Func{`0},System.Collections.Generic.IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})
  name: PuzzleGenerator(Func<TPuzzle>, IReadOnlyList<IConstraint>)
  href: api/SudokuSpice.ConstraintBased.PuzzleGenerator-1.html#SudokuSpice_ConstraintBased_PuzzleGenerator_1__ctor_System_Func__0__System_Collections_Generic_IReadOnlyList_SudokuSpice_ConstraintBased_Constraints_IConstraint__
  commentId: M:SudokuSpice.ConstraintBased.PuzzleGenerator`1.#ctor(System.Func{`0},System.Collections.Generic.IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})
  name.vb: PuzzleGenerator(Func(Of TPuzzle), IReadOnlyList(Of IConstraint))
  fullName: SudokuSpice.ConstraintBased.PuzzleGenerator<TPuzzle>.PuzzleGenerator(System.Func<TPuzzle>, System.Collections.Generic.IReadOnlyList<SudokuSpice.ConstraintBased.Constraints.IConstraint>)
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleGenerator(Of TPuzzle).PuzzleGenerator(System.Func(Of TPuzzle), System.Collections.Generic.IReadOnlyList(Of SudokuSpice.ConstraintBased.Constraints.IConstraint))
  nameWithType: PuzzleGenerator<TPuzzle>.PuzzleGenerator(Func<TPuzzle>, IReadOnlyList<IConstraint>)
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).PuzzleGenerator(Func(Of TPuzzle), IReadOnlyList(Of IConstraint))
- uid: SudokuSpice.ConstraintBased.PuzzleGenerator`1.#ctor*
  name: PuzzleGenerator
  href: api/SudokuSpice.ConstraintBased.PuzzleGenerator-1.html#SudokuSpice_ConstraintBased_PuzzleGenerator_1__ctor_
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleGenerator`1.#ctor
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PuzzleGenerator<TPuzzle>.PuzzleGenerator
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleGenerator(Of TPuzzle).PuzzleGenerator
  nameWithType: PuzzleGenerator<TPuzzle>.PuzzleGenerator
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).PuzzleGenerator
- uid: SudokuSpice.ConstraintBased.PuzzleGenerator`1.Generate(System.Int32,System.TimeSpan)
  name: Generate(Int32, TimeSpan)
  href: api/SudokuSpice.ConstraintBased.PuzzleGenerator-1.html#SudokuSpice_ConstraintBased_PuzzleGenerator_1_Generate_System_Int32_System_TimeSpan_
  commentId: M:SudokuSpice.ConstraintBased.PuzzleGenerator`1.Generate(System.Int32,System.TimeSpan)
  fullName: SudokuSpice.ConstraintBased.PuzzleGenerator<TPuzzle>.Generate(System.Int32, System.TimeSpan)
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleGenerator(Of TPuzzle).Generate(System.Int32, System.TimeSpan)
  nameWithType: PuzzleGenerator<TPuzzle>.Generate(Int32, TimeSpan)
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).Generate(Int32, TimeSpan)
- uid: SudokuSpice.ConstraintBased.PuzzleGenerator`1.Generate*
  name: Generate
  href: api/SudokuSpice.ConstraintBased.PuzzleGenerator-1.html#SudokuSpice_ConstraintBased_PuzzleGenerator_1_Generate_
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleGenerator`1.Generate
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PuzzleGenerator<TPuzzle>.Generate
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleGenerator(Of TPuzzle).Generate
  nameWithType: PuzzleGenerator<TPuzzle>.Generate
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).Generate
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1
  name: PuzzleSolver<TPuzzle>
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html
  commentId: T:SudokuSpice.ConstraintBased.PuzzleSolver`1
  name.vb: PuzzleSolver(Of TPuzzle)
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle)
  nameWithType: PuzzleSolver<TPuzzle>
  nameWithType.vb: PuzzleSolver(Of TPuzzle)
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor(System.Collections.Generic.IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})
  name: PuzzleSolver(IReadOnlyList<IConstraint>)
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1__ctor_System_Collections_Generic_IReadOnlyList_SudokuSpice_ConstraintBased_Constraints_IConstraint__
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor(System.Collections.Generic.IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})
  name.vb: PuzzleSolver(IReadOnlyList(Of IConstraint))
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.PuzzleSolver(System.Collections.Generic.IReadOnlyList<SudokuSpice.ConstraintBased.Constraints.IConstraint>)
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).PuzzleSolver(System.Collections.Generic.IReadOnlyList(Of SudokuSpice.ConstraintBased.Constraints.IConstraint))
  nameWithType: PuzzleSolver<TPuzzle>.PuzzleSolver(IReadOnlyList<IConstraint>)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).PuzzleSolver(IReadOnlyList(Of IConstraint))
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor*
  name: PuzzleSolver
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1__ctor_
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.PuzzleSolver
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).PuzzleSolver
  nameWithType: PuzzleSolver<TPuzzle>.PuzzleSolver
  nameWithType.vb: PuzzleSolver(Of TPuzzle).PuzzleSolver
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.GetStatsForAllSolutions(`0)
  name: GetStatsForAllSolutions(TPuzzle)
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_GetStatsForAllSolutions__0_
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.GetStatsForAllSolutions(`0)
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.GetStatsForAllSolutions(TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).GetStatsForAllSolutions(TPuzzle)
  nameWithType: PuzzleSolver<TPuzzle>.GetStatsForAllSolutions(TPuzzle)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).GetStatsForAllSolutions(TPuzzle)
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.GetStatsForAllSolutions*
  name: GetStatsForAllSolutions
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_GetStatsForAllSolutions_
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.GetStatsForAllSolutions
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.GetStatsForAllSolutions
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).GetStatsForAllSolutions
  nameWithType: PuzzleSolver<TPuzzle>.GetStatsForAllSolutions
  nameWithType.vb: PuzzleSolver(Of TPuzzle).GetStatsForAllSolutions
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve(`0)
  name: Solve(TPuzzle)
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_Solve__0_
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve(`0)
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.Solve(TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).Solve(TPuzzle)
  nameWithType: PuzzleSolver<TPuzzle>.Solve(TPuzzle)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).Solve(TPuzzle)
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve*
  name: Solve
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_Solve_
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.Solve
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).Solve
  nameWithType: PuzzleSolver<TPuzzle>.Solve
  nameWithType.vb: PuzzleSolver(Of TPuzzle).Solve
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.SolveRandomly(`0)
  name: SolveRandomly(TPuzzle)
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_SolveRandomly__0_
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.SolveRandomly(`0)
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.SolveRandomly(TPuzzle)
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).SolveRandomly(TPuzzle)
  nameWithType: PuzzleSolver<TPuzzle>.SolveRandomly(TPuzzle)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).SolveRandomly(TPuzzle)
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.SolveRandomly*
  name: SolveRandomly
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_SolveRandomly_
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.SolveRandomly
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.SolveRandomly
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).SolveRandomly
  nameWithType: PuzzleSolver<TPuzzle>.SolveRandomly
  nameWithType.vb: PuzzleSolver(Of TPuzzle).SolveRandomly
- uid: SudokuSpice.ConstraintBased.Square
  name: Square
  href: api/SudokuSpice.ConstraintBased.Square.html
  commentId: T:SudokuSpice.ConstraintBased.Square
  fullName: SudokuSpice.ConstraintBased.Square
  nameWithType: Square
- uid: SudokuSpice.ConstraintBased.Square.Coordinate
  name: Coordinate
  href: api/SudokuSpice.ConstraintBased.Square.html#SudokuSpice_ConstraintBased_Square_Coordinate
  commentId: P:SudokuSpice.ConstraintBased.Square.Coordinate
  fullName: SudokuSpice.ConstraintBased.Square.Coordinate
  nameWithType: Square.Coordinate
- uid: SudokuSpice.ConstraintBased.Square.Coordinate*
  name: Coordinate
  href: api/SudokuSpice.ConstraintBased.Square.html#SudokuSpice_ConstraintBased_Square_Coordinate_
  commentId: Overload:SudokuSpice.ConstraintBased.Square.Coordinate
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Square.Coordinate
  nameWithType: Square.Coordinate
- uid: SudokuSpice.ConstraintBased.Square.GetPossibleValue(System.Int32)
  name: GetPossibleValue(Int32)
  href: api/SudokuSpice.ConstraintBased.Square.html#SudokuSpice_ConstraintBased_Square_GetPossibleValue_System_Int32_
  commentId: M:SudokuSpice.ConstraintBased.Square.GetPossibleValue(System.Int32)
  fullName: SudokuSpice.ConstraintBased.Square.GetPossibleValue(System.Int32)
  nameWithType: Square.GetPossibleValue(Int32)
- uid: SudokuSpice.ConstraintBased.Square.GetPossibleValue*
  name: GetPossibleValue
  href: api/SudokuSpice.ConstraintBased.Square.html#SudokuSpice_ConstraintBased_Square_GetPossibleValue_
  commentId: Overload:SudokuSpice.ConstraintBased.Square.GetPossibleValue
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Square.GetPossibleValue
  nameWithType: Square.GetPossibleValue
- uid: SudokuSpice.ConstraintBased.Square.IsSet
  name: IsSet
  href: api/SudokuSpice.ConstraintBased.Square.html#SudokuSpice_ConstraintBased_Square_IsSet
  commentId: P:SudokuSpice.ConstraintBased.Square.IsSet
  fullName: SudokuSpice.ConstraintBased.Square.IsSet
  nameWithType: Square.IsSet
- uid: SudokuSpice.ConstraintBased.Square.IsSet*
  name: IsSet
  href: api/SudokuSpice.ConstraintBased.Square.html#SudokuSpice_ConstraintBased_Square_IsSet_
  commentId: Overload:SudokuSpice.ConstraintBased.Square.IsSet
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Square.IsSet
  nameWithType: Square.IsSet
- uid: SudokuSpice.ConstraintBased.Square.NumPossibleValues
  name: NumPossibleValues
  href: api/SudokuSpice.ConstraintBased.Square.html#SudokuSpice_ConstraintBased_Square_NumPossibleValues
  commentId: P:SudokuSpice.ConstraintBased.Square.NumPossibleValues
  fullName: SudokuSpice.ConstraintBased.Square.NumPossibleValues
  nameWithType: Square.NumPossibleValues
- uid: SudokuSpice.ConstraintBased.Square.NumPossibleValues*
  name: NumPossibleValues
  href: api/SudokuSpice.ConstraintBased.Square.html#SudokuSpice_ConstraintBased_Square_NumPossibleValues_
  commentId: Overload:SudokuSpice.ConstraintBased.Square.NumPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Square.NumPossibleValues
  nameWithType: Square.NumPossibleValues
- uid: SudokuSpice.Coordinate
  name: Coordinate
  href: api/SudokuSpice.Coordinate.html
  commentId: T:SudokuSpice.Coordinate
  fullName: SudokuSpice.Coordinate
  nameWithType: Coordinate
- uid: SudokuSpice.Coordinate.#ctor(System.Int32,System.Int32)
  name: Coordinate(Int32, Int32)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate__ctor_System_Int32_System_Int32_
  commentId: M:SudokuSpice.Coordinate.#ctor(System.Int32,System.Int32)
  fullName: SudokuSpice.Coordinate.Coordinate(System.Int32, System.Int32)
  nameWithType: Coordinate.Coordinate(Int32, Int32)
- uid: SudokuSpice.Coordinate.#ctor*
  name: Coordinate
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate__ctor_
  commentId: Overload:SudokuSpice.Coordinate.#ctor
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Coordinate
  nameWithType: Coordinate.Coordinate
- uid: SudokuSpice.Coordinate.Column
  name: Column
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Column
  commentId: P:SudokuSpice.Coordinate.Column
  fullName: SudokuSpice.Coordinate.Column
  nameWithType: Coordinate.Column
- uid: SudokuSpice.Coordinate.Column*
  name: Column
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Column_
  commentId: Overload:SudokuSpice.Coordinate.Column
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Column
  nameWithType: Coordinate.Column
- uid: SudokuSpice.Coordinate.Deconstruct(System.Int32@,System.Int32@)
  name: Deconstruct(out Int32, out Int32)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Deconstruct_System_Int32__System_Int32__
  commentId: M:SudokuSpice.Coordinate.Deconstruct(System.Int32@,System.Int32@)
  name.vb: Deconstruct(ByRef Int32, ByRef Int32)
  fullName: SudokuSpice.Coordinate.Deconstruct(out System.Int32, out System.Int32)
  fullName.vb: SudokuSpice.Coordinate.Deconstruct(ByRef System.Int32, ByRef System.Int32)
  nameWithType: Coordinate.Deconstruct(out Int32, out Int32)
  nameWithType.vb: Coordinate.Deconstruct(ByRef Int32, ByRef Int32)
- uid: SudokuSpice.Coordinate.Deconstruct*
  name: Deconstruct
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Deconstruct_
  commentId: Overload:SudokuSpice.Coordinate.Deconstruct
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Deconstruct
  nameWithType: Coordinate.Deconstruct
- uid: SudokuSpice.Coordinate.Equals(SudokuSpice.Coordinate)
  name: Equals(Coordinate)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Equals_SudokuSpice_Coordinate_
  commentId: M:SudokuSpice.Coordinate.Equals(SudokuSpice.Coordinate)
  fullName: SudokuSpice.Coordinate.Equals(SudokuSpice.Coordinate)
  nameWithType: Coordinate.Equals(Coordinate)
- uid: SudokuSpice.Coordinate.Equals(SudokuSpice.Coordinate@)
  name: Equals(Coordinate)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Equals_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.Coordinate.Equals(SudokuSpice.Coordinate@)
  name.vb: Equals(ByRef Coordinate)
  fullName: SudokuSpice.Coordinate.Equals(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.Coordinate.Equals(ByRef SudokuSpice.Coordinate)
  nameWithType: Coordinate.Equals(Coordinate)
  nameWithType.vb: Coordinate.Equals(ByRef Coordinate)
- uid: SudokuSpice.Coordinate.Equals(System.Object)
  name: Equals(Object)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Equals_System_Object_
  commentId: M:SudokuSpice.Coordinate.Equals(System.Object)
  fullName: SudokuSpice.Coordinate.Equals(System.Object)
  nameWithType: Coordinate.Equals(Object)
- uid: SudokuSpice.Coordinate.Equals*
  name: Equals
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Equals_
  commentId: Overload:SudokuSpice.Coordinate.Equals
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Equals
  nameWithType: Coordinate.Equals
- uid: SudokuSpice.Coordinate.GetHashCode
  name: GetHashCode()
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_GetHashCode
  commentId: M:SudokuSpice.Coordinate.GetHashCode
  fullName: SudokuSpice.Coordinate.GetHashCode()
  nameWithType: Coordinate.GetHashCode()
- uid: SudokuSpice.Coordinate.GetHashCode*
  name: GetHashCode
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_GetHashCode_
  commentId: Overload:SudokuSpice.Coordinate.GetHashCode
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.GetHashCode
  nameWithType: Coordinate.GetHashCode
- uid: SudokuSpice.Coordinate.op_Equality(SudokuSpice.Coordinate@,SudokuSpice.Coordinate@)
  name: Equality(Coordinate, Coordinate)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_op_Equality_SudokuSpice_Coordinate__SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.Coordinate.op_Equality(SudokuSpice.Coordinate@,SudokuSpice.Coordinate@)
  name.vb: Equality(ByRef Coordinate, ByRef Coordinate)
  fullName: SudokuSpice.Coordinate.Equality(SudokuSpice.Coordinate, SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.Coordinate.Equality(ByRef SudokuSpice.Coordinate, ByRef SudokuSpice.Coordinate)
  nameWithType: Coordinate.Equality(Coordinate, Coordinate)
  nameWithType.vb: Coordinate.Equality(ByRef Coordinate, ByRef Coordinate)
- uid: SudokuSpice.Coordinate.op_Equality*
  name: Equality
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_op_Equality_
  commentId: Overload:SudokuSpice.Coordinate.op_Equality
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Equality
  nameWithType: Coordinate.Equality
- uid: SudokuSpice.Coordinate.op_Inequality(SudokuSpice.Coordinate@,SudokuSpice.Coordinate@)
  name: Inequality(Coordinate, Coordinate)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_op_Inequality_SudokuSpice_Coordinate__SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.Coordinate.op_Inequality(SudokuSpice.Coordinate@,SudokuSpice.Coordinate@)
  name.vb: Inequality(ByRef Coordinate, ByRef Coordinate)
  fullName: SudokuSpice.Coordinate.Inequality(SudokuSpice.Coordinate, SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.Coordinate.Inequality(ByRef SudokuSpice.Coordinate, ByRef SudokuSpice.Coordinate)
  nameWithType: Coordinate.Inequality(Coordinate, Coordinate)
  nameWithType.vb: Coordinate.Inequality(ByRef Coordinate, ByRef Coordinate)
- uid: SudokuSpice.Coordinate.op_Inequality*
  name: Inequality
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_op_Inequality_
  commentId: Overload:SudokuSpice.Coordinate.op_Inequality
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Inequality
  nameWithType: Coordinate.Inequality
- uid: SudokuSpice.Coordinate.Row
  name: Row
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Row
  commentId: P:SudokuSpice.Coordinate.Row
  fullName: SudokuSpice.Coordinate.Row
  nameWithType: Coordinate.Row
- uid: SudokuSpice.Coordinate.Row*
  name: Row
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Row_
  commentId: Overload:SudokuSpice.Coordinate.Row
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Row
  nameWithType: Coordinate.Row
- uid: SudokuSpice.Coordinate.ToString
  name: ToString()
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_ToString
  commentId: M:SudokuSpice.Coordinate.ToString
  fullName: SudokuSpice.Coordinate.ToString()
  nameWithType: Coordinate.ToString()
- uid: SudokuSpice.Coordinate.ToString*
  name: ToString
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_ToString_
  commentId: Overload:SudokuSpice.Coordinate.ToString
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.ToString
  nameWithType: Coordinate.ToString
- uid: SudokuSpice.CoordinateTracker
  name: CoordinateTracker
  href: api/SudokuSpice.CoordinateTracker.html
  commentId: T:SudokuSpice.CoordinateTracker
  fullName: SudokuSpice.CoordinateTracker
  nameWithType: CoordinateTracker
- uid: SudokuSpice.CoordinateTracker.#ctor(SudokuSpice.CoordinateTracker)
  name: CoordinateTracker(CoordinateTracker)
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker__ctor_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.CoordinateTracker.#ctor(SudokuSpice.CoordinateTracker)
  fullName: SudokuSpice.CoordinateTracker.CoordinateTracker(SudokuSpice.CoordinateTracker)
  nameWithType: CoordinateTracker.CoordinateTracker(CoordinateTracker)
- uid: SudokuSpice.CoordinateTracker.#ctor(System.Int32)
  name: CoordinateTracker(Int32)
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker__ctor_System_Int32_
  commentId: M:SudokuSpice.CoordinateTracker.#ctor(System.Int32)
  fullName: SudokuSpice.CoordinateTracker.CoordinateTracker(System.Int32)
  nameWithType: CoordinateTracker.CoordinateTracker(Int32)
- uid: SudokuSpice.CoordinateTracker.#ctor*
  name: CoordinateTracker
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker__ctor_
  commentId: Overload:SudokuSpice.CoordinateTracker.#ctor
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.CoordinateTracker
  nameWithType: CoordinateTracker.CoordinateTracker
- uid: SudokuSpice.CoordinateTracker.Add(SudokuSpice.Coordinate@)
  name: Add(Coordinate)
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Add_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.CoordinateTracker.Add(SudokuSpice.Coordinate@)
  name.vb: Add(ByRef Coordinate)
  fullName: SudokuSpice.CoordinateTracker.Add(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.CoordinateTracker.Add(ByRef SudokuSpice.Coordinate)
  nameWithType: CoordinateTracker.Add(Coordinate)
  nameWithType.vb: CoordinateTracker.Add(ByRef Coordinate)
- uid: SudokuSpice.CoordinateTracker.Add*
  name: Add
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Add_
  commentId: Overload:SudokuSpice.CoordinateTracker.Add
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.Add
  nameWithType: CoordinateTracker.Add
- uid: SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked(SudokuSpice.Coordinate@)
  name: AddOrTrackIfUntracked(Coordinate)
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_AddOrTrackIfUntracked_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked(SudokuSpice.Coordinate@)
  name.vb: AddOrTrackIfUntracked(ByRef Coordinate)
  fullName: SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked(ByRef SudokuSpice.Coordinate)
  nameWithType: CoordinateTracker.AddOrTrackIfUntracked(Coordinate)
  nameWithType.vb: CoordinateTracker.AddOrTrackIfUntracked(ByRef Coordinate)
- uid: SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked*
  name: AddOrTrackIfUntracked
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_AddOrTrackIfUntracked_
  commentId: Overload:SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked
  nameWithType: CoordinateTracker.AddOrTrackIfUntracked
- uid: SudokuSpice.CoordinateTracker.AddOrTrackResult
  name: CoordinateTracker.AddOrTrackResult
  href: api/SudokuSpice.CoordinateTracker.AddOrTrackResult.html
  commentId: T:SudokuSpice.CoordinateTracker.AddOrTrackResult
  fullName: SudokuSpice.CoordinateTracker.AddOrTrackResult
  nameWithType: CoordinateTracker.AddOrTrackResult
- uid: SudokuSpice.CoordinateTracker.AddOrTrackResult.AddedAndTracked
  name: AddedAndTracked
  href: api/SudokuSpice.CoordinateTracker.AddOrTrackResult.html#SudokuSpice_CoordinateTracker_AddOrTrackResult_AddedAndTracked
  commentId: F:SudokuSpice.CoordinateTracker.AddOrTrackResult.AddedAndTracked
  fullName: SudokuSpice.CoordinateTracker.AddOrTrackResult.AddedAndTracked
  nameWithType: CoordinateTracker.AddOrTrackResult.AddedAndTracked
- uid: SudokuSpice.CoordinateTracker.AddOrTrackResult.Tracked
  name: Tracked
  href: api/SudokuSpice.CoordinateTracker.AddOrTrackResult.html#SudokuSpice_CoordinateTracker_AddOrTrackResult_Tracked
  commentId: F:SudokuSpice.CoordinateTracker.AddOrTrackResult.Tracked
  fullName: SudokuSpice.CoordinateTracker.AddOrTrackResult.Tracked
  nameWithType: CoordinateTracker.AddOrTrackResult.Tracked
- uid: SudokuSpice.CoordinateTracker.AddOrTrackResult.Unchanged
  name: Unchanged
  href: api/SudokuSpice.CoordinateTracker.AddOrTrackResult.html#SudokuSpice_CoordinateTracker_AddOrTrackResult_Unchanged
  commentId: F:SudokuSpice.CoordinateTracker.AddOrTrackResult.Unchanged
  fullName: SudokuSpice.CoordinateTracker.AddOrTrackResult.Unchanged
  nameWithType: CoordinateTracker.AddOrTrackResult.Unchanged
- uid: SudokuSpice.CoordinateTracker.GetTrackedCoords
  name: GetTrackedCoords()
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_GetTrackedCoords
  commentId: M:SudokuSpice.CoordinateTracker.GetTrackedCoords
  fullName: SudokuSpice.CoordinateTracker.GetTrackedCoords()
  nameWithType: CoordinateTracker.GetTrackedCoords()
- uid: SudokuSpice.CoordinateTracker.GetTrackedCoords*
  name: GetTrackedCoords
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_GetTrackedCoords_
  commentId: Overload:SudokuSpice.CoordinateTracker.GetTrackedCoords
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.GetTrackedCoords
  nameWithType: CoordinateTracker.GetTrackedCoords
- uid: SudokuSpice.CoordinateTracker.NumTracked
  name: NumTracked
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_NumTracked
  commentId: P:SudokuSpice.CoordinateTracker.NumTracked
  fullName: SudokuSpice.CoordinateTracker.NumTracked
  nameWithType: CoordinateTracker.NumTracked
- uid: SudokuSpice.CoordinateTracker.NumTracked*
  name: NumTracked
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_NumTracked_
  commentId: Overload:SudokuSpice.CoordinateTracker.NumTracked
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.NumTracked
  nameWithType: CoordinateTracker.NumTracked
- uid: SudokuSpice.CoordinateTracker.Size
  name: Size
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Size
  commentId: P:SudokuSpice.CoordinateTracker.Size
  fullName: SudokuSpice.CoordinateTracker.Size
  nameWithType: CoordinateTracker.Size
- uid: SudokuSpice.CoordinateTracker.Size*
  name: Size
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Size_
  commentId: Overload:SudokuSpice.CoordinateTracker.Size
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.Size
  nameWithType: CoordinateTracker.Size
- uid: SudokuSpice.CoordinateTracker.Track(SudokuSpice.Coordinate@)
  name: Track(Coordinate)
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Track_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.CoordinateTracker.Track(SudokuSpice.Coordinate@)
  name.vb: Track(ByRef Coordinate)
  fullName: SudokuSpice.CoordinateTracker.Track(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.CoordinateTracker.Track(ByRef SudokuSpice.Coordinate)
  nameWithType: CoordinateTracker.Track(Coordinate)
  nameWithType.vb: CoordinateTracker.Track(ByRef Coordinate)
- uid: SudokuSpice.CoordinateTracker.Track*
  name: Track
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Track_
  commentId: Overload:SudokuSpice.CoordinateTracker.Track
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.Track
  nameWithType: CoordinateTracker.Track
- uid: SudokuSpice.CoordinateTracker.Untrack(SudokuSpice.Coordinate@)
  name: Untrack(Coordinate)
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Untrack_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.CoordinateTracker.Untrack(SudokuSpice.Coordinate@)
  name.vb: Untrack(ByRef Coordinate)
  fullName: SudokuSpice.CoordinateTracker.Untrack(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.CoordinateTracker.Untrack(ByRef SudokuSpice.Coordinate)
  nameWithType: CoordinateTracker.Untrack(Coordinate)
  nameWithType.vb: CoordinateTracker.Untrack(ByRef Coordinate)
- uid: SudokuSpice.CoordinateTracker.Untrack*
  name: Untrack
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Untrack_
  commentId: Overload:SudokuSpice.CoordinateTracker.Untrack
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.Untrack
  nameWithType: CoordinateTracker.Untrack
- uid: SudokuSpice.CoordinateTracker.UntrackAll
  name: UntrackAll()
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_UntrackAll
  commentId: M:SudokuSpice.CoordinateTracker.UntrackAll
  fullName: SudokuSpice.CoordinateTracker.UntrackAll()
  nameWithType: CoordinateTracker.UntrackAll()
- uid: SudokuSpice.CoordinateTracker.UntrackAll*
  name: UntrackAll
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_UntrackAll_
  commentId: Overload:SudokuSpice.CoordinateTracker.UntrackAll
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.UntrackAll
  nameWithType: CoordinateTracker.UntrackAll
- uid: SudokuSpice.IPuzzle
  name: IPuzzle
  href: api/SudokuSpice.IPuzzle.html
  commentId: T:SudokuSpice.IPuzzle
  fullName: SudokuSpice.IPuzzle
  nameWithType: IPuzzle
- uid: SudokuSpice.IPuzzle.DeepCopy
  name: DeepCopy()
  href: api/SudokuSpice.IPuzzle.html#SudokuSpice_IPuzzle_DeepCopy
  commentId: M:SudokuSpice.IPuzzle.DeepCopy
  fullName: SudokuSpice.IPuzzle.DeepCopy()
  nameWithType: IPuzzle.DeepCopy()
- uid: SudokuSpice.IPuzzle.DeepCopy*
  name: DeepCopy
  href: api/SudokuSpice.IPuzzle.html#SudokuSpice_IPuzzle_DeepCopy_
  commentId: Overload:SudokuSpice.IPuzzle.DeepCopy
  isSpec: "True"
  fullName: SudokuSpice.IPuzzle.DeepCopy
  nameWithType: IPuzzle.DeepCopy
- uid: SudokuSpice.IPuzzle.Item(SudokuSpice.Coordinate@)
  name: Item[Coordinate]
  href: api/SudokuSpice.IPuzzle.html#SudokuSpice_IPuzzle_Item_SudokuSpice_Coordinate__
  commentId: P:SudokuSpice.IPuzzle.Item(SudokuSpice.Coordinate@)
  name.vb: Item(ByRef Coordinate)
  fullName: SudokuSpice.IPuzzle.Item[SudokuSpice.Coordinate]
  fullName.vb: SudokuSpice.IPuzzle.Item(ByRef SudokuSpice.Coordinate)
  nameWithType: IPuzzle.Item[Coordinate]
  nameWithType.vb: IPuzzle.Item(ByRef Coordinate)
- uid: SudokuSpice.IPuzzle.Item(System.Int32,System.Int32)
  name: Item[Int32, Int32]
  href: api/SudokuSpice.IPuzzle.html#SudokuSpice_IPuzzle_Item_System_Int32_System_Int32_
  commentId: P:SudokuSpice.IPuzzle.Item(System.Int32,System.Int32)
  name.vb: Item(Int32, Int32)
  fullName: SudokuSpice.IPuzzle.Item[System.Int32, System.Int32]
  fullName.vb: SudokuSpice.IPuzzle.Item(System.Int32, System.Int32)
  nameWithType: IPuzzle.Item[Int32, Int32]
  nameWithType.vb: IPuzzle.Item(Int32, Int32)
- uid: SudokuSpice.IPuzzle.Item*
  name: Item
  href: api/SudokuSpice.IPuzzle.html#SudokuSpice_IPuzzle_Item_
  commentId: Overload:SudokuSpice.IPuzzle.Item
  isSpec: "True"
  fullName: SudokuSpice.IPuzzle.Item
  nameWithType: IPuzzle.Item
- uid: SudokuSpice.IReadOnlyBoxPuzzle
  name: IReadOnlyBoxPuzzle
  href: api/SudokuSpice.IReadOnlyBoxPuzzle.html
  commentId: T:SudokuSpice.IReadOnlyBoxPuzzle
  fullName: SudokuSpice.IReadOnlyBoxPuzzle
  nameWithType: IReadOnlyBoxPuzzle
- uid: SudokuSpice.IReadOnlyBoxPuzzle.BoxSize
  name: BoxSize
  href: api/SudokuSpice.IReadOnlyBoxPuzzle.html#SudokuSpice_IReadOnlyBoxPuzzle_BoxSize
  commentId: P:SudokuSpice.IReadOnlyBoxPuzzle.BoxSize
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.BoxSize
  nameWithType: IReadOnlyBoxPuzzle.BoxSize
- uid: SudokuSpice.IReadOnlyBoxPuzzle.BoxSize*
  name: BoxSize
  href: api/SudokuSpice.IReadOnlyBoxPuzzle.html#SudokuSpice_IReadOnlyBoxPuzzle_BoxSize_
  commentId: Overload:SudokuSpice.IReadOnlyBoxPuzzle.BoxSize
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.BoxSize
  nameWithType: IReadOnlyBoxPuzzle.BoxSize
- uid: SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex(System.Int32,System.Int32)
  name: GetBoxIndex(Int32, Int32)
  href: api/SudokuSpice.IReadOnlyBoxPuzzle.html#SudokuSpice_IReadOnlyBoxPuzzle_GetBoxIndex_System_Int32_System_Int32_
  commentId: M:SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex(System.Int32,System.Int32)
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex(System.Int32, System.Int32)
  nameWithType: IReadOnlyBoxPuzzle.GetBoxIndex(Int32, Int32)
- uid: SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex*
  name: GetBoxIndex
  href: api/SudokuSpice.IReadOnlyBoxPuzzle.html#SudokuSpice_IReadOnlyBoxPuzzle_GetBoxIndex_
  commentId: Overload:SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.GetBoxIndex
  nameWithType: IReadOnlyBoxPuzzle.GetBoxIndex
- uid: SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate(System.Int32)
  name: GetStartingBoxCoordinate(Int32)
  href: api/SudokuSpice.IReadOnlyBoxPuzzle.html#SudokuSpice_IReadOnlyBoxPuzzle_GetStartingBoxCoordinate_System_Int32_
  commentId: M:SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate(System.Int32)
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate(System.Int32)
  nameWithType: IReadOnlyBoxPuzzle.GetStartingBoxCoordinate(Int32)
- uid: SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate*
  name: GetStartingBoxCoordinate
  href: api/SudokuSpice.IReadOnlyBoxPuzzle.html#SudokuSpice_IReadOnlyBoxPuzzle_GetStartingBoxCoordinate_
  commentId: Overload:SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.GetStartingBoxCoordinate
  nameWithType: IReadOnlyBoxPuzzle.GetStartingBoxCoordinate
- uid: SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox(System.Int32)
  name: YieldUnsetCoordsForBox(Int32)
  href: api/SudokuSpice.IReadOnlyBoxPuzzle.html#SudokuSpice_IReadOnlyBoxPuzzle_YieldUnsetCoordsForBox_System_Int32_
  commentId: M:SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox(System.Int32)
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox(System.Int32)
  nameWithType: IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox(Int32)
- uid: SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox*
  name: YieldUnsetCoordsForBox
  href: api/SudokuSpice.IReadOnlyBoxPuzzle.html#SudokuSpice_IReadOnlyBoxPuzzle_YieldUnsetCoordsForBox_
  commentId: Overload:SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox
  nameWithType: IReadOnlyBoxPuzzle.YieldUnsetCoordsForBox
- uid: SudokuSpice.IReadOnlyPuzzle
  name: IReadOnlyPuzzle
  href: api/SudokuSpice.IReadOnlyPuzzle.html
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
- uid: SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  name: AllPossibleValuesSpan
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_AllPossibleValuesSpan
  commentId: P:SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  fullName: SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  nameWithType: IReadOnlyPuzzle.AllPossibleValuesSpan
- uid: SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan*
  name: AllPossibleValuesSpan
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_AllPossibleValuesSpan_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  nameWithType: IReadOnlyPuzzle.AllPossibleValuesSpan
- uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  name: GetUnsetCoords()
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_GetUnsetCoords
  commentId: M:SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords()
  nameWithType: IReadOnlyPuzzle.GetUnsetCoords()
- uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords*
  name: GetUnsetCoords
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_GetUnsetCoords_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  nameWithType: IReadOnlyPuzzle.GetUnsetCoords
- uid: SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  name: Item[Coordinate]
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_Item_SudokuSpice_Coordinate__
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  name.vb: Item(ByRef Coordinate)
  fullName: SudokuSpice.IReadOnlyPuzzle.Item[SudokuSpice.Coordinate]
  fullName.vb: SudokuSpice.IReadOnlyPuzzle.Item(ByRef SudokuSpice.Coordinate)
  nameWithType: IReadOnlyPuzzle.Item[Coordinate]
  nameWithType.vb: IReadOnlyPuzzle.Item(ByRef Coordinate)
- uid: SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  name: Item[Int32, Int32]
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_Item_System_Int32_System_Int32_
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  name.vb: Item(Int32, Int32)
  fullName: SudokuSpice.IReadOnlyPuzzle.Item[System.Int32, System.Int32]
  fullName.vb: SudokuSpice.IReadOnlyPuzzle.Item(System.Int32, System.Int32)
  nameWithType: IReadOnlyPuzzle.Item[Int32, Int32]
  nameWithType.vb: IReadOnlyPuzzle.Item(Int32, Int32)
- uid: SudokuSpice.IReadOnlyPuzzle.Item*
  name: Item
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_Item_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.Item
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.Item
  nameWithType: IReadOnlyPuzzle.Item
- uid: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  name: NumEmptySquares
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_NumEmptySquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  nameWithType: IReadOnlyPuzzle.NumEmptySquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares*
  name: NumEmptySquares
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_NumEmptySquares_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  nameWithType: IReadOnlyPuzzle.NumEmptySquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  name: NumSetSquares
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_NumSetSquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  nameWithType: IReadOnlyPuzzle.NumSetSquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumSetSquares*
  name: NumSetSquares
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_NumSetSquares_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  nameWithType: IReadOnlyPuzzle.NumSetSquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumSquares
  name: NumSquares
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_NumSquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumSquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSquares
  nameWithType: IReadOnlyPuzzle.NumSquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumSquares*
  name: NumSquares
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_NumSquares_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.NumSquares
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSquares
  nameWithType: IReadOnlyPuzzle.NumSquares
- uid: SudokuSpice.IReadOnlyPuzzle.Size
  name: Size
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_Size
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Size
  fullName: SudokuSpice.IReadOnlyPuzzle.Size
  nameWithType: IReadOnlyPuzzle.Size
- uid: SudokuSpice.IReadOnlyPuzzle.Size*
  name: Size
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_Size_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.Size
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.Size
  nameWithType: IReadOnlyPuzzle.Size
- uid: SudokuSpice.Puzzle
  name: Puzzle
  href: api/SudokuSpice.Puzzle.html
  commentId: T:SudokuSpice.Puzzle
  fullName: SudokuSpice.Puzzle
  nameWithType: Puzzle
- uid: SudokuSpice.Puzzle.#ctor(SudokuSpice.Puzzle)
  name: Puzzle(Puzzle)
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle__ctor_SudokuSpice_Puzzle_
  commentId: M:SudokuSpice.Puzzle.#ctor(SudokuSpice.Puzzle)
  fullName: SudokuSpice.Puzzle.Puzzle(SudokuSpice.Puzzle)
  nameWithType: Puzzle.Puzzle(Puzzle)
- uid: SudokuSpice.Puzzle.#ctor(System.Int32)
  name: Puzzle(Int32)
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle__ctor_System_Int32_
  commentId: M:SudokuSpice.Puzzle.#ctor(System.Int32)
  fullName: SudokuSpice.Puzzle.Puzzle(System.Int32)
  nameWithType: Puzzle.Puzzle(Int32)
- uid: SudokuSpice.Puzzle.#ctor(System.Nullable{System.Int32}[0:,0:])
  name: Puzzle(Nullable<Int32>[,])
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle__ctor_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.Puzzle.#ctor(System.Nullable{System.Int32}[0:,0:])
  name.vb: Puzzle(Nullable(Of Int32)(,))
  fullName: SudokuSpice.Puzzle.Puzzle(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.Puzzle.Puzzle(System.Nullable(Of System.Int32)(,))
  nameWithType: Puzzle.Puzzle(Nullable<Int32>[,])
  nameWithType.vb: Puzzle.Puzzle(Nullable(Of Int32)(,))
- uid: SudokuSpice.Puzzle.#ctor*
  name: Puzzle
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle__ctor_
  commentId: Overload:SudokuSpice.Puzzle.#ctor
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.Puzzle
  nameWithType: Puzzle.Puzzle
- uid: SudokuSpice.Puzzle.AllPossibleValuesSpan
  name: AllPossibleValuesSpan
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_AllPossibleValuesSpan
  commentId: P:SudokuSpice.Puzzle.AllPossibleValuesSpan
  fullName: SudokuSpice.Puzzle.AllPossibleValuesSpan
  nameWithType: Puzzle.AllPossibleValuesSpan
- uid: SudokuSpice.Puzzle.AllPossibleValuesSpan*
  name: AllPossibleValuesSpan
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_AllPossibleValuesSpan_
  commentId: Overload:SudokuSpice.Puzzle.AllPossibleValuesSpan
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.AllPossibleValuesSpan
  nameWithType: Puzzle.AllPossibleValuesSpan
- uid: SudokuSpice.Puzzle.BoxSize
  name: BoxSize
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_BoxSize
  commentId: P:SudokuSpice.Puzzle.BoxSize
  fullName: SudokuSpice.Puzzle.BoxSize
  nameWithType: Puzzle.BoxSize
- uid: SudokuSpice.Puzzle.BoxSize*
  name: BoxSize
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_BoxSize_
  commentId: Overload:SudokuSpice.Puzzle.BoxSize
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.BoxSize
  nameWithType: Puzzle.BoxSize
- uid: SudokuSpice.Puzzle.DeepCopy
  name: DeepCopy()
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_DeepCopy
  commentId: M:SudokuSpice.Puzzle.DeepCopy
  fullName: SudokuSpice.Puzzle.DeepCopy()
  nameWithType: Puzzle.DeepCopy()
- uid: SudokuSpice.Puzzle.DeepCopy*
  name: DeepCopy
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_DeepCopy_
  commentId: Overload:SudokuSpice.Puzzle.DeepCopy
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.DeepCopy
  nameWithType: Puzzle.DeepCopy
- uid: SudokuSpice.Puzzle.GetBoxIndex(System.Int32,System.Int32)
  name: GetBoxIndex(Int32, Int32)
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_GetBoxIndex_System_Int32_System_Int32_
  commentId: M:SudokuSpice.Puzzle.GetBoxIndex(System.Int32,System.Int32)
  fullName: SudokuSpice.Puzzle.GetBoxIndex(System.Int32, System.Int32)
  nameWithType: Puzzle.GetBoxIndex(Int32, Int32)
- uid: SudokuSpice.Puzzle.GetBoxIndex*
  name: GetBoxIndex
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_GetBoxIndex_
  commentId: Overload:SudokuSpice.Puzzle.GetBoxIndex
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.GetBoxIndex
  nameWithType: Puzzle.GetBoxIndex
- uid: SudokuSpice.Puzzle.GetStartingBoxCoordinate(System.Int32)
  name: GetStartingBoxCoordinate(Int32)
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_GetStartingBoxCoordinate_System_Int32_
  commentId: M:SudokuSpice.Puzzle.GetStartingBoxCoordinate(System.Int32)
  fullName: SudokuSpice.Puzzle.GetStartingBoxCoordinate(System.Int32)
  nameWithType: Puzzle.GetStartingBoxCoordinate(Int32)
- uid: SudokuSpice.Puzzle.GetStartingBoxCoordinate*
  name: GetStartingBoxCoordinate
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_GetStartingBoxCoordinate_
  commentId: Overload:SudokuSpice.Puzzle.GetStartingBoxCoordinate
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.GetStartingBoxCoordinate
  nameWithType: Puzzle.GetStartingBoxCoordinate
- uid: SudokuSpice.Puzzle.GetUnsetCoords
  name: GetUnsetCoords()
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_GetUnsetCoords
  commentId: M:SudokuSpice.Puzzle.GetUnsetCoords
  fullName: SudokuSpice.Puzzle.GetUnsetCoords()
  nameWithType: Puzzle.GetUnsetCoords()
- uid: SudokuSpice.Puzzle.GetUnsetCoords*
  name: GetUnsetCoords
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_GetUnsetCoords_
  commentId: Overload:SudokuSpice.Puzzle.GetUnsetCoords
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.GetUnsetCoords
  nameWithType: Puzzle.GetUnsetCoords
- uid: SudokuSpice.Puzzle.Item(SudokuSpice.Coordinate@)
  name: Item[Coordinate]
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_Item_SudokuSpice_Coordinate__
  commentId: P:SudokuSpice.Puzzle.Item(SudokuSpice.Coordinate@)
  name.vb: Item(ByRef Coordinate)
  fullName: SudokuSpice.Puzzle.Item[SudokuSpice.Coordinate]
  fullName.vb: SudokuSpice.Puzzle.Item(ByRef SudokuSpice.Coordinate)
  nameWithType: Puzzle.Item[Coordinate]
  nameWithType.vb: Puzzle.Item(ByRef Coordinate)
- uid: SudokuSpice.Puzzle.Item(System.Int32,System.Int32)
  name: Item[Int32, Int32]
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_Item_System_Int32_System_Int32_
  commentId: P:SudokuSpice.Puzzle.Item(System.Int32,System.Int32)
  name.vb: Item(Int32, Int32)
  fullName: SudokuSpice.Puzzle.Item[System.Int32, System.Int32]
  fullName.vb: SudokuSpice.Puzzle.Item(System.Int32, System.Int32)
  nameWithType: Puzzle.Item[Int32, Int32]
  nameWithType.vb: Puzzle.Item(Int32, Int32)
- uid: SudokuSpice.Puzzle.Item*
  name: Item
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_Item_
  commentId: Overload:SudokuSpice.Puzzle.Item
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.Item
  nameWithType: Puzzle.Item
- uid: SudokuSpice.Puzzle.NumEmptySquares
  name: NumEmptySquares
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_NumEmptySquares
  commentId: P:SudokuSpice.Puzzle.NumEmptySquares
  fullName: SudokuSpice.Puzzle.NumEmptySquares
  nameWithType: Puzzle.NumEmptySquares
- uid: SudokuSpice.Puzzle.NumEmptySquares*
  name: NumEmptySquares
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_NumEmptySquares_
  commentId: Overload:SudokuSpice.Puzzle.NumEmptySquares
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.NumEmptySquares
  nameWithType: Puzzle.NumEmptySquares
- uid: SudokuSpice.Puzzle.NumSetSquares
  name: NumSetSquares
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_NumSetSquares
  commentId: P:SudokuSpice.Puzzle.NumSetSquares
  fullName: SudokuSpice.Puzzle.NumSetSquares
  nameWithType: Puzzle.NumSetSquares
- uid: SudokuSpice.Puzzle.NumSetSquares*
  name: NumSetSquares
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_NumSetSquares_
  commentId: Overload:SudokuSpice.Puzzle.NumSetSquares
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.NumSetSquares
  nameWithType: Puzzle.NumSetSquares
- uid: SudokuSpice.Puzzle.NumSquares
  name: NumSquares
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_NumSquares
  commentId: P:SudokuSpice.Puzzle.NumSquares
  fullName: SudokuSpice.Puzzle.NumSquares
  nameWithType: Puzzle.NumSquares
- uid: SudokuSpice.Puzzle.NumSquares*
  name: NumSquares
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_NumSquares_
  commentId: Overload:SudokuSpice.Puzzle.NumSquares
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.NumSquares
  nameWithType: Puzzle.NumSquares
- uid: SudokuSpice.Puzzle.Size
  name: Size
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_Size
  commentId: P:SudokuSpice.Puzzle.Size
  fullName: SudokuSpice.Puzzle.Size
  nameWithType: Puzzle.Size
- uid: SudokuSpice.Puzzle.Size*
  name: Size
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_Size_
  commentId: Overload:SudokuSpice.Puzzle.Size
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.Size
  nameWithType: Puzzle.Size
- uid: SudokuSpice.Puzzle.ToString
  name: ToString()
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_ToString
  commentId: M:SudokuSpice.Puzzle.ToString
  fullName: SudokuSpice.Puzzle.ToString()
  nameWithType: Puzzle.ToString()
- uid: SudokuSpice.Puzzle.ToString*
  name: ToString
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_ToString_
  commentId: Overload:SudokuSpice.Puzzle.ToString
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.ToString
  nameWithType: Puzzle.ToString
- uid: SudokuSpice.Puzzle.YieldUnsetCoordsForBox(System.Int32)
  name: YieldUnsetCoordsForBox(Int32)
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_YieldUnsetCoordsForBox_System_Int32_
  commentId: M:SudokuSpice.Puzzle.YieldUnsetCoordsForBox(System.Int32)
  fullName: SudokuSpice.Puzzle.YieldUnsetCoordsForBox(System.Int32)
  nameWithType: Puzzle.YieldUnsetCoordsForBox(Int32)
- uid: SudokuSpice.Puzzle.YieldUnsetCoordsForBox*
  name: YieldUnsetCoordsForBox
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_YieldUnsetCoordsForBox_
  commentId: Overload:SudokuSpice.Puzzle.YieldUnsetCoordsForBox
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.YieldUnsetCoordsForBox
  nameWithType: Puzzle.YieldUnsetCoordsForBox
- uid: SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  href: api/SudokuSpice.RuleBased.html
  commentId: N:SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.BitVector
  name: BitVector
  href: api/SudokuSpice.RuleBased.BitVector.html
  commentId: T:SudokuSpice.RuleBased.BitVector
  fullName: SudokuSpice.RuleBased.BitVector
  nameWithType: BitVector
- uid: SudokuSpice.RuleBased.BitVector.#ctor(System.UInt32)
  name: BitVector(UInt32)
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector__ctor_System_UInt32_
  commentId: M:SudokuSpice.RuleBased.BitVector.#ctor(System.UInt32)
  fullName: SudokuSpice.RuleBased.BitVector.BitVector(System.UInt32)
  nameWithType: BitVector.BitVector(UInt32)
- uid: SudokuSpice.RuleBased.BitVector.#ctor*
  name: BitVector
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector__ctor_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.BitVector
  nameWithType: BitVector.BitVector
- uid: SudokuSpice.RuleBased.BitVector.Count
  name: Count
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_Count
  commentId: P:SudokuSpice.RuleBased.BitVector.Count
  fullName: SudokuSpice.RuleBased.BitVector.Count
  nameWithType: BitVector.Count
- uid: SudokuSpice.RuleBased.BitVector.Count*
  name: Count
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_Count_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.Count
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.Count
  nameWithType: BitVector.Count
- uid: SudokuSpice.RuleBased.BitVector.CreateWithSize(System.Int32)
  name: CreateWithSize(Int32)
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_CreateWithSize_System_Int32_
  commentId: M:SudokuSpice.RuleBased.BitVector.CreateWithSize(System.Int32)
  fullName: SudokuSpice.RuleBased.BitVector.CreateWithSize(System.Int32)
  nameWithType: BitVector.CreateWithSize(Int32)
- uid: SudokuSpice.RuleBased.BitVector.CreateWithSize*
  name: CreateWithSize
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_CreateWithSize_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.CreateWithSize
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.CreateWithSize
  nameWithType: BitVector.CreateWithSize
- uid: SudokuSpice.RuleBased.BitVector.Data
  name: Data
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_Data
  commentId: P:SudokuSpice.RuleBased.BitVector.Data
  fullName: SudokuSpice.RuleBased.BitVector.Data
  nameWithType: BitVector.Data
- uid: SudokuSpice.RuleBased.BitVector.Data*
  name: Data
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_Data_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.Data
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.Data
  nameWithType: BitVector.Data
- uid: SudokuSpice.RuleBased.BitVector.Equals(SudokuSpice.RuleBased.BitVector)
  name: Equals(BitVector)
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_Equals_SudokuSpice_RuleBased_BitVector_
  commentId: M:SudokuSpice.RuleBased.BitVector.Equals(SudokuSpice.RuleBased.BitVector)
  fullName: SudokuSpice.RuleBased.BitVector.Equals(SudokuSpice.RuleBased.BitVector)
  nameWithType: BitVector.Equals(BitVector)
- uid: SudokuSpice.RuleBased.BitVector.Equals(System.Object)
  name: Equals(Object)
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_Equals_System_Object_
  commentId: M:SudokuSpice.RuleBased.BitVector.Equals(System.Object)
  fullName: SudokuSpice.RuleBased.BitVector.Equals(System.Object)
  nameWithType: BitVector.Equals(Object)
- uid: SudokuSpice.RuleBased.BitVector.Equals*
  name: Equals
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_Equals_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.Equals
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.Equals
  nameWithType: BitVector.Equals
- uid: SudokuSpice.RuleBased.BitVector.FindIntersect(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  name: FindIntersect(BitVector, BitVector)
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_FindIntersect_SudokuSpice_RuleBased_BitVector_SudokuSpice_RuleBased_BitVector_
  commentId: M:SudokuSpice.RuleBased.BitVector.FindIntersect(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  fullName: SudokuSpice.RuleBased.BitVector.FindIntersect(SudokuSpice.RuleBased.BitVector, SudokuSpice.RuleBased.BitVector)
  nameWithType: BitVector.FindIntersect(BitVector, BitVector)
- uid: SudokuSpice.RuleBased.BitVector.FindIntersect*
  name: FindIntersect
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_FindIntersect_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.FindIntersect
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.FindIntersect
  nameWithType: BitVector.FindIntersect
- uid: SudokuSpice.RuleBased.BitVector.FindUnion(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  name: FindUnion(BitVector, BitVector)
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_FindUnion_SudokuSpice_RuleBased_BitVector_SudokuSpice_RuleBased_BitVector_
  commentId: M:SudokuSpice.RuleBased.BitVector.FindUnion(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  fullName: SudokuSpice.RuleBased.BitVector.FindUnion(SudokuSpice.RuleBased.BitVector, SudokuSpice.RuleBased.BitVector)
  nameWithType: BitVector.FindUnion(BitVector, BitVector)
- uid: SudokuSpice.RuleBased.BitVector.FindUnion*
  name: FindUnion
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_FindUnion_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.FindUnion
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.FindUnion
  nameWithType: BitVector.FindUnion
- uid: SudokuSpice.RuleBased.BitVector.GetHashCode
  name: GetHashCode()
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_GetHashCode
  commentId: M:SudokuSpice.RuleBased.BitVector.GetHashCode
  fullName: SudokuSpice.RuleBased.BitVector.GetHashCode()
  nameWithType: BitVector.GetHashCode()
- uid: SudokuSpice.RuleBased.BitVector.GetHashCode*
  name: GetHashCode
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_GetHashCode_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.GetHashCode
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.GetHashCode
  nameWithType: BitVector.GetHashCode
- uid: SudokuSpice.RuleBased.BitVector.GetSetBits
  name: GetSetBits()
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_GetSetBits
  commentId: M:SudokuSpice.RuleBased.BitVector.GetSetBits
  fullName: SudokuSpice.RuleBased.BitVector.GetSetBits()
  nameWithType: BitVector.GetSetBits()
- uid: SudokuSpice.RuleBased.BitVector.GetSetBits*
  name: GetSetBits
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_GetSetBits_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.GetSetBits
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.GetSetBits
  nameWithType: BitVector.GetSetBits
- uid: SudokuSpice.RuleBased.BitVector.IsBitSet(System.Int32)
  name: IsBitSet(Int32)
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_IsBitSet_System_Int32_
  commentId: M:SudokuSpice.RuleBased.BitVector.IsBitSet(System.Int32)
  fullName: SudokuSpice.RuleBased.BitVector.IsBitSet(System.Int32)
  nameWithType: BitVector.IsBitSet(Int32)
- uid: SudokuSpice.RuleBased.BitVector.IsBitSet*
  name: IsBitSet
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_IsBitSet_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.IsBitSet
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.IsBitSet
  nameWithType: BitVector.IsBitSet
- uid: SudokuSpice.RuleBased.BitVector.IsEmpty
  name: IsEmpty()
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_IsEmpty
  commentId: M:SudokuSpice.RuleBased.BitVector.IsEmpty
  fullName: SudokuSpice.RuleBased.BitVector.IsEmpty()
  nameWithType: BitVector.IsEmpty()
- uid: SudokuSpice.RuleBased.BitVector.IsEmpty*
  name: IsEmpty
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_IsEmpty_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.IsEmpty
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.IsEmpty
  nameWithType: BitVector.IsEmpty
- uid: SudokuSpice.RuleBased.BitVector.op_Equality(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  name: Equality(BitVector, BitVector)
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_op_Equality_SudokuSpice_RuleBased_BitVector_SudokuSpice_RuleBased_BitVector_
  commentId: M:SudokuSpice.RuleBased.BitVector.op_Equality(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  fullName: SudokuSpice.RuleBased.BitVector.Equality(SudokuSpice.RuleBased.BitVector, SudokuSpice.RuleBased.BitVector)
  nameWithType: BitVector.Equality(BitVector, BitVector)
- uid: SudokuSpice.RuleBased.BitVector.op_Equality*
  name: Equality
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_op_Equality_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.op_Equality
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.Equality
  nameWithType: BitVector.Equality
- uid: SudokuSpice.RuleBased.BitVector.op_Inequality(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  name: Inequality(BitVector, BitVector)
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_op_Inequality_SudokuSpice_RuleBased_BitVector_SudokuSpice_RuleBased_BitVector_
  commentId: M:SudokuSpice.RuleBased.BitVector.op_Inequality(SudokuSpice.RuleBased.BitVector,SudokuSpice.RuleBased.BitVector)
  fullName: SudokuSpice.RuleBased.BitVector.Inequality(SudokuSpice.RuleBased.BitVector, SudokuSpice.RuleBased.BitVector)
  nameWithType: BitVector.Inequality(BitVector, BitVector)
- uid: SudokuSpice.RuleBased.BitVector.op_Inequality*
  name: Inequality
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_op_Inequality_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.op_Inequality
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.Inequality
  nameWithType: BitVector.Inequality
- uid: SudokuSpice.RuleBased.BitVector.PopulateSetBits(System.Span{System.Int32})
  name: PopulateSetBits(Span<Int32>)
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_PopulateSetBits_System_Span_System_Int32__
  commentId: M:SudokuSpice.RuleBased.BitVector.PopulateSetBits(System.Span{System.Int32})
  name.vb: PopulateSetBits(Span(Of Int32))
  fullName: SudokuSpice.RuleBased.BitVector.PopulateSetBits(System.Span<System.Int32>)
  fullName.vb: SudokuSpice.RuleBased.BitVector.PopulateSetBits(System.Span(Of System.Int32))
  nameWithType: BitVector.PopulateSetBits(Span<Int32>)
  nameWithType.vb: BitVector.PopulateSetBits(Span(Of Int32))
- uid: SudokuSpice.RuleBased.BitVector.PopulateSetBits*
  name: PopulateSetBits
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_PopulateSetBits_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.PopulateSetBits
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.PopulateSetBits
  nameWithType: BitVector.PopulateSetBits
- uid: SudokuSpice.RuleBased.BitVector.SetBit(System.Int32)
  name: SetBit(Int32)
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_SetBit_System_Int32_
  commentId: M:SudokuSpice.RuleBased.BitVector.SetBit(System.Int32)
  fullName: SudokuSpice.RuleBased.BitVector.SetBit(System.Int32)
  nameWithType: BitVector.SetBit(Int32)
- uid: SudokuSpice.RuleBased.BitVector.SetBit*
  name: SetBit
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_SetBit_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.SetBit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.SetBit
  nameWithType: BitVector.SetBit
- uid: SudokuSpice.RuleBased.BitVector.ToString
  name: ToString()
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_ToString
  commentId: M:SudokuSpice.RuleBased.BitVector.ToString
  fullName: SudokuSpice.RuleBased.BitVector.ToString()
  nameWithType: BitVector.ToString()
- uid: SudokuSpice.RuleBased.BitVector.ToString*
  name: ToString
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_ToString_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.ToString
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.ToString
  nameWithType: BitVector.ToString
- uid: SudokuSpice.RuleBased.BitVector.UnsetBit(System.Int32)
  name: UnsetBit(Int32)
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_UnsetBit_System_Int32_
  commentId: M:SudokuSpice.RuleBased.BitVector.UnsetBit(System.Int32)
  fullName: SudokuSpice.RuleBased.BitVector.UnsetBit(System.Int32)
  nameWithType: BitVector.UnsetBit(Int32)
- uid: SudokuSpice.RuleBased.BitVector.UnsetBit*
  name: UnsetBit
  href: api/SudokuSpice.RuleBased.BitVector.html#SudokuSpice_RuleBased_BitVector_UnsetBit_
  commentId: Overload:SudokuSpice.RuleBased.BitVector.UnsetBit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.BitVector.UnsetBit
  nameWithType: BitVector.UnsetBit
- uid: SudokuSpice.RuleBased.Boxes
  name: Boxes
  href: api/SudokuSpice.RuleBased.Boxes.html
  commentId: T:SudokuSpice.RuleBased.Boxes
  fullName: SudokuSpice.RuleBased.Boxes
  nameWithType: Boxes
- uid: SudokuSpice.RuleBased.Boxes.CalculateBoxIndex(SudokuSpice.Coordinate@,System.Int32)
  name: CalculateBoxIndex(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.Boxes.html#SudokuSpice_RuleBased_Boxes_CalculateBoxIndex_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.Boxes.CalculateBoxIndex(SudokuSpice.Coordinate@,System.Int32)
  name.vb: CalculateBoxIndex(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Boxes.CalculateBoxIndex(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.Boxes.CalculateBoxIndex(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: Boxes.CalculateBoxIndex(Coordinate, Int32)
  nameWithType.vb: Boxes.CalculateBoxIndex(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.Boxes.CalculateBoxIndex*
  name: CalculateBoxIndex
  href: api/SudokuSpice.RuleBased.Boxes.html#SudokuSpice_RuleBased_Boxes_CalculateBoxIndex_
  commentId: Overload:SudokuSpice.RuleBased.Boxes.CalculateBoxIndex
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Boxes.CalculateBoxIndex
  nameWithType: Boxes.CalculateBoxIndex
- uid: SudokuSpice.RuleBased.Boxes.CalculateBoxSize(System.Int32)
  name: CalculateBoxSize(Int32)
  href: api/SudokuSpice.RuleBased.Boxes.html#SudokuSpice_RuleBased_Boxes_CalculateBoxSize_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Boxes.CalculateBoxSize(System.Int32)
  fullName: SudokuSpice.RuleBased.Boxes.CalculateBoxSize(System.Int32)
  nameWithType: Boxes.CalculateBoxSize(Int32)
- uid: SudokuSpice.RuleBased.Boxes.CalculateBoxSize*
  name: CalculateBoxSize
  href: api/SudokuSpice.RuleBased.Boxes.html#SudokuSpice_RuleBased_Boxes_CalculateBoxSize_
  commentId: Overload:SudokuSpice.RuleBased.Boxes.CalculateBoxSize
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Boxes.CalculateBoxSize
  nameWithType: Boxes.CalculateBoxSize
- uid: SudokuSpice.RuleBased.Boxes.GetStartingBoxCoordinate(System.Int32,System.Int32)
  name: GetStartingBoxCoordinate(Int32, Int32)
  href: api/SudokuSpice.RuleBased.Boxes.html#SudokuSpice_RuleBased_Boxes_GetStartingBoxCoordinate_System_Int32_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Boxes.GetStartingBoxCoordinate(System.Int32,System.Int32)
  fullName: SudokuSpice.RuleBased.Boxes.GetStartingBoxCoordinate(System.Int32, System.Int32)
  nameWithType: Boxes.GetStartingBoxCoordinate(Int32, Int32)
- uid: SudokuSpice.RuleBased.Boxes.GetStartingBoxCoordinate*
  name: GetStartingBoxCoordinate
  href: api/SudokuSpice.RuleBased.Boxes.html#SudokuSpice_RuleBased_Boxes_GetStartingBoxCoordinate_
  commentId: Overload:SudokuSpice.RuleBased.Boxes.GetStartingBoxCoordinate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Boxes.GetStartingBoxCoordinate
  nameWithType: Boxes.GetStartingBoxCoordinate
- uid: SudokuSpice.RuleBased.Boxes.YieldUnsetCoordsForBox(System.Int32,System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: YieldUnsetCoordsForBox(Int32, Int32, IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Boxes.html#SudokuSpice_RuleBased_Boxes_YieldUnsetCoordsForBox_System_Int32_System_Int32_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Boxes.YieldUnsetCoordsForBox(System.Int32,System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Boxes.YieldUnsetCoordsForBox(System.Int32, System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: Boxes.YieldUnsetCoordsForBox(Int32, Int32, IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Boxes.YieldUnsetCoordsForBox*
  name: YieldUnsetCoordsForBox
  href: api/SudokuSpice.RuleBased.Boxes.html#SudokuSpice_RuleBased_Boxes_YieldUnsetCoordsForBox_
  commentId: Overload:SudokuSpice.RuleBased.Boxes.YieldUnsetCoordsForBox
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Boxes.YieldUnsetCoordsForBox
  nameWithType: Boxes.YieldUnsetCoordsForBox
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper
  name: DynamicRuleKeeper
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html
  commentId: T:SudokuSpice.RuleBased.DynamicRuleKeeper
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper
  nameWithType: DynamicRuleKeeper
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor(System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name: DynamicRuleKeeper(IReadOnlyList<ISudokuRule>)
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper__ctor_System_Collections_Generic_IReadOnlyList_SudokuSpice_RuleBased_Rules_ISudokuRule__
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor(System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name.vb: DynamicRuleKeeper(IReadOnlyList(Of ISudokuRule))
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.DynamicRuleKeeper(System.Collections.Generic.IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  fullName.vb: SudokuSpice.RuleBased.DynamicRuleKeeper.DynamicRuleKeeper(System.Collections.Generic.IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  nameWithType: DynamicRuleKeeper.DynamicRuleKeeper(IReadOnlyList<ISudokuRule>)
  nameWithType.vb: DynamicRuleKeeper.DynamicRuleKeeper(IReadOnlyList(Of ISudokuRule))
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor*
  name: DynamicRuleKeeper
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper__ctor_
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.DynamicRuleKeeper
  nameWithType: DynamicRuleKeeper.DynamicRuleKeeper
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: DynamicRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences
  nameWithType: DynamicRuleKeeper.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
  name: GetRules()
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_GetRules
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules()
  nameWithType: DynamicRuleKeeper.GetRules()
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules*
  name: GetRules
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_GetRules_
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
  nameWithType: DynamicRuleKeeper.GetRules
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: DynamicRuleKeeper.TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit
  nameWithType: DynamicRuleKeeper.TryInit
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  name: TrySet(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_TrySet_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  name.vb: TrySet(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: DynamicRuleKeeper.TrySet(Coordinate, Int32)
  nameWithType.vb: DynamicRuleKeeper.TrySet(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet*
  name: TrySet
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_TrySet_
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet
  nameWithType: DynamicRuleKeeper.TrySet
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  name: Unset(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_Unset_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Unset(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: DynamicRuleKeeper.Unset(Coordinate, Int32)
  nameWithType.vb: DynamicRuleKeeper.Unset(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset*
  name: Unset
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_Unset_
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.Unset
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset
  nameWithType: DynamicRuleKeeper.Unset
- uid: SudokuSpice.RuleBased.Heuristics
  name: SudokuSpice.RuleBased.Heuristics
  href: api/SudokuSpice.RuleBased.Heuristics.html
  commentId: N:SudokuSpice.RuleBased.Heuristics
  fullName: SudokuSpice.RuleBased.Heuristics
  nameWithType: SudokuSpice.RuleBased.Heuristics
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  name: ISudokuHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.html
  commentId: T:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic
  nameWithType: ISudokuHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  href: api/SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.html#SudokuSpice_RuleBased_Heuristics_ISudokuHeuristic_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_System_Collections_Generic_IReadOnlyList_SudokuSpice_RuleBased_Rules_ISudokuRule__
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.Collections.Generic.IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  fullName.vb: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.Collections.Generic.IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  nameWithType: ISudokuHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType.vb: ISudokuHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.html#SudokuSpice_RuleBased_Heuristics_ISudokuHeuristic_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.CopyWithNewReferences
  nameWithType: ISudokuHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.html#SudokuSpice_RuleBased_Heuristics_ISudokuHeuristic_TryInitFor_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: ISudokuHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor*
  name: TryInitFor
  href: api/SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.html#SudokuSpice_RuleBased_Heuristics_ISudokuHeuristic_TryInitFor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.TryInitFor
  nameWithType: ISudokuHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  name: UndoLastUpdate()
  href: api/SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.html#SudokuSpice_RuleBased_Heuristics_ISudokuHeuristic_UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate()
  nameWithType: ISudokuHeuristic.UndoLastUpdate()
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate*
  name: UndoLastUpdate
  href: api/SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.html#SudokuSpice_RuleBased_Heuristics_ISudokuHeuristic_UndoLastUpdate_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UndoLastUpdate
  nameWithType: ISudokuHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  name: UpdateAll()
  href: api/SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.html#SudokuSpice_RuleBased_Heuristics_ISudokuHeuristic_UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll()
  nameWithType: ISudokuHeuristic.UpdateAll()
- uid: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll*
  name: UpdateAll
  href: api/SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.html#SudokuSpice_RuleBased_Heuristics_ISudokuHeuristic_UpdateAll_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic.UpdateAll
  nameWithType: ISudokuHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  name: StandardHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html
  commentId: T:SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  nameWithType: StandardHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker,SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker,SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  name: StandardHeuristic(IMissingRowValuesTracker, IMissingColumnValuesTracker, IMissingBoxValuesTracker)
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic__ctor_SudokuSpice_RuleBased_Rules_IMissingRowValuesTracker_SudokuSpice_RuleBased_Rules_IMissingColumnValuesTracker_SudokuSpice_RuleBased_Rules_IMissingBoxValuesTracker_
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker,SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker,SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.StandardHeuristic(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker, SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker, SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  nameWithType: StandardHeuristic.StandardHeuristic(IMissingRowValuesTracker, IMissingColumnValuesTracker, IMissingBoxValuesTracker)
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor*
  name: StandardHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.StandardHeuristic
  nameWithType: StandardHeuristic.StandardHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_System_Collections_Generic_IReadOnlyList_SudokuSpice_RuleBased_Rules_ISudokuRule__
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.Collections.Generic.IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  fullName.vb: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.Collections.Generic.IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  nameWithType: StandardHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType.vb: StandardHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences
  nameWithType: StandardHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_TryInitFor_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: StandardHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor*
  name: TryInitFor
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_TryInitFor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor
  nameWithType: StandardHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
  name: UndoLastUpdate()
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate()
  nameWithType: StandardHeuristic.UndoLastUpdate()
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate*
  name: UndoLastUpdate
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_UndoLastUpdate_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
  nameWithType: StandardHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
  name: UpdateAll()
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll()
  nameWithType: StandardHeuristic.UpdateAll()
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll*
  name: UpdateAll
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_UpdateAll_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
  nameWithType: StandardHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  name: UniqueInBoxHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  nameWithType: UniqueInBoxHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  name: UniqueInBoxHeuristic(IMissingBoxValuesTracker)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic__ctor_SudokuSpice_RuleBased_Rules_IMissingBoxValuesTracker_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UniqueInBoxHeuristic(SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  nameWithType: UniqueInBoxHeuristic.UniqueInBoxHeuristic(IMissingBoxValuesTracker)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor*
  name: UniqueInBoxHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UniqueInBoxHeuristic
  nameWithType: UniqueInBoxHeuristic.UniqueInBoxHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_System_Collections_Generic_IReadOnlyList_SudokuSpice_RuleBased_Rules_ISudokuRule__
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.Collections.Generic.IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.Collections.Generic.IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  nameWithType: UniqueInBoxHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType.vb: UniqueInBoxHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences
  nameWithType: UniqueInBoxHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetMissingValuesForDimension(Int32, IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_GetMissingValuesForDimension_System_Int32_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetMissingValuesForDimension(System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniqueInBoxHeuristic.GetMissingValuesForDimension(Int32, IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetMissingValuesForDimension*
  name: GetMissingValuesForDimension
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_GetMissingValuesForDimension_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetMissingValuesForDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetMissingValuesForDimension
  nameWithType: UniqueInBoxHeuristic.GetMissingValuesForDimension
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetNumDimensions(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_GetNumDimensions_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniqueInBoxHeuristic.GetNumDimensions(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetNumDimensions*
  name: GetNumDimensions
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_GetNumDimensions_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetNumDimensions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetNumDimensions
  nameWithType: UniqueInBoxHeuristic.GetNumDimensions
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetUnsetCoordinatesOnDimension(Int32, IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_GetUnsetCoordinatesOnDimension_System_Int32_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetUnsetCoordinatesOnDimension(System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniqueInBoxHeuristic.GetUnsetCoordinatesOnDimension(Int32, IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetUnsetCoordinatesOnDimension*
  name: GetUnsetCoordinatesOnDimension
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_GetUnsetCoordinatesOnDimension_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetUnsetCoordinatesOnDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.GetUnsetCoordinatesOnDimension
  nameWithType: UniqueInBoxHeuristic.GetUnsetCoordinatesOnDimension
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_TryInitFor_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInBoxHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor*
  name: TryInitFor
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_TryInitFor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor
  nameWithType: UniqueInBoxHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic
  name: UniqueInColumnHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic
  nameWithType: UniqueInColumnHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker)
  name: UniqueInColumnHeuristic(IMissingColumnValuesTracker)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic__ctor_SudokuSpice_RuleBased_Rules_IMissingColumnValuesTracker_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UniqueInColumnHeuristic(SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker)
  nameWithType: UniqueInColumnHeuristic.UniqueInColumnHeuristic(IMissingColumnValuesTracker)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.#ctor*
  name: UniqueInColumnHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UniqueInColumnHeuristic
  nameWithType: UniqueInColumnHeuristic.UniqueInColumnHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_System_Collections_Generic_IReadOnlyList_SudokuSpice_RuleBased_Rules_ISudokuRule__
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.Collections.Generic.IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.Collections.Generic.IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  nameWithType: UniqueInColumnHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType.vb: UniqueInColumnHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences
  nameWithType: UniqueInColumnHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetMissingValuesForDimension(Int32, IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_GetMissingValuesForDimension_System_Int32_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetMissingValuesForDimension(System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniqueInColumnHeuristic.GetMissingValuesForDimension(Int32, IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetMissingValuesForDimension*
  name: GetMissingValuesForDimension
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_GetMissingValuesForDimension_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetMissingValuesForDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetMissingValuesForDimension
  nameWithType: UniqueInColumnHeuristic.GetMissingValuesForDimension
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetNumDimensions(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_GetNumDimensions_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniqueInColumnHeuristic.GetNumDimensions(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetNumDimensions*
  name: GetNumDimensions
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_GetNumDimensions_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetNumDimensions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetNumDimensions
  nameWithType: UniqueInColumnHeuristic.GetNumDimensions
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetUnsetCoordinatesOnDimension(Int32, IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_GetUnsetCoordinatesOnDimension_System_Int32_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetUnsetCoordinatesOnDimension(System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniqueInColumnHeuristic.GetUnsetCoordinatesOnDimension(Int32, IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetUnsetCoordinatesOnDimension*
  name: GetUnsetCoordinatesOnDimension
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_GetUnsetCoordinatesOnDimension_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetUnsetCoordinatesOnDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.GetUnsetCoordinatesOnDimension
  nameWithType: UniqueInColumnHeuristic.GetUnsetCoordinatesOnDimension
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  name: UniqueInRowHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  nameWithType: UniqueInRowHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  name: UniqueInRowHeuristic(IMissingRowValuesTracker)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic__ctor_SudokuSpice_RuleBased_Rules_IMissingRowValuesTracker_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UniqueInRowHeuristic(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  nameWithType: UniqueInRowHeuristic.UniqueInRowHeuristic(IMissingRowValuesTracker)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor*
  name: UniqueInRowHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UniqueInRowHeuristic
  nameWithType: UniqueInRowHeuristic.UniqueInRowHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_System_Collections_Generic_IReadOnlyList_SudokuSpice_RuleBased_Rules_ISudokuRule__
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.Collections.Generic.IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.Collections.Generic.IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  nameWithType: UniqueInRowHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType.vb: UniqueInRowHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences
  nameWithType: UniqueInRowHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetMissingValuesForDimension(Int32, IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_GetMissingValuesForDimension_System_Int32_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension(System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniqueInRowHeuristic.GetMissingValuesForDimension(Int32, IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension*
  name: GetMissingValuesForDimension
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_GetMissingValuesForDimension_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetMissingValuesForDimension
  nameWithType: UniqueInRowHeuristic.GetMissingValuesForDimension
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetNumDimensions(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_GetNumDimensions_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniqueInRowHeuristic.GetNumDimensions(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions*
  name: GetNumDimensions
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_GetNumDimensions_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetNumDimensions
  nameWithType: UniqueInRowHeuristic.GetNumDimensions
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetUnsetCoordinatesOnDimension(Int32, IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_GetUnsetCoordinatesOnDimension_System_Int32_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension(System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension(Int32, IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension*
  name: GetUnsetCoordinatesOnDimension
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_GetUnsetCoordinatesOnDimension_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension
  nameWithType: UniqueInRowHeuristic.GetUnsetCoordinatesOnDimension
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  name: UniqueInXHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic
  nameWithType: UniqueInXHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.#ctor
  name: UniqueInXHeuristic()
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic__ctor
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.#ctor
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UniqueInXHeuristic()
  nameWithType: UniqueInXHeuristic.UniqueInXHeuristic()
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.#ctor(SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic,SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: UniqueInXHeuristic(UniqueInXHeuristic, IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic__ctor_SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.#ctor(SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic,SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UniqueInXHeuristic(SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic, SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInXHeuristic.UniqueInXHeuristic(UniqueInXHeuristic, IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.#ctor*
  name: UniqueInXHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UniqueInXHeuristic
  nameWithType: UniqueInXHeuristic.UniqueInXHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_System_Collections_Generic_IReadOnlyList_SudokuSpice_RuleBased_Rules_ISudokuRule__
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,System.Collections.Generic.IReadOnlyList{SudokuSpice.RuleBased.Rules.ISudokuRule})
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.Collections.Generic.IReadOnlyList<SudokuSpice.RuleBased.Rules.ISudokuRule>)
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, System.Collections.Generic.IReadOnlyList(Of SudokuSpice.RuleBased.Rules.ISudokuRule))
  nameWithType: UniqueInXHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<ISudokuRule>)
  nameWithType.vb: UniqueInXHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of ISudokuRule))
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.CopyWithNewReferences
  nameWithType: UniqueInXHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetMissingValuesForDimension(Int32, IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_GetMissingValuesForDimension_System_Int32_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension(System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniqueInXHeuristic.GetMissingValuesForDimension(Int32, IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension*
  name: GetMissingValuesForDimension
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_GetMissingValuesForDimension_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetMissingValuesForDimension
  nameWithType: UniqueInXHeuristic.GetMissingValuesForDimension
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetNumDimensions(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_GetNumDimensions_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniqueInXHeuristic.GetNumDimensions(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions*
  name: GetNumDimensions
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_GetNumDimensions_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetNumDimensions
  nameWithType: UniqueInXHeuristic.GetNumDimensions
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetUnsetCoordinatesOnDimension(Int32, IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_GetUnsetCoordinatesOnDimension_System_Int32_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension(System.Int32,SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension(System.Int32, SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniqueInXHeuristic.GetUnsetCoordinatesOnDimension(Int32, IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension*
  name: GetUnsetCoordinatesOnDimension
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_GetUnsetCoordinatesOnDimension_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.GetUnsetCoordinatesOnDimension
  nameWithType: UniqueInXHeuristic.GetUnsetCoordinatesOnDimension
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_TryInitFor_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInXHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor*
  name: TryInitFor
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_TryInitFor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.TryInitFor
  nameWithType: UniqueInXHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate
  name: UndoLastUpdate()
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate()
  nameWithType: UniqueInXHeuristic.UndoLastUpdate()
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate*
  name: UndoLastUpdate
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_UndoLastUpdate_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UndoLastUpdate
  nameWithType: UniqueInXHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll
  name: UpdateAll()
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll()
  nameWithType: UniqueInXHeuristic.UpdateAll()
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll*
  name: UpdateAll
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHeuristic_UpdateAll_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHeuristic.UpdateAll
  nameWithType: UniqueInXHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle
  name: IReadOnlyPuzzle
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzle
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.AllPossibleValues
  name: AllPossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_AllPossibleValues
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.AllPossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.AllPossibleValues
  nameWithType: IReadOnlyPuzzle.AllPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.AllPossibleValues*
  name: AllPossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_AllPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPuzzle.AllPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.AllPossibleValues
  nameWithType: IReadOnlyPuzzle.AllPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: IReadOnlyPuzzle.GetPossibleValues(Coordinate)
  nameWithType.vb: IReadOnlyPuzzle.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetPossibleValues
  nameWithType: IReadOnlyPuzzle.GetPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords
  name: GetUnsetCoords()
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_GetUnsetCoords
  commentId: M:SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords()
  nameWithType: IReadOnlyPuzzle.GetUnsetCoords()
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords*
  name: GetUnsetCoords
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_GetUnsetCoords_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.GetUnsetCoords
  nameWithType: IReadOnlyPuzzle.GetUnsetCoords
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  name: Item[Coordinate]
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_Item_SudokuSpice_Coordinate__
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  name.vb: Item(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item[SudokuSpice.Coordinate]
  fullName.vb: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(ByRef SudokuSpice.Coordinate)
  nameWithType: IReadOnlyPuzzle.Item[Coordinate]
  nameWithType.vb: IReadOnlyPuzzle.Item(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  name: Item[Int32, Int32]
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_Item_System_Int32_System_Int32_
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  name.vb: Item(Int32, Int32)
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item[System.Int32, System.Int32]
  fullName.vb: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item(System.Int32, System.Int32)
  nameWithType: IReadOnlyPuzzle.Item[Int32, Int32]
  nameWithType.vb: IReadOnlyPuzzle.Item(Int32, Int32)
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item*
  name: Item
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_Item_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPuzzle.Item
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.Item
  nameWithType: IReadOnlyPuzzle.Item
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumEmptySquares
  name: NumEmptySquares
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_NumEmptySquares
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.NumEmptySquares
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumEmptySquares
  nameWithType: IReadOnlyPuzzle.NumEmptySquares
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumEmptySquares*
  name: NumEmptySquares
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_NumEmptySquares_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPuzzle.NumEmptySquares
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumEmptySquares
  nameWithType: IReadOnlyPuzzle.NumEmptySquares
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSetSquares
  name: NumSetSquares
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_NumSetSquares
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSetSquares
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSetSquares
  nameWithType: IReadOnlyPuzzle.NumSetSquares
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSetSquares*
  name: NumSetSquares
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_NumSetSquares_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSetSquares
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSetSquares
  nameWithType: IReadOnlyPuzzle.NumSetSquares
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSquares
  name: NumSquares
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_NumSquares
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSquares
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSquares
  nameWithType: IReadOnlyPuzzle.NumSquares
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSquares*
  name: NumSquares
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_NumSquares_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSquares
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.NumSquares
  nameWithType: IReadOnlyPuzzle.NumSquares
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.Size
  name: Size
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_Size
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPuzzle.Size
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.Size
  nameWithType: IReadOnlyPuzzle.Size
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzle.Size*
  name: Size
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzle.html#SudokuSpice_RuleBased_IReadOnlyPuzzle_Size_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPuzzle.Size
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzle.Size
  nameWithType: IReadOnlyPuzzle.Size
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  name: IReadOnlyPuzzleWithMutablePossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.html
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  name: IntersectPossibleValues(Coordinate, BitVector)
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.html#SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_IntersectPossibleValues_SudokuSpice_Coordinate__SudokuSpice_RuleBased_BitVector_
  commentId: M:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  name.vb: IntersectPossibleValues(ByRef Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  fullName.vb: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(ByRef SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(Coordinate, BitVector)
  nameWithType.vb: IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues(ByRef Coordinate, BitVector)
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues*
  name: IntersectPossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.html#SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_IntersectPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.IntersectPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  name: ResetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.html#SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_ResetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: ResetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(Coordinate)
  nameWithType.vb: IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues*
  name: ResetPossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.html#SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_ResetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.ResetPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  name: SetPossibleValues(Coordinate, BitVector)
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.html#SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_SetPossibleValues_SudokuSpice_Coordinate__SudokuSpice_RuleBased_BitVector_
  commentId: M:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  name.vb: SetPossibleValues(ByRef Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  fullName.vb: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(ByRef SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(Coordinate, BitVector)
  nameWithType.vb: IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues(ByRef Coordinate, BitVector)
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues*
  name: SetPossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.html#SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_SetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues.SetPossibleValues
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper
  name: ISudokuRuleKeeper
  href: api/SudokuSpice.RuleBased.ISudokuRuleKeeper.html
  commentId: T:SudokuSpice.RuleBased.ISudokuRuleKeeper
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper
  nameWithType: ISudokuRuleKeeper
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.ISudokuRuleKeeper.html#SudokuSpice_RuleBased_ISudokuRuleKeeper_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: ISudokuRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.ISudokuRuleKeeper.html#SudokuSpice_RuleBased_ISudokuRuleKeeper_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.CopyWithNewReferences
  nameWithType: ISudokuRuleKeeper.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  name: GetRules()
  href: api/SudokuSpice.RuleBased.ISudokuRuleKeeper.html#SudokuSpice_RuleBased_ISudokuRuleKeeper_GetRules
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules()
  nameWithType: ISudokuRuleKeeper.GetRules()
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules*
  name: GetRules
  href: api/SudokuSpice.RuleBased.ISudokuRuleKeeper.html#SudokuSpice_RuleBased_ISudokuRuleKeeper_GetRules_
  commentId: Overload:SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.GetRules
  nameWithType: ISudokuRuleKeeper.GetRules
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.ISudokuRuleKeeper.html#SudokuSpice_RuleBased_ISudokuRuleKeeper_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: ISudokuRuleKeeper.TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.ISudokuRuleKeeper.html#SudokuSpice_RuleBased_ISudokuRuleKeeper_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TryInit
  nameWithType: ISudokuRuleKeeper.TryInit
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  name: TrySet(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.ISudokuRuleKeeper.html#SudokuSpice_RuleBased_ISudokuRuleKeeper_TrySet_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  name.vb: TrySet(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: ISudokuRuleKeeper.TrySet(Coordinate, Int32)
  nameWithType.vb: ISudokuRuleKeeper.TrySet(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet*
  name: TrySet
  href: api/SudokuSpice.RuleBased.ISudokuRuleKeeper.html#SudokuSpice_RuleBased_ISudokuRuleKeeper_TrySet_
  commentId: Overload:SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.TrySet
  nameWithType: ISudokuRuleKeeper.TrySet
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  name: Unset(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.ISudokuRuleKeeper.html#SudokuSpice_RuleBased_ISudokuRuleKeeper_Unset_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Unset(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: ISudokuRuleKeeper.Unset(Coordinate, Int32)
  nameWithType.vb: ISudokuRuleKeeper.Unset(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset*
  name: Unset
  href: api/SudokuSpice.RuleBased.ISudokuRuleKeeper.html#SudokuSpice_RuleBased_ISudokuRuleKeeper_Unset_
  commentId: Overload:SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.ISudokuRuleKeeper.Unset
  nameWithType: ISudokuRuleKeeper.Unset
- uid: SudokuSpice.RuleBased.Puzzle
  name: Puzzle
  href: api/SudokuSpice.RuleBased.Puzzle.html
  commentId: T:SudokuSpice.RuleBased.Puzzle
  fullName: SudokuSpice.RuleBased.Puzzle
  nameWithType: Puzzle
- uid: SudokuSpice.RuleBased.Puzzle.#ctor(SudokuSpice.RuleBased.Puzzle)
  name: Puzzle(Puzzle)
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle__ctor_SudokuSpice_RuleBased_Puzzle_
  commentId: M:SudokuSpice.RuleBased.Puzzle.#ctor(SudokuSpice.RuleBased.Puzzle)
  fullName: SudokuSpice.RuleBased.Puzzle.Puzzle(SudokuSpice.RuleBased.Puzzle)
  nameWithType: Puzzle.Puzzle(Puzzle)
- uid: SudokuSpice.RuleBased.Puzzle.#ctor(System.Nullable{System.Int32}[0:,0:])
  name: Puzzle(Nullable<Int32>[,])
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle__ctor_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.RuleBased.Puzzle.#ctor(System.Nullable{System.Int32}[0:,0:])
  name.vb: Puzzle(Nullable(Of Int32)(,))
  fullName: SudokuSpice.RuleBased.Puzzle.Puzzle(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.RuleBased.Puzzle.Puzzle(System.Nullable(Of System.Int32)(,))
  nameWithType: Puzzle.Puzzle(Nullable<Int32>[,])
  nameWithType.vb: Puzzle.Puzzle(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.Puzzle.#ctor*
  name: Puzzle
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.Puzzle
  nameWithType: Puzzle.Puzzle
- uid: SudokuSpice.RuleBased.Puzzle.AllPossibleValues
  name: AllPossibleValues
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_AllPossibleValues
  commentId: P:SudokuSpice.RuleBased.Puzzle.AllPossibleValues
  fullName: SudokuSpice.RuleBased.Puzzle.AllPossibleValues
  nameWithType: Puzzle.AllPossibleValues
- uid: SudokuSpice.RuleBased.Puzzle.AllPossibleValues*
  name: AllPossibleValues
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_AllPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.AllPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.AllPossibleValues
  nameWithType: Puzzle.AllPossibleValues
- uid: SudokuSpice.RuleBased.Puzzle.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  name: CopyFrom(Nullable<Int32>[,])
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_CopyFrom_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.RuleBased.Puzzle.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  name.vb: CopyFrom(Nullable(Of Int32)(,))
  fullName: SudokuSpice.RuleBased.Puzzle.CopyFrom(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.RuleBased.Puzzle.CopyFrom(System.Nullable(Of System.Int32)(,))
  nameWithType: Puzzle.CopyFrom(Nullable<Int32>[,])
  nameWithType.vb: Puzzle.CopyFrom(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.Puzzle.CopyFrom*
  name: CopyFrom
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_CopyFrom_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.CopyFrom
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.CopyFrom
  nameWithType: Puzzle.CopyFrom
- uid: SudokuSpice.RuleBased.Puzzle.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Puzzle.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Puzzle.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Puzzle.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: Puzzle.GetPossibleValues(Coordinate)
  nameWithType.vb: Puzzle.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Puzzle.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.GetPossibleValues
  nameWithType: Puzzle.GetPossibleValues
- uid: SudokuSpice.RuleBased.Puzzle.GetUnsetCoords
  name: GetUnsetCoords()
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_GetUnsetCoords
  commentId: M:SudokuSpice.RuleBased.Puzzle.GetUnsetCoords
  fullName: SudokuSpice.RuleBased.Puzzle.GetUnsetCoords()
  nameWithType: Puzzle.GetUnsetCoords()
- uid: SudokuSpice.RuleBased.Puzzle.GetUnsetCoords*
  name: GetUnsetCoords
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_GetUnsetCoords_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.GetUnsetCoords
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.GetUnsetCoords
  nameWithType: Puzzle.GetUnsetCoords
- uid: SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  name: IntersectPossibleValues(Coordinate, BitVector)
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_IntersectPossibleValues_SudokuSpice_Coordinate__SudokuSpice_RuleBased_BitVector_
  commentId: M:SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  name.vb: IntersectPossibleValues(ByRef Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues(SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  fullName.vb: SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues(ByRef SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  nameWithType: Puzzle.IntersectPossibleValues(Coordinate, BitVector)
  nameWithType.vb: Puzzle.IntersectPossibleValues(ByRef Coordinate, BitVector)
- uid: SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues*
  name: IntersectPossibleValues
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_IntersectPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.IntersectPossibleValues
  nameWithType: Puzzle.IntersectPossibleValues
- uid: SudokuSpice.RuleBased.Puzzle.Item(SudokuSpice.Coordinate@)
  name: Item[Coordinate]
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_Item_SudokuSpice_Coordinate__
  commentId: P:SudokuSpice.RuleBased.Puzzle.Item(SudokuSpice.Coordinate@)
  name.vb: Item(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Puzzle.Item[SudokuSpice.Coordinate]
  fullName.vb: SudokuSpice.RuleBased.Puzzle.Item(ByRef SudokuSpice.Coordinate)
  nameWithType: Puzzle.Item[Coordinate]
  nameWithType.vb: Puzzle.Item(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Puzzle.Item(System.Int32,System.Int32)
  name: Item[Int32, Int32]
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_Item_System_Int32_System_Int32_
  commentId: P:SudokuSpice.RuleBased.Puzzle.Item(System.Int32,System.Int32)
  name.vb: Item(Int32, Int32)
  fullName: SudokuSpice.RuleBased.Puzzle.Item[System.Int32, System.Int32]
  fullName.vb: SudokuSpice.RuleBased.Puzzle.Item(System.Int32, System.Int32)
  nameWithType: Puzzle.Item[Int32, Int32]
  nameWithType.vb: Puzzle.Item(Int32, Int32)
- uid: SudokuSpice.RuleBased.Puzzle.Item*
  name: Item
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_Item_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.Item
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.Item
  nameWithType: Puzzle.Item
- uid: SudokuSpice.RuleBased.Puzzle.NumEmptySquares
  name: NumEmptySquares
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_NumEmptySquares
  commentId: P:SudokuSpice.RuleBased.Puzzle.NumEmptySquares
  fullName: SudokuSpice.RuleBased.Puzzle.NumEmptySquares
  nameWithType: Puzzle.NumEmptySquares
- uid: SudokuSpice.RuleBased.Puzzle.NumEmptySquares*
  name: NumEmptySquares
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_NumEmptySquares_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.NumEmptySquares
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.NumEmptySquares
  nameWithType: Puzzle.NumEmptySquares
- uid: SudokuSpice.RuleBased.Puzzle.NumSetSquares
  name: NumSetSquares
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_NumSetSquares
  commentId: P:SudokuSpice.RuleBased.Puzzle.NumSetSquares
  fullName: SudokuSpice.RuleBased.Puzzle.NumSetSquares
  nameWithType: Puzzle.NumSetSquares
- uid: SudokuSpice.RuleBased.Puzzle.NumSetSquares*
  name: NumSetSquares
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_NumSetSquares_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.NumSetSquares
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.NumSetSquares
  nameWithType: Puzzle.NumSetSquares
- uid: SudokuSpice.RuleBased.Puzzle.NumSquares
  name: NumSquares
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_NumSquares
  commentId: P:SudokuSpice.RuleBased.Puzzle.NumSquares
  fullName: SudokuSpice.RuleBased.Puzzle.NumSquares
  nameWithType: Puzzle.NumSquares
- uid: SudokuSpice.RuleBased.Puzzle.NumSquares*
  name: NumSquares
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_NumSquares_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.NumSquares
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.NumSquares
  nameWithType: Puzzle.NumSquares
- uid: SudokuSpice.RuleBased.Puzzle.ResetPossibleValues(SudokuSpice.Coordinate@)
  name: ResetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_ResetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Puzzle.ResetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: ResetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Puzzle.ResetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Puzzle.ResetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: Puzzle.ResetPossibleValues(Coordinate)
  nameWithType.vb: Puzzle.ResetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Puzzle.ResetPossibleValues*
  name: ResetPossibleValues
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_ResetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.ResetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.ResetPossibleValues
  nameWithType: Puzzle.ResetPossibleValues
- uid: SudokuSpice.RuleBased.Puzzle.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  name: SetPossibleValues(Coordinate, BitVector)
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_SetPossibleValues_SudokuSpice_Coordinate__SudokuSpice_RuleBased_BitVector_
  commentId: M:SudokuSpice.RuleBased.Puzzle.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.RuleBased.BitVector)
  name.vb: SetPossibleValues(ByRef Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.Puzzle.SetPossibleValues(SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  fullName.vb: SudokuSpice.RuleBased.Puzzle.SetPossibleValues(ByRef SudokuSpice.Coordinate, SudokuSpice.RuleBased.BitVector)
  nameWithType: Puzzle.SetPossibleValues(Coordinate, BitVector)
  nameWithType.vb: Puzzle.SetPossibleValues(ByRef Coordinate, BitVector)
- uid: SudokuSpice.RuleBased.Puzzle.SetPossibleValues*
  name: SetPossibleValues
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_SetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.SetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.SetPossibleValues
  nameWithType: Puzzle.SetPossibleValues
- uid: SudokuSpice.RuleBased.Puzzle.Size
  name: Size
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_Size
  commentId: P:SudokuSpice.RuleBased.Puzzle.Size
  fullName: SudokuSpice.RuleBased.Puzzle.Size
  nameWithType: Puzzle.Size
- uid: SudokuSpice.RuleBased.Puzzle.Size*
  name: Size
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_Size_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.Size
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.Size
  nameWithType: Puzzle.Size
- uid: SudokuSpice.RuleBased.Puzzle.ToString
  name: ToString()
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_ToString
  commentId: M:SudokuSpice.RuleBased.Puzzle.ToString
  fullName: SudokuSpice.RuleBased.Puzzle.ToString()
  nameWithType: Puzzle.ToString()
- uid: SudokuSpice.RuleBased.Puzzle.ToString*
  name: ToString
  href: api/SudokuSpice.RuleBased.Puzzle.html#SudokuSpice_RuleBased_Puzzle_ToString_
  commentId: Overload:SudokuSpice.RuleBased.Puzzle.ToString
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Puzzle.ToString
  nameWithType: Puzzle.ToString
- uid: SudokuSpice.RuleBased.PuzzleGenerator
  name: PuzzleGenerator
  href: api/SudokuSpice.RuleBased.PuzzleGenerator.html
  commentId: T:SudokuSpice.RuleBased.PuzzleGenerator
  fullName: SudokuSpice.RuleBased.PuzzleGenerator
  nameWithType: PuzzleGenerator
- uid: SudokuSpice.RuleBased.PuzzleGenerator.#ctor(SudokuSpice.RuleBased.PuzzleSolver)
  name: PuzzleGenerator(PuzzleSolver)
  href: api/SudokuSpice.RuleBased.PuzzleGenerator.html#SudokuSpice_RuleBased_PuzzleGenerator__ctor_SudokuSpice_RuleBased_PuzzleSolver_
  commentId: M:SudokuSpice.RuleBased.PuzzleGenerator.#ctor(SudokuSpice.RuleBased.PuzzleSolver)
  fullName: SudokuSpice.RuleBased.PuzzleGenerator.PuzzleGenerator(SudokuSpice.RuleBased.PuzzleSolver)
  nameWithType: PuzzleGenerator.PuzzleGenerator(PuzzleSolver)
- uid: SudokuSpice.RuleBased.PuzzleGenerator.#ctor*
  name: PuzzleGenerator
  href: api/SudokuSpice.RuleBased.PuzzleGenerator.html#SudokuSpice_RuleBased_PuzzleGenerator__ctor_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleGenerator.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleGenerator.PuzzleGenerator
  nameWithType: PuzzleGenerator.PuzzleGenerator
- uid: SudokuSpice.RuleBased.PuzzleGenerator.Generate(System.Int32,System.Int32,System.TimeSpan)
  name: Generate(Int32, Int32, TimeSpan)
  href: api/SudokuSpice.RuleBased.PuzzleGenerator.html#SudokuSpice_RuleBased_PuzzleGenerator_Generate_System_Int32_System_Int32_System_TimeSpan_
  commentId: M:SudokuSpice.RuleBased.PuzzleGenerator.Generate(System.Int32,System.Int32,System.TimeSpan)
  fullName: SudokuSpice.RuleBased.PuzzleGenerator.Generate(System.Int32, System.Int32, System.TimeSpan)
  nameWithType: PuzzleGenerator.Generate(Int32, Int32, TimeSpan)
- uid: SudokuSpice.RuleBased.PuzzleGenerator.Generate*
  name: Generate
  href: api/SudokuSpice.RuleBased.PuzzleGenerator.html#SudokuSpice_RuleBased_PuzzleGenerator_Generate_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleGenerator.Generate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleGenerator.Generate
  nameWithType: PuzzleGenerator.Generate
- uid: SudokuSpice.RuleBased.PuzzleSolver
  name: PuzzleSolver
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html
  commentId: T:SudokuSpice.RuleBased.PuzzleSolver
  fullName: SudokuSpice.RuleBased.PuzzleSolver
  nameWithType: PuzzleSolver
- uid: SudokuSpice.RuleBased.PuzzleSolver.#ctor(SudokuSpice.RuleBased.ISudokuRuleKeeper,SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)
  name: PuzzleSolver(ISudokuRuleKeeper, ISudokuHeuristic)
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver__ctor_SudokuSpice_RuleBased_ISudokuRuleKeeper_SudokuSpice_RuleBased_Heuristics_ISudokuHeuristic_
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.#ctor(SudokuSpice.RuleBased.ISudokuRuleKeeper,SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)
  fullName: SudokuSpice.RuleBased.PuzzleSolver.PuzzleSolver(SudokuSpice.RuleBased.ISudokuRuleKeeper, SudokuSpice.RuleBased.Heuristics.ISudokuHeuristic)
  nameWithType: PuzzleSolver.PuzzleSolver(ISudokuRuleKeeper, ISudokuHeuristic)
- uid: SudokuSpice.RuleBased.PuzzleSolver.#ctor*
  name: PuzzleSolver
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver__ctor_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleSolver.PuzzleSolver
  nameWithType: PuzzleSolver.PuzzleSolver
- uid: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(System.Nullable{System.Int32}[0:,0:])
  name: GetStatsForAllSolutions(Nullable<Int32>[,])
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver_GetStatsForAllSolutions_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(System.Nullable{System.Int32}[0:,0:])
  name.vb: GetStatsForAllSolutions(Nullable(Of Int32)(,))
  fullName: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions(System.Nullable(Of System.Int32)(,))
  nameWithType: PuzzleSolver.GetStatsForAllSolutions(Nullable<Int32>[,])
  nameWithType.vb: PuzzleSolver.GetStatsForAllSolutions(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions*
  name: GetStatsForAllSolutions
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver_GetStatsForAllSolutions_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleSolver.GetStatsForAllSolutions
  nameWithType: PuzzleSolver.GetStatsForAllSolutions
- uid: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(System.Nullable{System.Int32}[0:,0:])
  name: HasUniqueSolution(Nullable<Int32>[,])
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver_HasUniqueSolution_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(System.Nullable{System.Int32}[0:,0:])
  name.vb: HasUniqueSolution(Nullable(Of Int32)(,))
  fullName: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution(System.Nullable(Of System.Int32)(,))
  nameWithType: PuzzleSolver.HasUniqueSolution(Nullable<Int32>[,])
  nameWithType.vb: PuzzleSolver.HasUniqueSolution(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution*
  name: HasUniqueSolution
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver_HasUniqueSolution_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleSolver.HasUniqueSolution
  nameWithType: PuzzleSolver.HasUniqueSolution
- uid: SudokuSpice.RuleBased.PuzzleSolver.Solve(System.Nullable{System.Int32}[0:,0:])
  name: Solve(Nullable<Int32>[,])
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver_Solve_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.Solve(System.Nullable{System.Int32}[0:,0:])
  name.vb: Solve(Nullable(Of Int32)(,))
  fullName: SudokuSpice.RuleBased.PuzzleSolver.Solve(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.Solve(System.Nullable(Of System.Int32)(,))
  nameWithType: PuzzleSolver.Solve(Nullable<Int32>[,])
  nameWithType.vb: PuzzleSolver.Solve(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleSolver.Solve*
  name: Solve
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver_Solve_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.Solve
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleSolver.Solve
  nameWithType: PuzzleSolver.Solve
- uid: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly(System.Nullable{System.Int32}[0:,0:])
  name: SolveRandomly(Nullable<Int32>[,])
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver_SolveRandomly_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly(System.Nullable{System.Int32}[0:,0:])
  name.vb: SolveRandomly(Nullable(Of Int32)(,))
  fullName: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly(System.Nullable(Of System.Int32)(,))
  nameWithType: PuzzleSolver.SolveRandomly(Nullable<Int32>[,])
  nameWithType.vb: PuzzleSolver.SolveRandomly(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly*
  name: SolveRandomly
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver_SolveRandomly_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleSolver.SolveRandomly
  nameWithType: PuzzleSolver.SolveRandomly
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolve(System.Nullable{System.Int32}[0:,0:])
  name: TrySolve(Nullable<Int32>[,])
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver_TrySolve_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.TrySolve(System.Nullable{System.Int32}[0:,0:])
  name.vb: TrySolve(Nullable(Of Int32)(,))
  fullName: SudokuSpice.RuleBased.PuzzleSolver.TrySolve(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.TrySolve(System.Nullable(Of System.Int32)(,))
  nameWithType: PuzzleSolver.TrySolve(Nullable<Int32>[,])
  nameWithType.vb: PuzzleSolver.TrySolve(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolve*
  name: TrySolve
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver_TrySolve_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.TrySolve
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleSolver.TrySolve
  nameWithType: PuzzleSolver.TrySolve
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(System.Nullable{System.Int32}[0:,0:])
  name: TrySolveRandomly(Nullable<Int32>[,])
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver_TrySolveRandomly_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(System.Nullable{System.Int32}[0:,0:])
  name.vb: TrySolveRandomly(Nullable(Of Int32)(,))
  fullName: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly(System.Nullable(Of System.Int32)(,))
  nameWithType: PuzzleSolver.TrySolveRandomly(Nullable<Int32>[,])
  nameWithType.vb: PuzzleSolver.TrySolveRandomly(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly*
  name: TrySolveRandomly
  href: api/SudokuSpice.RuleBased.PuzzleSolver.html#SudokuSpice_RuleBased_PuzzleSolver_TrySolveRandomly_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleSolver.TrySolveRandomly
  nameWithType: PuzzleSolver.TrySolveRandomly
- uid: SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  href: api/SudokuSpice.RuleBased.Rules.html
  commentId: N:SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule
  name: BoxUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.BoxUniquenessRule
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule
  nameWithType: BoxUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.#ctor
  name: BoxUniquenessRule()
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule__ctor
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.#ctor
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.BoxUniquenessRule()
  nameWithType: BoxUniquenessRule.BoxUniquenessRule()
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.#ctor*
  name: BoxUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.BoxUniquenessRule
  nameWithType: BoxUniquenessRule.BoxUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_CopyWithNewReference_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: BoxUniquenessRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.CopyWithNewReference
  nameWithType: BoxUniquenessRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name: GetDimension(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_GetDimension_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name.vb: GetDimension(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension(ByRef SudokuSpice.Coordinate)
  nameWithType: BoxUniquenessRule.GetDimension(Coordinate)
  nameWithType.vb: BoxUniquenessRule.GetDimension(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension*
  name: GetDimension
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_GetDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension
  nameWithType: BoxUniquenessRule.GetDimension
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetMissingValuesForBox(System.Int32)
  name: GetMissingValuesForBox(Int32)
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_GetMissingValuesForBox_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetMissingValuesForBox(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetMissingValuesForBox(System.Int32)
  nameWithType: BoxUniquenessRule.GetMissingValuesForBox(Int32)
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetMissingValuesForBox*
  name: GetMissingValuesForBox
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_GetMissingValuesForBox_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetMissingValuesForBox
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetMissingValuesForBox
  nameWithType: BoxUniquenessRule.GetMissingValuesForBox
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetNumDimensions(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_GetNumDimensions_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: BoxUniquenessRule.GetNumDimensions(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetNumDimensions*
  name: GetNumDimensions
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_GetNumDimensions_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetNumDimensions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetNumDimensions
  nameWithType: BoxUniquenessRule.GetNumDimensions
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name: TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_TrackUnsetCoordinatesOnSameDimension_System_Int32_SudokuSpice_Coordinate__SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name.vb: TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, ByRef SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  nameWithType: BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  nameWithType.vb: BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension*
  name: TrackUnsetCoordinatesOnSameDimension
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_TrackUnsetCoordinatesOnSameDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension
  nameWithType: BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: TryInit(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: BoxUniquenessRule.TryInit(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TryInit
  nameWithType: BoxUniquenessRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  name: ColumnUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  nameWithType: ColumnUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor
  name: ColumnUniquenessRule()
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule__ctor
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.ColumnUniquenessRule()
  nameWithType: ColumnUniquenessRule.ColumnUniquenessRule()
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor*
  name: ColumnUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.ColumnUniquenessRule
  nameWithType: ColumnUniquenessRule.ColumnUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_CopyWithNewReference_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: ColumnUniquenessRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference
  nameWithType: ColumnUniquenessRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name: GetDimension(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_GetDimension_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name.vb: GetDimension(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension(ByRef SudokuSpice.Coordinate)
  nameWithType: ColumnUniquenessRule.GetDimension(Coordinate)
  nameWithType.vb: ColumnUniquenessRule.GetDimension(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension*
  name: GetDimension
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_GetDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension
  nameWithType: ColumnUniquenessRule.GetDimension
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn(System.Int32)
  name: GetMissingValuesForColumn(Int32)
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_GetMissingValuesForColumn_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn(System.Int32)
  nameWithType: ColumnUniquenessRule.GetMissingValuesForColumn(Int32)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn*
  name: GetMissingValuesForColumn
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_GetMissingValuesForColumn_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn
  nameWithType: ColumnUniquenessRule.GetMissingValuesForColumn
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetNumDimensions(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_GetNumDimensions_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: ColumnUniquenessRule.GetNumDimensions(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetNumDimensions*
  name: GetNumDimensions
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_GetNumDimensions_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetNumDimensions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetNumDimensions
  nameWithType: ColumnUniquenessRule.GetNumDimensions
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name: TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_TrackUnsetCoordinatesOnSameDimension_System_Int32_SudokuSpice_Coordinate__SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name.vb: TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, ByRef SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  nameWithType: ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  nameWithType.vb: ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension*
  name: TrackUnsetCoordinatesOnSameDimension
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_TrackUnsetCoordinatesOnSameDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension
  nameWithType: ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: TryInit(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: ColumnUniquenessRule.TryInit(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TryInit
  nameWithType: ColumnUniquenessRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule
  name: DiagonalUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule
  nameWithType: DiagonalUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.#ctor
  name: DiagonalUniquenessRule()
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule__ctor
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.#ctor
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.DiagonalUniquenessRule()
  nameWithType: DiagonalUniquenessRule.DiagonalUniquenessRule()
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.#ctor*
  name: DiagonalUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.DiagonalUniquenessRule
  nameWithType: DiagonalUniquenessRule.DiagonalUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_CopyWithNewReference_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: DiagonalUniquenessRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.CopyWithNewReference
  nameWithType: DiagonalUniquenessRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: DiagonalUniquenessRule.GetPossibleValues(Coordinate)
  nameWithType.vb: DiagonalUniquenessRule.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues
  nameWithType: DiagonalUniquenessRule.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name: Revert(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_Revert_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: DiagonalUniquenessRule.Revert(Coordinate, Int32)
  nameWithType.vb: DiagonalUniquenessRule.Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Revert(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_Revert_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: DiagonalUniquenessRule.Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: DiagonalUniquenessRule.Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert*
  name: Revert
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_Revert_
  commentId: Overload:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert
  nameWithType: DiagonalUniquenessRule.Revert
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: TryInit(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: DiagonalUniquenessRule.TryInit(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.TryInit
  nameWithType: DiagonalUniquenessRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Update(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_Update_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: DiagonalUniquenessRule.Update(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: DiagonalUniquenessRule.Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update*
  name: Update
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_Update_
  commentId: Overload:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update
  nameWithType: DiagonalUniquenessRule.Update
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  name: IMissingBoxValuesTracker
  href: api/SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.html
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  nameWithType: IMissingBoxValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  name: GetMissingValuesForBox(Int32)
  href: api/SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.html#SudokuSpice_RuleBased_Rules_IMissingBoxValuesTracker_GetMissingValuesForBox_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox(Int32)
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox*
  name: GetMissingValuesForBox
  href: api/SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.html#SudokuSpice_RuleBased_Rules_IMissingBoxValuesTracker_GetMissingValuesForBox_
  commentId: Overload:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox
  nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  name: IMissingColumnValuesTracker
  href: api/SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.html
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  nameWithType: IMissingColumnValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  name: GetMissingValuesForColumn(Int32)
  href: api/SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.html#SudokuSpice_RuleBased_Rules_IMissingColumnValuesTracker_GetMissingValuesForColumn_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn(Int32)
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn*
  name: GetMissingValuesForColumn
  href: api/SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.html#SudokuSpice_RuleBased_Rules_IMissingColumnValuesTracker_GetMissingValuesForColumn_
  commentId: Overload:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn
  nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  name: IMissingRowValuesTracker
  href: api/SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.html
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  nameWithType: IMissingRowValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  name: GetMissingValuesForRow(Int32)
  href: api/SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.html#SudokuSpice_RuleBased_Rules_IMissingRowValuesTracker_GetMissingValuesForRow_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow(Int32)
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow*
  name: GetMissingValuesForRow
  href: api/SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.html#SudokuSpice_RuleBased_Rules_IMissingRowValuesTracker_GetMissingValuesForRow_
  commentId: Overload:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow
  nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule
  name: ISudokuRule
  href: api/SudokuSpice.RuleBased.Rules.ISudokuRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.ISudokuRule
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule
  nameWithType: ISudokuRule
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.ISudokuRule.html#SudokuSpice_RuleBased_Rules_ISudokuRule_CopyWithNewReference_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: ISudokuRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.ISudokuRule.html#SudokuSpice_RuleBased_Rules_ISudokuRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.CopyWithNewReference
  nameWithType: ISudokuRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.ISudokuRule.html#SudokuSpice_RuleBased_Rules_ISudokuRule_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: ISudokuRule.GetPossibleValues(Coordinate)
  nameWithType.vb: ISudokuRule.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.Rules.ISudokuRule.html#SudokuSpice_RuleBased_Rules_ISudokuRule_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.GetPossibleValues
  nameWithType: ISudokuRule.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name: Revert(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.Rules.ISudokuRule.html#SudokuSpice_RuleBased_Rules_ISudokuRule_Revert_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32)
  nameWithType.vb: ISudokuRule.Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Revert(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.ISudokuRule.html#SudokuSpice_RuleBased_Rules_ISudokuRule_Revert_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: ISudokuRule.Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: ISudokuRule.Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert*
  name: Revert
  href: api/SudokuSpice.RuleBased.Rules.ISudokuRule.html#SudokuSpice_RuleBased_Rules_ISudokuRule_Revert_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Revert
  nameWithType: ISudokuRule.Revert
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: TryInit(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.ISudokuRule.html#SudokuSpice_RuleBased_Rules_ISudokuRule_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: ISudokuRule.TryInit(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.ISudokuRule.html#SudokuSpice_RuleBased_Rules_ISudokuRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.TryInit
  nameWithType: ISudokuRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Update(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.ISudokuRule.html#SudokuSpice_RuleBased_Rules_ISudokuRule_Update_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.ISudokuRule.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: ISudokuRule.Update(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: ISudokuRule.Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.ISudokuRule.Update*
  name: Update
  href: api/SudokuSpice.RuleBased.Rules.ISudokuRule.html#SudokuSpice_RuleBased_Rules_ISudokuRule_Update_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ISudokuRule.Update
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ISudokuRule.Update
  nameWithType: ISudokuRule.Update
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule
  name: RowUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.RowUniquenessRule
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule
  nameWithType: RowUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.#ctor
  name: RowUniquenessRule()
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule__ctor
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.#ctor
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.RowUniquenessRule()
  nameWithType: RowUniquenessRule.RowUniquenessRule()
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.#ctor*
  name: RowUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.RowUniquenessRule
  nameWithType: RowUniquenessRule.RowUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_CopyWithNewReference_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: RowUniquenessRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.CopyWithNewReference
  nameWithType: RowUniquenessRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name: GetDimension(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_GetDimension_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name.vb: GetDimension(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension(ByRef SudokuSpice.Coordinate)
  nameWithType: RowUniquenessRule.GetDimension(Coordinate)
  nameWithType.vb: RowUniquenessRule.GetDimension(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension*
  name: GetDimension
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_GetDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension
  nameWithType: RowUniquenessRule.GetDimension
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetMissingValuesForRow(System.Int32)
  name: GetMissingValuesForRow(Int32)
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_GetMissingValuesForRow_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetMissingValuesForRow(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetMissingValuesForRow(System.Int32)
  nameWithType: RowUniquenessRule.GetMissingValuesForRow(Int32)
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetMissingValuesForRow*
  name: GetMissingValuesForRow
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_GetMissingValuesForRow_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetMissingValuesForRow
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetMissingValuesForRow
  nameWithType: RowUniquenessRule.GetMissingValuesForRow
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetNumDimensions(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_GetNumDimensions_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: RowUniquenessRule.GetNumDimensions(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetNumDimensions*
  name: GetNumDimensions
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_GetNumDimensions_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetNumDimensions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetNumDimensions
  nameWithType: RowUniquenessRule.GetNumDimensions
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name: TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_TrackUnsetCoordinatesOnSameDimension_System_Int32_SudokuSpice_Coordinate__SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name.vb: TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, ByRef SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  nameWithType: RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  nameWithType.vb: RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension*
  name: TrackUnsetCoordinatesOnSameDimension
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_TrackUnsetCoordinatesOnSameDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension
  nameWithType: RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: TryInit(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: RowUniquenessRule.TryInit(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TryInit
  nameWithType: RowUniquenessRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.StandardRules
  name: StandardRules
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html
  commentId: T:SudokuSpice.RuleBased.Rules.StandardRules
  fullName: SudokuSpice.RuleBased.Rules.StandardRules
  nameWithType: StandardRules
- uid: SudokuSpice.RuleBased.Rules.StandardRules.#ctor
  name: StandardRules()
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules__ctor
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.#ctor
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.StandardRules()
  nameWithType: StandardRules.StandardRules()
- uid: SudokuSpice.RuleBased.Rules.StandardRules.#ctor*
  name: StandardRules
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.StandardRules
  nameWithType: StandardRules.StandardRules
- uid: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_CopyWithNewReference_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: StandardRules.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference
  nameWithType: StandardRules.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox(System.Int32)
  name: GetMissingValuesForBox(Int32)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetMissingValuesForBox_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox(System.Int32)
  nameWithType: StandardRules.GetMissingValuesForBox(Int32)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox*
  name: GetMissingValuesForBox
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetMissingValuesForBox_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox
  nameWithType: StandardRules.GetMissingValuesForBox
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn(System.Int32)
  name: GetMissingValuesForColumn(Int32)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetMissingValuesForColumn_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn(System.Int32)
  nameWithType: StandardRules.GetMissingValuesForColumn(Int32)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn*
  name: GetMissingValuesForColumn
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetMissingValuesForColumn_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn
  nameWithType: StandardRules.GetMissingValuesForColumn
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow(System.Int32)
  name: GetMissingValuesForRow(Int32)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetMissingValuesForRow_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow(System.Int32)
  nameWithType: StandardRules.GetMissingValuesForRow(Int32)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow*
  name: GetMissingValuesForRow
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetMissingValuesForRow_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow
  nameWithType: StandardRules.GetMissingValuesForRow
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: StandardRules.GetPossibleValues(Coordinate)
  nameWithType.vb: StandardRules.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues
  nameWithType: StandardRules.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32)
  name: Revert(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_Revert_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.Rules.StandardRules.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: StandardRules.Revert(Coordinate, Int32)
  nameWithType.vb: StandardRules.Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Revert(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_Revert_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.StandardRules.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: StandardRules.Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: StandardRules.Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Revert*
  name: Revert
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_Revert_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.Revert
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Revert
  nameWithType: StandardRules.Revert
- uid: SudokuSpice.RuleBased.Rules.StandardRules.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: TryInit(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: StandardRules.TryInit(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.TryInit
  nameWithType: StandardRules.TryInit
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Update(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_Update_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.StandardRules.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: StandardRules.Update(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: StandardRules.Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Update*
  name: Update
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_Update_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.Update
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Update
  nameWithType: StandardRules.Update
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule
  name: UniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.UniquenessRule
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule
  nameWithType: UniquenessRule
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.#ctor
  name: UniquenessRule()
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule__ctor
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.#ctor
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.UniquenessRule()
  nameWithType: UniquenessRule.UniquenessRule()
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.#ctor(SudokuSpice.RuleBased.Rules.UniquenessRule)
  name: UniquenessRule(UniquenessRule)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule__ctor_SudokuSpice_RuleBased_Rules_UniquenessRule_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.#ctor(SudokuSpice.RuleBased.Rules.UniquenessRule)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.UniquenessRule(SudokuSpice.RuleBased.Rules.UniquenessRule)
  nameWithType: UniquenessRule.UniquenessRule(UniquenessRule)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.#ctor*
  name: UniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.UniquenessRule
  nameWithType: UniquenessRule.UniquenessRule
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_CopyWithNewReference_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniquenessRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.CopyWithNewReference
  nameWithType: UniquenessRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name: GetDimension(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetDimension_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name.vb: GetDimension(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension(ByRef SudokuSpice.Coordinate)
  nameWithType: UniquenessRule.GetDimension(Coordinate)
  nameWithType.vb: UniquenessRule.GetDimension(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension*
  name: GetDimension
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension
  nameWithType: UniquenessRule.GetDimension
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: GetNumDimensions(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetNumDimensions_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetNumDimensions(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniquenessRule.GetNumDimensions(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetNumDimensions*
  name: GetNumDimensions
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetNumDimensions_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.GetNumDimensions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetNumDimensions
  nameWithType: UniquenessRule.GetNumDimensions
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: UniquenessRule.GetPossibleValues(Coordinate)
  nameWithType.vb: UniquenessRule.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(System.Int32)
  name: GetPossibleValues(Int32)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetPossibleValues_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(System.Int32)
  nameWithType: UniquenessRule.GetPossibleValues(Int32)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues
  nameWithType: UniquenessRule.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name: Revert(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_Revert_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: UniquenessRule.Revert(Coordinate, Int32)
  nameWithType.vb: UniquenessRule.Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Revert(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_Revert_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: UniquenessRule.Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: UniquenessRule.Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert*
  name: Revert
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_Revert_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.Revert
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert
  nameWithType: UniquenessRule.Revert
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name: TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_TrackUnsetCoordinatesOnSameDimension_System_Int32_SudokuSpice_Coordinate__SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name.vb: TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, ByRef SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  nameWithType: UniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  nameWithType.vb: UniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension*
  name: TrackUnsetCoordinatesOnSameDimension
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_TrackUnsetCoordinatesOnSameDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension
  nameWithType: UniquenessRule.TrackUnsetCoordinatesOnSameDimension
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: TryInit(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: UniquenessRule.TryInit(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.TryInit
  nameWithType: UniquenessRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Update(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_Update_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.UniquenessRule.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: UniquenessRule.Update(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: UniquenessRule.Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.Update*
  name: Update
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_Update_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.Update
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.Update
  nameWithType: UniquenessRule.Update
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator
  name: StandardPuzzleGenerator
  href: api/SudokuSpice.RuleBased.StandardPuzzleGenerator.html
  commentId: T:SudokuSpice.RuleBased.StandardPuzzleGenerator
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator
  nameWithType: StandardPuzzleGenerator
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor
  name: StandardPuzzleGenerator()
  href: api/SudokuSpice.RuleBased.StandardPuzzleGenerator.html#SudokuSpice_RuleBased_StandardPuzzleGenerator__ctor
  commentId: M:SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator.StandardPuzzleGenerator()
  nameWithType: StandardPuzzleGenerator.StandardPuzzleGenerator()
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor*
  name: StandardPuzzleGenerator
  href: api/SudokuSpice.RuleBased.StandardPuzzleGenerator.html#SudokuSpice_RuleBased_StandardPuzzleGenerator__ctor_
  commentId: Overload:SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator.StandardPuzzleGenerator
  nameWithType: StandardPuzzleGenerator.StandardPuzzleGenerator
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate(System.Int32,System.Int32,System.TimeSpan)
  name: Generate(Int32, Int32, TimeSpan)
  href: api/SudokuSpice.RuleBased.StandardPuzzleGenerator.html#SudokuSpice_RuleBased_StandardPuzzleGenerator_Generate_System_Int32_System_Int32_System_TimeSpan_
  commentId: M:SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate(System.Int32,System.Int32,System.TimeSpan)
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate(System.Int32, System.Int32, System.TimeSpan)
  nameWithType: StandardPuzzleGenerator.Generate(Int32, Int32, TimeSpan)
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate*
  name: Generate
  href: api/SudokuSpice.RuleBased.StandardPuzzleGenerator.html#SudokuSpice_RuleBased_StandardPuzzleGenerator_Generate_
  commentId: Overload:SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate
  nameWithType: StandardPuzzleGenerator.Generate
- uid: SudokuSpice.RuleBased.StandardPuzzles
  name: StandardPuzzles
  href: api/SudokuSpice.RuleBased.StandardPuzzles.html
  commentId: T:SudokuSpice.RuleBased.StandardPuzzles
  fullName: SudokuSpice.RuleBased.StandardPuzzles
  nameWithType: StandardPuzzles
- uid: SudokuSpice.RuleBased.StandardPuzzles.CreateSolver
  name: CreateSolver()
  href: api/SudokuSpice.RuleBased.StandardPuzzles.html#SudokuSpice_RuleBased_StandardPuzzles_CreateSolver
  commentId: M:SudokuSpice.RuleBased.StandardPuzzles.CreateSolver
  fullName: SudokuSpice.RuleBased.StandardPuzzles.CreateSolver()
  nameWithType: StandardPuzzles.CreateSolver()
- uid: SudokuSpice.RuleBased.StandardPuzzles.CreateSolver*
  name: CreateSolver
  href: api/SudokuSpice.RuleBased.StandardPuzzles.html#SudokuSpice_RuleBased_StandardPuzzles_CreateSolver_
  commentId: Overload:SudokuSpice.RuleBased.StandardPuzzles.CreateSolver
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardPuzzles.CreateSolver
  nameWithType: StandardPuzzles.CreateSolver
- uid: SudokuSpice.RuleBased.StandardRuleKeeper
  name: StandardRuleKeeper
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html
  commentId: T:SudokuSpice.RuleBased.StandardRuleKeeper
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper
  nameWithType: StandardRuleKeeper
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.#ctor
  name: StandardRuleKeeper()
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper__ctor
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.#ctor
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.StandardRuleKeeper()
  nameWithType: StandardRuleKeeper.StandardRuleKeeper()
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.#ctor*
  name: StandardRuleKeeper
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper__ctor_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.StandardRuleKeeper
  nameWithType: StandardRuleKeeper.StandardRuleKeeper
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_CopyWithNewReference_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: StandardRuleKeeper.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference
  nameWithType: StandardRuleKeeper.CopyWithNewReference
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: StandardRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences
  nameWithType: StandardRuleKeeper.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  name: GetMissingValuesForBox(Int32)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetMissingValuesForBox_System_Int32_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  nameWithType: StandardRuleKeeper.GetMissingValuesForBox(Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox*
  name: GetMissingValuesForBox
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetMissingValuesForBox_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox
  nameWithType: StandardRuleKeeper.GetMissingValuesForBox
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  name: GetMissingValuesForColumn(Int32)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetMissingValuesForColumn_System_Int32_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  nameWithType: StandardRuleKeeper.GetMissingValuesForColumn(Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn*
  name: GetMissingValuesForColumn
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetMissingValuesForColumn_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn
  nameWithType: StandardRuleKeeper.GetMissingValuesForColumn
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  name: GetMissingValuesForRow(Int32)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetMissingValuesForRow_System_Int32_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  nameWithType: StandardRuleKeeper.GetMissingValuesForRow(Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow*
  name: GetMissingValuesForRow
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetMissingValuesForRow_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow
  nameWithType: StandardRuleKeeper.GetMissingValuesForRow
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: StandardRuleKeeper.GetPossibleValues(Coordinate)
  nameWithType.vb: StandardRuleKeeper.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues
  nameWithType: StandardRuleKeeper.GetPossibleValues
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  name: GetRules()
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetRules
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules()
  nameWithType: StandardRuleKeeper.GetRules()
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules*
  name: GetRules
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetRules_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  nameWithType: StandardRuleKeeper.GetRules
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32)
  name: Revert(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Revert_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: StandardRuleKeeper.Revert(Coordinate, Int32)
  nameWithType.vb: StandardRuleKeeper.Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Revert(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Revert_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: StandardRuleKeeper.Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: StandardRuleKeeper.Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Revert*
  name: Revert
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Revert_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.Revert
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Revert
  nameWithType: StandardRuleKeeper.Revert
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  name: TryInit(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzle)
  nameWithType: StandardRuleKeeper.TryInit(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: StandardRuleKeeper.TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit
  nameWithType: StandardRuleKeeper.TryInit
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  name: TrySet(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_TrySet_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  name.vb: TrySet(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: StandardRuleKeeper.TrySet(Coordinate, Int32)
  nameWithType.vb: StandardRuleKeeper.TrySet(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet*
  name: TrySet
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_TrySet_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.TrySet
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet
  nameWithType: StandardRuleKeeper.TrySet
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  name: Unset(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Unset_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Unset(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Unset(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: StandardRuleKeeper.Unset(Coordinate, Int32)
  nameWithType.vb: StandardRuleKeeper.Unset(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Unset*
  name: Unset
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Unset_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.Unset
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Unset
  nameWithType: StandardRuleKeeper.Unset
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Update(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Update_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: StandardRuleKeeper.Update(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: StandardRuleKeeper.Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Update*
  name: Update
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Update_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.Update
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Update
  nameWithType: StandardRuleKeeper.Update
- uid: SudokuSpice.SolveStats
  name: SolveStats
  href: api/SudokuSpice.SolveStats.html
  commentId: T:SudokuSpice.SolveStats
  fullName: SudokuSpice.SolveStats
  nameWithType: SolveStats
- uid: SudokuSpice.SolveStats.Equals(SudokuSpice.SolveStats)
  name: Equals(SolveStats)
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_Equals_SudokuSpice_SolveStats_
  commentId: M:SudokuSpice.SolveStats.Equals(SudokuSpice.SolveStats)
  fullName: SudokuSpice.SolveStats.Equals(SudokuSpice.SolveStats)
  nameWithType: SolveStats.Equals(SolveStats)
- uid: SudokuSpice.SolveStats.Equals(System.Object)
  name: Equals(Object)
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_Equals_System_Object_
  commentId: M:SudokuSpice.SolveStats.Equals(System.Object)
  fullName: SudokuSpice.SolveStats.Equals(System.Object)
  nameWithType: SolveStats.Equals(Object)
- uid: SudokuSpice.SolveStats.Equals*
  name: Equals
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_Equals_
  commentId: Overload:SudokuSpice.SolveStats.Equals
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.Equals
  nameWithType: SolveStats.Equals
- uid: SudokuSpice.SolveStats.GetHashCode
  name: GetHashCode()
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_GetHashCode
  commentId: M:SudokuSpice.SolveStats.GetHashCode
  fullName: SudokuSpice.SolveStats.GetHashCode()
  nameWithType: SolveStats.GetHashCode()
- uid: SudokuSpice.SolveStats.GetHashCode*
  name: GetHashCode
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_GetHashCode_
  commentId: Overload:SudokuSpice.SolveStats.GetHashCode
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.GetHashCode
  nameWithType: SolveStats.GetHashCode
- uid: SudokuSpice.SolveStats.NumSolutionsFound
  name: NumSolutionsFound
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_NumSolutionsFound
  commentId: P:SudokuSpice.SolveStats.NumSolutionsFound
  fullName: SudokuSpice.SolveStats.NumSolutionsFound
  nameWithType: SolveStats.NumSolutionsFound
- uid: SudokuSpice.SolveStats.NumSolutionsFound*
  name: NumSolutionsFound
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_NumSolutionsFound_
  commentId: Overload:SudokuSpice.SolveStats.NumSolutionsFound
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.NumSolutionsFound
  nameWithType: SolveStats.NumSolutionsFound
- uid: SudokuSpice.SolveStats.NumSquaresGuessed
  name: NumSquaresGuessed
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_NumSquaresGuessed
  commentId: P:SudokuSpice.SolveStats.NumSquaresGuessed
  fullName: SudokuSpice.SolveStats.NumSquaresGuessed
  nameWithType: SolveStats.NumSquaresGuessed
- uid: SudokuSpice.SolveStats.NumSquaresGuessed*
  name: NumSquaresGuessed
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_NumSquaresGuessed_
  commentId: Overload:SudokuSpice.SolveStats.NumSquaresGuessed
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.NumSquaresGuessed
  nameWithType: SolveStats.NumSquaresGuessed
- uid: SudokuSpice.SolveStats.NumTotalGuesses
  name: NumTotalGuesses
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_NumTotalGuesses
  commentId: P:SudokuSpice.SolveStats.NumTotalGuesses
  fullName: SudokuSpice.SolveStats.NumTotalGuesses
  nameWithType: SolveStats.NumTotalGuesses
- uid: SudokuSpice.SolveStats.NumTotalGuesses*
  name: NumTotalGuesses
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_NumTotalGuesses_
  commentId: Overload:SudokuSpice.SolveStats.NumTotalGuesses
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.NumTotalGuesses
  nameWithType: SolveStats.NumTotalGuesses
- uid: SudokuSpice.SolveStats.op_Equality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  name: Equality(SolveStats, SolveStats)
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_op_Equality_SudokuSpice_SolveStats_SudokuSpice_SolveStats_
  commentId: M:SudokuSpice.SolveStats.op_Equality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  fullName: SudokuSpice.SolveStats.Equality(SudokuSpice.SolveStats, SudokuSpice.SolveStats)
  nameWithType: SolveStats.Equality(SolveStats, SolveStats)
- uid: SudokuSpice.SolveStats.op_Equality*
  name: Equality
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_op_Equality_
  commentId: Overload:SudokuSpice.SolveStats.op_Equality
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.Equality
  nameWithType: SolveStats.Equality
- uid: SudokuSpice.SolveStats.op_Inequality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  name: Inequality(SolveStats, SolveStats)
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_op_Inequality_SudokuSpice_SolveStats_SudokuSpice_SolveStats_
  commentId: M:SudokuSpice.SolveStats.op_Inequality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  fullName: SudokuSpice.SolveStats.Inequality(SudokuSpice.SolveStats, SudokuSpice.SolveStats)
  nameWithType: SolveStats.Inequality(SolveStats, SolveStats)
- uid: SudokuSpice.SolveStats.op_Inequality*
  name: Inequality
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_op_Inequality_
  commentId: Overload:SudokuSpice.SolveStats.op_Inequality
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.Inequality
  nameWithType: SolveStats.Inequality
- uid: SudokuSpice.SolveStats.ToString
  name: ToString()
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_ToString
  commentId: M:SudokuSpice.SolveStats.ToString
  fullName: SudokuSpice.SolveStats.ToString()
  nameWithType: SolveStats.ToString()
- uid: SudokuSpice.SolveStats.ToString*
  name: ToString
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_ToString_
  commentId: Overload:SudokuSpice.SolveStats.ToString
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.ToString
  nameWithType: SolveStats.ToString
