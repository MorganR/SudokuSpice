### YamlMime:XRefMap
sorted: true
references:
- uid: SudokuSpice
  name: SudokuSpice
  href: api/SudokuSpice.html
  commentId: N:SudokuSpice
  fullName: SudokuSpice
  nameWithType: SudokuSpice
- uid: SudokuSpice.BitVector
  name: BitVector
  href: api/SudokuSpice.BitVector.html
  commentId: T:SudokuSpice.BitVector
  fullName: SudokuSpice.BitVector
  nameWithType: BitVector
- uid: SudokuSpice.BitVector.#ctor(System.UInt32)
  name: BitVector(UInt32)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector__ctor_System_UInt32_
  commentId: M:SudokuSpice.BitVector.#ctor(System.UInt32)
  fullName: SudokuSpice.BitVector.BitVector(System.UInt32)
  nameWithType: BitVector.BitVector(UInt32)
- uid: SudokuSpice.BitVector.#ctor*
  name: BitVector
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector__ctor_
  commentId: Overload:SudokuSpice.BitVector.#ctor
  isSpec: "True"
  fullName: SudokuSpice.BitVector.BitVector
  nameWithType: BitVector.BitVector
- uid: SudokuSpice.BitVector.ComputeCount
  name: ComputeCount()
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_ComputeCount
  commentId: M:SudokuSpice.BitVector.ComputeCount
  fullName: SudokuSpice.BitVector.ComputeCount()
  nameWithType: BitVector.ComputeCount()
- uid: SudokuSpice.BitVector.ComputeCount*
  name: ComputeCount
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_ComputeCount_
  commentId: Overload:SudokuSpice.BitVector.ComputeCount
  isSpec: "True"
  fullName: SudokuSpice.BitVector.ComputeCount
  nameWithType: BitVector.ComputeCount
- uid: SudokuSpice.BitVector.CreateWithSize(System.Int32)
  name: CreateWithSize(Int32)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_CreateWithSize_System_Int32_
  commentId: M:SudokuSpice.BitVector.CreateWithSize(System.Int32)
  fullName: SudokuSpice.BitVector.CreateWithSize(System.Int32)
  nameWithType: BitVector.CreateWithSize(Int32)
- uid: SudokuSpice.BitVector.CreateWithSize*
  name: CreateWithSize
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_CreateWithSize_
  commentId: Overload:SudokuSpice.BitVector.CreateWithSize
  isSpec: "True"
  fullName: SudokuSpice.BitVector.CreateWithSize
  nameWithType: BitVector.CreateWithSize
- uid: SudokuSpice.BitVector.Data
  name: Data
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_Data
  commentId: P:SudokuSpice.BitVector.Data
  fullName: SudokuSpice.BitVector.Data
  nameWithType: BitVector.Data
- uid: SudokuSpice.BitVector.Data*
  name: Data
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_Data_
  commentId: Overload:SudokuSpice.BitVector.Data
  isSpec: "True"
  fullName: SudokuSpice.BitVector.Data
  nameWithType: BitVector.Data
- uid: SudokuSpice.BitVector.Equals(SudokuSpice.BitVector)
  name: Equals(BitVector)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_Equals_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.BitVector.Equals(SudokuSpice.BitVector)
  fullName: SudokuSpice.BitVector.Equals(SudokuSpice.BitVector)
  nameWithType: BitVector.Equals(BitVector)
- uid: SudokuSpice.BitVector.Equals(System.Nullable{System.Object})
  name: Equals(Nullable<Object>)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_Equals_System_Nullable_System_Object__
  commentId: M:SudokuSpice.BitVector.Equals(System.Nullable{System.Object})
  name.vb: Equals(Nullable(Of Object))
  fullName: SudokuSpice.BitVector.Equals(System.Nullable<System.Object>)
  fullName.vb: SudokuSpice.BitVector.Equals(System.Nullable(Of System.Object))
  nameWithType: BitVector.Equals(Nullable<Object>)
  nameWithType.vb: BitVector.Equals(Nullable(Of Object))
- uid: SudokuSpice.BitVector.Equals*
  name: Equals
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_Equals_
  commentId: Overload:SudokuSpice.BitVector.Equals
  isSpec: "True"
  fullName: SudokuSpice.BitVector.Equals
  nameWithType: BitVector.Equals
- uid: SudokuSpice.BitVector.FindDifference(SudokuSpice.BitVector,SudokuSpice.BitVector)
  name: FindDifference(BitVector, BitVector)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_FindDifference_SudokuSpice_BitVector_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.BitVector.FindDifference(SudokuSpice.BitVector,SudokuSpice.BitVector)
  fullName: SudokuSpice.BitVector.FindDifference(SudokuSpice.BitVector, SudokuSpice.BitVector)
  nameWithType: BitVector.FindDifference(BitVector, BitVector)
- uid: SudokuSpice.BitVector.FindDifference*
  name: FindDifference
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_FindDifference_
  commentId: Overload:SudokuSpice.BitVector.FindDifference
  isSpec: "True"
  fullName: SudokuSpice.BitVector.FindDifference
  nameWithType: BitVector.FindDifference
- uid: SudokuSpice.BitVector.FindIntersect(SudokuSpice.BitVector,SudokuSpice.BitVector)
  name: FindIntersect(BitVector, BitVector)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_FindIntersect_SudokuSpice_BitVector_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.BitVector.FindIntersect(SudokuSpice.BitVector,SudokuSpice.BitVector)
  fullName: SudokuSpice.BitVector.FindIntersect(SudokuSpice.BitVector, SudokuSpice.BitVector)
  nameWithType: BitVector.FindIntersect(BitVector, BitVector)
- uid: SudokuSpice.BitVector.FindIntersect*
  name: FindIntersect
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_FindIntersect_
  commentId: Overload:SudokuSpice.BitVector.FindIntersect
  isSpec: "True"
  fullName: SudokuSpice.BitVector.FindIntersect
  nameWithType: BitVector.FindIntersect
- uid: SudokuSpice.BitVector.FindUnion(SudokuSpice.BitVector,SudokuSpice.BitVector)
  name: FindUnion(BitVector, BitVector)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_FindUnion_SudokuSpice_BitVector_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.BitVector.FindUnion(SudokuSpice.BitVector,SudokuSpice.BitVector)
  fullName: SudokuSpice.BitVector.FindUnion(SudokuSpice.BitVector, SudokuSpice.BitVector)
  nameWithType: BitVector.FindUnion(BitVector, BitVector)
- uid: SudokuSpice.BitVector.FindUnion*
  name: FindUnion
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_FindUnion_
  commentId: Overload:SudokuSpice.BitVector.FindUnion
  isSpec: "True"
  fullName: SudokuSpice.BitVector.FindUnion
  nameWithType: BitVector.FindUnion
- uid: SudokuSpice.BitVector.GetHashCode
  name: GetHashCode()
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_GetHashCode
  commentId: M:SudokuSpice.BitVector.GetHashCode
  fullName: SudokuSpice.BitVector.GetHashCode()
  nameWithType: BitVector.GetHashCode()
- uid: SudokuSpice.BitVector.GetHashCode*
  name: GetHashCode
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_GetHashCode_
  commentId: Overload:SudokuSpice.BitVector.GetHashCode
  isSpec: "True"
  fullName: SudokuSpice.BitVector.GetHashCode
  nameWithType: BitVector.GetHashCode
- uid: SudokuSpice.BitVector.GetSetBits
  name: GetSetBits()
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_GetSetBits
  commentId: M:SudokuSpice.BitVector.GetSetBits
  fullName: SudokuSpice.BitVector.GetSetBits()
  nameWithType: BitVector.GetSetBits()
- uid: SudokuSpice.BitVector.GetSetBits*
  name: GetSetBits
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_GetSetBits_
  commentId: Overload:SudokuSpice.BitVector.GetSetBits
  isSpec: "True"
  fullName: SudokuSpice.BitVector.GetSetBits
  nameWithType: BitVector.GetSetBits
- uid: SudokuSpice.BitVector.IsBitSet(System.Int32)
  name: IsBitSet(Int32)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_IsBitSet_System_Int32_
  commentId: M:SudokuSpice.BitVector.IsBitSet(System.Int32)
  fullName: SudokuSpice.BitVector.IsBitSet(System.Int32)
  nameWithType: BitVector.IsBitSet(Int32)
- uid: SudokuSpice.BitVector.IsBitSet*
  name: IsBitSet
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_IsBitSet_
  commentId: Overload:SudokuSpice.BitVector.IsBitSet
  isSpec: "True"
  fullName: SudokuSpice.BitVector.IsBitSet
  nameWithType: BitVector.IsBitSet
- uid: SudokuSpice.BitVector.IsEmpty
  name: IsEmpty
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_IsEmpty
  commentId: P:SudokuSpice.BitVector.IsEmpty
  fullName: SudokuSpice.BitVector.IsEmpty
  nameWithType: BitVector.IsEmpty
- uid: SudokuSpice.BitVector.IsEmpty*
  name: IsEmpty
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_IsEmpty_
  commentId: Overload:SudokuSpice.BitVector.IsEmpty
  isSpec: "True"
  fullName: SudokuSpice.BitVector.IsEmpty
  nameWithType: BitVector.IsEmpty
- uid: SudokuSpice.BitVector.IsSubsetOf(SudokuSpice.BitVector)
  name: IsSubsetOf(BitVector)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_IsSubsetOf_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.BitVector.IsSubsetOf(SudokuSpice.BitVector)
  fullName: SudokuSpice.BitVector.IsSubsetOf(SudokuSpice.BitVector)
  nameWithType: BitVector.IsSubsetOf(BitVector)
- uid: SudokuSpice.BitVector.IsSubsetOf*
  name: IsSubsetOf
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_IsSubsetOf_
  commentId: Overload:SudokuSpice.BitVector.IsSubsetOf
  isSpec: "True"
  fullName: SudokuSpice.BitVector.IsSubsetOf
  nameWithType: BitVector.IsSubsetOf
- uid: SudokuSpice.BitVector.op_Equality(SudokuSpice.BitVector,SudokuSpice.BitVector)
  name: Equality(BitVector, BitVector)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_op_Equality_SudokuSpice_BitVector_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.BitVector.op_Equality(SudokuSpice.BitVector,SudokuSpice.BitVector)
  fullName: SudokuSpice.BitVector.Equality(SudokuSpice.BitVector, SudokuSpice.BitVector)
  nameWithType: BitVector.Equality(BitVector, BitVector)
- uid: SudokuSpice.BitVector.op_Equality*
  name: Equality
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_op_Equality_
  commentId: Overload:SudokuSpice.BitVector.op_Equality
  isSpec: "True"
  fullName: SudokuSpice.BitVector.Equality
  nameWithType: BitVector.Equality
- uid: SudokuSpice.BitVector.op_Inequality(SudokuSpice.BitVector,SudokuSpice.BitVector)
  name: Inequality(BitVector, BitVector)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_op_Inequality_SudokuSpice_BitVector_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.BitVector.op_Inequality(SudokuSpice.BitVector,SudokuSpice.BitVector)
  fullName: SudokuSpice.BitVector.Inequality(SudokuSpice.BitVector, SudokuSpice.BitVector)
  nameWithType: BitVector.Inequality(BitVector, BitVector)
- uid: SudokuSpice.BitVector.op_Inequality*
  name: Inequality
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_op_Inequality_
  commentId: Overload:SudokuSpice.BitVector.op_Inequality
  isSpec: "True"
  fullName: SudokuSpice.BitVector.Inequality
  nameWithType: BitVector.Inequality
- uid: SudokuSpice.BitVector.PopulateSetBits(Span{System.Int32})
  name: PopulateSetBits(Span<Int32>)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_PopulateSetBits_Span_System_Int32__
  commentId: M:SudokuSpice.BitVector.PopulateSetBits(Span{System.Int32})
  name.vb: PopulateSetBits(Span(Of Int32))
  fullName: SudokuSpice.BitVector.PopulateSetBits(Span<System.Int32>)
  fullName.vb: SudokuSpice.BitVector.PopulateSetBits(Span(Of System.Int32))
  nameWithType: BitVector.PopulateSetBits(Span<Int32>)
  nameWithType.vb: BitVector.PopulateSetBits(Span(Of Int32))
- uid: SudokuSpice.BitVector.PopulateSetBits*
  name: PopulateSetBits
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_PopulateSetBits_
  commentId: Overload:SudokuSpice.BitVector.PopulateSetBits
  isSpec: "True"
  fullName: SudokuSpice.BitVector.PopulateSetBits
  nameWithType: BitVector.PopulateSetBits
- uid: SudokuSpice.BitVector.SetBit(System.Int32)
  name: SetBit(Int32)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_SetBit_System_Int32_
  commentId: M:SudokuSpice.BitVector.SetBit(System.Int32)
  fullName: SudokuSpice.BitVector.SetBit(System.Int32)
  nameWithType: BitVector.SetBit(Int32)
- uid: SudokuSpice.BitVector.SetBit*
  name: SetBit
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_SetBit_
  commentId: Overload:SudokuSpice.BitVector.SetBit
  isSpec: "True"
  fullName: SudokuSpice.BitVector.SetBit
  nameWithType: BitVector.SetBit
- uid: SudokuSpice.BitVector.ToString
  name: ToString()
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_ToString
  commentId: M:SudokuSpice.BitVector.ToString
  fullName: SudokuSpice.BitVector.ToString()
  nameWithType: BitVector.ToString()
- uid: SudokuSpice.BitVector.ToString*
  name: ToString
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_ToString_
  commentId: Overload:SudokuSpice.BitVector.ToString
  isSpec: "True"
  fullName: SudokuSpice.BitVector.ToString
  nameWithType: BitVector.ToString
- uid: SudokuSpice.BitVector.UnsetBit(System.Int32)
  name: UnsetBit(Int32)
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_UnsetBit_System_Int32_
  commentId: M:SudokuSpice.BitVector.UnsetBit(System.Int32)
  fullName: SudokuSpice.BitVector.UnsetBit(System.Int32)
  nameWithType: BitVector.UnsetBit(Int32)
- uid: SudokuSpice.BitVector.UnsetBit*
  name: UnsetBit
  href: api/SudokuSpice.BitVector.html#SudokuSpice_BitVector_UnsetBit_
  commentId: Overload:SudokuSpice.BitVector.UnsetBit
  isSpec: "True"
  fullName: SudokuSpice.BitVector.UnsetBit
  nameWithType: BitVector.UnsetBit
- uid: SudokuSpice.Box
  name: Box
  href: api/SudokuSpice.Box.html
  commentId: T:SudokuSpice.Box
  fullName: SudokuSpice.Box
  nameWithType: Box
- uid: SudokuSpice.Box.#ctor(SudokuSpice.Coordinate,System.Int32)
  name: Box(Coordinate, Int32)
  href: api/SudokuSpice.Box.html#SudokuSpice_Box__ctor_SudokuSpice_Coordinate_System_Int32_
  commentId: M:SudokuSpice.Box.#ctor(SudokuSpice.Coordinate,System.Int32)
  fullName: SudokuSpice.Box.Box(SudokuSpice.Coordinate, System.Int32)
  nameWithType: Box.Box(Coordinate, Int32)
- uid: SudokuSpice.Box.#ctor*
  name: Box
  href: api/SudokuSpice.Box.html#SudokuSpice_Box__ctor_
  commentId: Overload:SudokuSpice.Box.#ctor
  isSpec: "True"
  fullName: SudokuSpice.Box.Box
  nameWithType: Box.Box
- uid: SudokuSpice.Box.Contains(SudokuSpice.Coordinate@)
  name: Contains(Coordinate)
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_Contains_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.Box.Contains(SudokuSpice.Coordinate@)
  name.vb: Contains(ByRef Coordinate)
  fullName: SudokuSpice.Box.Contains(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.Box.Contains(ByRef SudokuSpice.Coordinate)
  nameWithType: Box.Contains(Coordinate)
  nameWithType.vb: Box.Contains(ByRef Coordinate)
- uid: SudokuSpice.Box.Contains*
  name: Contains
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_Contains_
  commentId: Overload:SudokuSpice.Box.Contains
  isSpec: "True"
  fullName: SudokuSpice.Box.Contains
  nameWithType: Box.Contains
- uid: SudokuSpice.Box.Equals(SudokuSpice.Box)
  name: Equals(Box)
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_Equals_SudokuSpice_Box_
  commentId: M:SudokuSpice.Box.Equals(SudokuSpice.Box)
  fullName: SudokuSpice.Box.Equals(SudokuSpice.Box)
  nameWithType: Box.Equals(Box)
- uid: SudokuSpice.Box.Equals(System.Nullable{System.Object})
  name: Equals(Nullable<Object>)
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_Equals_System_Nullable_System_Object__
  commentId: M:SudokuSpice.Box.Equals(System.Nullable{System.Object})
  name.vb: Equals(Nullable(Of Object))
  fullName: SudokuSpice.Box.Equals(System.Nullable<System.Object>)
  fullName.vb: SudokuSpice.Box.Equals(System.Nullable(Of System.Object))
  nameWithType: Box.Equals(Nullable<Object>)
  nameWithType.vb: Box.Equals(Nullable(Of Object))
- uid: SudokuSpice.Box.Equals*
  name: Equals
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_Equals_
  commentId: Overload:SudokuSpice.Box.Equals
  isSpec: "True"
  fullName: SudokuSpice.Box.Equals
  nameWithType: Box.Equals
- uid: SudokuSpice.Box.GetHashCode
  name: GetHashCode()
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_GetHashCode
  commentId: M:SudokuSpice.Box.GetHashCode
  fullName: SudokuSpice.Box.GetHashCode()
  nameWithType: Box.GetHashCode()
- uid: SudokuSpice.Box.GetHashCode*
  name: GetHashCode
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_GetHashCode_
  commentId: Overload:SudokuSpice.Box.GetHashCode
  isSpec: "True"
  fullName: SudokuSpice.Box.GetHashCode
  nameWithType: Box.GetHashCode
- uid: SudokuSpice.Box.op_Equality(SudokuSpice.Box,SudokuSpice.Box)
  name: Equality(Box, Box)
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_op_Equality_SudokuSpice_Box_SudokuSpice_Box_
  commentId: M:SudokuSpice.Box.op_Equality(SudokuSpice.Box,SudokuSpice.Box)
  fullName: SudokuSpice.Box.Equality(SudokuSpice.Box, SudokuSpice.Box)
  nameWithType: Box.Equality(Box, Box)
- uid: SudokuSpice.Box.op_Equality*
  name: Equality
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_op_Equality_
  commentId: Overload:SudokuSpice.Box.op_Equality
  isSpec: "True"
  fullName: SudokuSpice.Box.Equality
  nameWithType: Box.Equality
- uid: SudokuSpice.Box.op_Inequality(SudokuSpice.Box,SudokuSpice.Box)
  name: Inequality(Box, Box)
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_op_Inequality_SudokuSpice_Box_SudokuSpice_Box_
  commentId: M:SudokuSpice.Box.op_Inequality(SudokuSpice.Box,SudokuSpice.Box)
  fullName: SudokuSpice.Box.Inequality(SudokuSpice.Box, SudokuSpice.Box)
  nameWithType: Box.Inequality(Box, Box)
- uid: SudokuSpice.Box.op_Inequality*
  name: Inequality
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_op_Inequality_
  commentId: Overload:SudokuSpice.Box.op_Inequality
  isSpec: "True"
  fullName: SudokuSpice.Box.Inequality
  nameWithType: Box.Inequality
- uid: SudokuSpice.Box.Size
  name: Size
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_Size
  commentId: P:SudokuSpice.Box.Size
  fullName: SudokuSpice.Box.Size
  nameWithType: Box.Size
- uid: SudokuSpice.Box.Size*
  name: Size
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_Size_
  commentId: Overload:SudokuSpice.Box.Size
  isSpec: "True"
  fullName: SudokuSpice.Box.Size
  nameWithType: Box.Size
- uid: SudokuSpice.Box.TopLeft
  name: TopLeft
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_TopLeft
  commentId: P:SudokuSpice.Box.TopLeft
  fullName: SudokuSpice.Box.TopLeft
  nameWithType: Box.TopLeft
- uid: SudokuSpice.Box.TopLeft*
  name: TopLeft
  href: api/SudokuSpice.Box.html#SudokuSpice_Box_TopLeft_
  commentId: Overload:SudokuSpice.Box.TopLeft
  isSpec: "True"
  fullName: SudokuSpice.Box.TopLeft
  nameWithType: Box.TopLeft
- uid: SudokuSpice.Boxes
  name: Boxes
  href: api/SudokuSpice.Boxes.html
  commentId: T:SudokuSpice.Boxes
  fullName: SudokuSpice.Boxes
  nameWithType: Boxes
- uid: SudokuSpice.Boxes.CalculateBoxIndex(SudokuSpice.Coordinate@,System.Int32)
  name: CalculateBoxIndex(Coordinate, Int32)
  href: api/SudokuSpice.Boxes.html#SudokuSpice_Boxes_CalculateBoxIndex_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.Boxes.CalculateBoxIndex(SudokuSpice.Coordinate@,System.Int32)
  name.vb: CalculateBoxIndex(ByRef Coordinate, Int32)
  fullName: SudokuSpice.Boxes.CalculateBoxIndex(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.Boxes.CalculateBoxIndex(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: Boxes.CalculateBoxIndex(Coordinate, Int32)
  nameWithType.vb: Boxes.CalculateBoxIndex(ByRef Coordinate, Int32)
- uid: SudokuSpice.Boxes.CalculateBoxIndex*
  name: CalculateBoxIndex
  href: api/SudokuSpice.Boxes.html#SudokuSpice_Boxes_CalculateBoxIndex_
  commentId: Overload:SudokuSpice.Boxes.CalculateBoxIndex
  isSpec: "True"
  fullName: SudokuSpice.Boxes.CalculateBoxIndex
  nameWithType: Boxes.CalculateBoxIndex
- uid: SudokuSpice.Boxes.GetStartingBoxCoordinate(System.Int32,System.Int32)
  name: GetStartingBoxCoordinate(Int32, Int32)
  href: api/SudokuSpice.Boxes.html#SudokuSpice_Boxes_GetStartingBoxCoordinate_System_Int32_System_Int32_
  commentId: M:SudokuSpice.Boxes.GetStartingBoxCoordinate(System.Int32,System.Int32)
  fullName: SudokuSpice.Boxes.GetStartingBoxCoordinate(System.Int32, System.Int32)
  nameWithType: Boxes.GetStartingBoxCoordinate(Int32, Int32)
- uid: SudokuSpice.Boxes.GetStartingBoxCoordinate*
  name: GetStartingBoxCoordinate
  href: api/SudokuSpice.Boxes.html#SudokuSpice_Boxes_GetStartingBoxCoordinate_
  commentId: Overload:SudokuSpice.Boxes.GetStartingBoxCoordinate
  isSpec: "True"
  fullName: SudokuSpice.Boxes.GetStartingBoxCoordinate
  nameWithType: Boxes.GetStartingBoxCoordinate
- uid: SudokuSpice.Boxes.IntSquareRoot(System.Int32)
  name: IntSquareRoot(Int32)
  href: api/SudokuSpice.Boxes.html#SudokuSpice_Boxes_IntSquareRoot_System_Int32_
  commentId: M:SudokuSpice.Boxes.IntSquareRoot(System.Int32)
  fullName: SudokuSpice.Boxes.IntSquareRoot(System.Int32)
  nameWithType: Boxes.IntSquareRoot(Int32)
- uid: SudokuSpice.Boxes.IntSquareRoot*
  name: IntSquareRoot
  href: api/SudokuSpice.Boxes.html#SudokuSpice_Boxes_IntSquareRoot_
  commentId: Overload:SudokuSpice.Boxes.IntSquareRoot
  isSpec: "True"
  fullName: SudokuSpice.Boxes.IntSquareRoot
  nameWithType: Boxes.IntSquareRoot
- uid: SudokuSpice.Boxes.TryIntSquareRoot(System.Int32,System.Int32@)
  name: TryIntSquareRoot(Int32, out Int32)
  href: api/SudokuSpice.Boxes.html#SudokuSpice_Boxes_TryIntSquareRoot_System_Int32_System_Int32__
  commentId: M:SudokuSpice.Boxes.TryIntSquareRoot(System.Int32,System.Int32@)
  name.vb: TryIntSquareRoot(Int32, ByRef Int32)
  fullName: SudokuSpice.Boxes.TryIntSquareRoot(System.Int32, out System.Int32)
  fullName.vb: SudokuSpice.Boxes.TryIntSquareRoot(System.Int32, ByRef System.Int32)
  nameWithType: Boxes.TryIntSquareRoot(Int32, out Int32)
  nameWithType.vb: Boxes.TryIntSquareRoot(Int32, ByRef Int32)
- uid: SudokuSpice.Boxes.TryIntSquareRoot*
  name: TryIntSquareRoot
  href: api/SudokuSpice.Boxes.html#SudokuSpice_Boxes_TryIntSquareRoot_
  commentId: Overload:SudokuSpice.Boxes.TryIntSquareRoot
  isSpec: "True"
  fullName: SudokuSpice.Boxes.TryIntSquareRoot
  nameWithType: Boxes.TryIntSquareRoot
- uid: SudokuSpice.Boxes.YieldUnsetCoordsForBox(System.Int32,System.Int32,SudokuSpice.IReadOnlyPuzzle)
  name: YieldUnsetCoordsForBox(Int32, Int32, IReadOnlyPuzzle)
  href: api/SudokuSpice.Boxes.html#SudokuSpice_Boxes_YieldUnsetCoordsForBox_System_Int32_System_Int32_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.Boxes.YieldUnsetCoordsForBox(System.Int32,System.Int32,SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.Boxes.YieldUnsetCoordsForBox(System.Int32, System.Int32, SudokuSpice.IReadOnlyPuzzle)
  nameWithType: Boxes.YieldUnsetCoordsForBox(Int32, Int32, IReadOnlyPuzzle)
- uid: SudokuSpice.Boxes.YieldUnsetCoordsForBox*
  name: YieldUnsetCoordsForBox
  href: api/SudokuSpice.Boxes.html#SudokuSpice_Boxes_YieldUnsetCoordsForBox_
  commentId: Overload:SudokuSpice.Boxes.YieldUnsetCoordsForBox
  isSpec: "True"
  fullName: SudokuSpice.Boxes.YieldUnsetCoordsForBox
  nameWithType: Boxes.YieldUnsetCoordsForBox
- uid: SudokuSpice.ConstraintBased
  name: SudokuSpice.ConstraintBased
  href: api/SudokuSpice.ConstraintBased.html
  commentId: N:SudokuSpice.ConstraintBased
  fullName: SudokuSpice.ConstraintBased
  nameWithType: SudokuSpice.ConstraintBased
- uid: SudokuSpice.ConstraintBased.Constraints
  name: SudokuSpice.ConstraintBased.Constraints
  href: api/SudokuSpice.ConstraintBased.Constraints.html
  commentId: N:SudokuSpice.ConstraintBased.Constraints
  fullName: SudokuSpice.ConstraintBased.Constraints
  nameWithType: SudokuSpice.ConstraintBased.Constraints
- uid: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  name: BoxUniquenessConstraint
  href: api/SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint
  nameWithType: BoxUniquenessConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  name: TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  href: api/SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_BoxUniquenessConstraint_TryConstrain_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverGraph_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  fullName: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverGraph)
  nameWithType: BoxUniquenessConstraint.TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
- uid: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.TryConstrain*
  name: TryConstrain
  href: api/SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_BoxUniquenessConstraint_TryConstrain_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.TryConstrain
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.BoxUniquenessConstraint.TryConstrain
  nameWithType: BoxUniquenessConstraint.TryConstrain
- uid: SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint
  name: ColumnUniquenessConstraint
  href: api/SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint
  nameWithType: ColumnUniquenessConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  name: TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  href: api/SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_ColumnUniquenessConstraint_TryConstrain_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverGraph_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  fullName: SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverGraph)
  nameWithType: ColumnUniquenessConstraint.TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
- uid: SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.TryConstrain*
  name: TryConstrain
  href: api/SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_ColumnUniquenessConstraint_TryConstrain_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.TryConstrain
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.ColumnUniquenessConstraint.TryConstrain
  nameWithType: ColumnUniquenessConstraint.TryConstrain
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  name: ConstraintUtil
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil
  nameWithType: ConstraintUtil
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32,SudokuSpice.ConstraintBased.ExactCoverGraph,System.Int32,SudokuSpice.ConstraintBased.Objective@)
  name: TryAddObjectiveForPossibilityIndex(ReadOnlySpan<Possibility[]>, Int32, ExactCoverGraph, Int32, out Objective)
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_TryAddObjectiveForPossibilityIndex_ReadOnlySpan_SudokuSpice_ConstraintBased_Possibility____System_Int32_SudokuSpice_ConstraintBased_ExactCoverGraph_System_Int32_SudokuSpice_ConstraintBased_Objective__
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32,SudokuSpice.ConstraintBased.ExactCoverGraph,System.Int32,SudokuSpice.ConstraintBased.Objective@)
  name.vb: TryAddObjectiveForPossibilityIndex(ReadOnlySpan(Of Possibility()), Int32, ExactCoverGraph, Int32, ByRef Objective)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex(ReadOnlySpan<SudokuSpice.ConstraintBased.Possibility[]>, System.Int32, SudokuSpice.ConstraintBased.ExactCoverGraph, System.Int32, out SudokuSpice.ConstraintBased.Objective)
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex(ReadOnlySpan(Of SudokuSpice.ConstraintBased.Possibility()), System.Int32, SudokuSpice.ConstraintBased.ExactCoverGraph, System.Int32, ByRef SudokuSpice.ConstraintBased.Objective)
  nameWithType: ConstraintUtil.TryAddObjectiveForPossibilityIndex(ReadOnlySpan<Possibility[]>, Int32, ExactCoverGraph, Int32, out Objective)
  nameWithType.vb: ConstraintUtil.TryAddObjectiveForPossibilityIndex(ReadOnlySpan(Of Possibility()), Int32, ExactCoverGraph, Int32, ByRef Objective)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex*
  name: TryAddObjectiveForPossibilityIndex
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_TryAddObjectiveForPossibilityIndex_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddObjectiveForPossibilityIndex
  nameWithType: ConstraintUtil.TryAddObjectiveForPossibilityIndex
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32,System.Int32,SudokuSpice.ConstraintBased.OptionalObjective@)
  name: TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan<Possibility[]>, Int32, Int32, out OptionalObjective)
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_TryAddOptionalObjectiveForPossibilityIndex_ReadOnlySpan_SudokuSpice_ConstraintBased_Possibility____System_Int32_System_Int32_SudokuSpice_ConstraintBased_OptionalObjective__
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32,System.Int32,SudokuSpice.ConstraintBased.OptionalObjective@)
  name.vb: TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan(Of Possibility()), Int32, Int32, ByRef OptionalObjective)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan<SudokuSpice.ConstraintBased.Possibility[]>, System.Int32, System.Int32, out SudokuSpice.ConstraintBased.OptionalObjective)
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan(Of SudokuSpice.ConstraintBased.Possibility()), System.Int32, System.Int32, ByRef SudokuSpice.ConstraintBased.OptionalObjective)
  nameWithType: ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan<Possibility[]>, Int32, Int32, out OptionalObjective)
  nameWithType.vb: ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex(ReadOnlySpan(Of Possibility()), Int32, Int32, ByRef OptionalObjective)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex*
  name: TryAddOptionalObjectiveForPossibilityIndex
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_TryAddOptionalObjectiveForPossibilityIndex_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex
  nameWithType: ConstraintUtil.TryAddOptionalObjectiveForPossibilityIndex
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryCheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph,ReadOnlySpan{SudokuSpice.Coordinate},Span{System.Boolean})
  name: TryCheckForSetValues(IReadOnlyPuzzle, ExactCoverGraph, ReadOnlySpan<Coordinate>, Span<Boolean>)
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_TryCheckForSetValues_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverGraph_ReadOnlySpan_SudokuSpice_Coordinate__Span_System_Boolean__
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryCheckForSetValues(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph,ReadOnlySpan{SudokuSpice.Coordinate},Span{System.Boolean})
  name.vb: TryCheckForSetValues(IReadOnlyPuzzle, ExactCoverGraph, ReadOnlySpan(Of Coordinate), Span(Of Boolean))
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryCheckForSetValues(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverGraph, ReadOnlySpan<SudokuSpice.Coordinate>, Span<System.Boolean>)
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryCheckForSetValues(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverGraph, ReadOnlySpan(Of SudokuSpice.Coordinate), Span(Of System.Boolean))
  nameWithType: ConstraintUtil.TryCheckForSetValues(IReadOnlyPuzzle, ExactCoverGraph, ReadOnlySpan<Coordinate>, Span<Boolean>)
  nameWithType.vb: ConstraintUtil.TryCheckForSetValues(IReadOnlyPuzzle, ExactCoverGraph, ReadOnlySpan(Of Coordinate), Span(Of Boolean))
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryCheckForSetValues*
  name: TryCheckForSetValues
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_TryCheckForSetValues_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryCheckForSetValues
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryCheckForSetValues
  nameWithType: ConstraintUtil.TryCheckForSetValues
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32)
  name: TryDropPossibilitiesAtIndex(ReadOnlySpan<Possibility[]>, Int32)
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_TryDropPossibilitiesAtIndex_ReadOnlySpan_SudokuSpice_ConstraintBased_Possibility____System_Int32_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex(ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility[]},System.Int32)
  name.vb: TryDropPossibilitiesAtIndex(ReadOnlySpan(Of Possibility()), Int32)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex(ReadOnlySpan<SudokuSpice.ConstraintBased.Possibility[]>, System.Int32)
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex(ReadOnlySpan(Of SudokuSpice.ConstraintBased.Possibility()), System.Int32)
  nameWithType: ConstraintUtil.TryDropPossibilitiesAtIndex(ReadOnlySpan<Possibility[]>, Int32)
  nameWithType.vb: ConstraintUtil.TryDropPossibilitiesAtIndex(ReadOnlySpan(Of Possibility()), Int32)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex*
  name: TryDropPossibilitiesAtIndex
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_TryDropPossibilitiesAtIndex_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryDropPossibilitiesAtIndex
  nameWithType: ConstraintUtil.TryDropPossibilitiesAtIndex
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverGraph)
  name: TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan<Coordinate>, ExactCoverGraph)
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_TryImplementUniquenessConstraintForSquares_SudokuSpice_IReadOnlyPuzzle_ReadOnlySpan_SudokuSpice_Coordinate__SudokuSpice_ConstraintBased_ExactCoverGraph_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle,ReadOnlySpan{SudokuSpice.Coordinate},SudokuSpice.ConstraintBased.ExactCoverGraph)
  name.vb: TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan(Of Coordinate), ExactCoverGraph)
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle, ReadOnlySpan<SudokuSpice.Coordinate>, SudokuSpice.ConstraintBased.ExactCoverGraph)
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares(SudokuSpice.IReadOnlyPuzzle, ReadOnlySpan(Of SudokuSpice.Coordinate), SudokuSpice.ConstraintBased.ExactCoverGraph)
  nameWithType: ConstraintUtil.TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan<Coordinate>, ExactCoverGraph)
  nameWithType.vb: ConstraintUtil.TryImplementUniquenessConstraintForSquares(IReadOnlyPuzzle, ReadOnlySpan(Of Coordinate), ExactCoverGraph)
- uid: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares*
  name: TryImplementUniquenessConstraintForSquares
  href: api/SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.html#SudokuSpice_ConstraintBased_Constraints_ConstraintUtil_TryImplementUniquenessConstraintForSquares_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.ConstraintUtil.TryImplementUniquenessConstraintForSquares
  nameWithType: ConstraintUtil.TryImplementUniquenessConstraintForSquares
- uid: SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint
  name: DiagonalUniquenessConstraint
  href: api/SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint
  nameWithType: DiagonalUniquenessConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  name: TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  href: api/SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_DiagonalUniquenessConstraint_TryConstrain_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverGraph_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  fullName: SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverGraph)
  nameWithType: DiagonalUniquenessConstraint.TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
- uid: SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.TryConstrain*
  name: TryConstrain
  href: api/SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_DiagonalUniquenessConstraint_TryConstrain_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.TryConstrain
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.DiagonalUniquenessConstraint.TryConstrain
  nameWithType: DiagonalUniquenessConstraint.TryConstrain
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint
  name: IConstraint
  href: api/SudokuSpice.ConstraintBased.Constraints.IConstraint.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.IConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint
  nameWithType: IConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  name: TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  href: api/SudokuSpice.ConstraintBased.Constraints.IConstraint.html#SudokuSpice_ConstraintBased_Constraints_IConstraint_TryConstrain_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverGraph_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverGraph)
  nameWithType: IConstraint.TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
- uid: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain*
  name: TryConstrain
  href: api/SudokuSpice.ConstraintBased.Constraints.IConstraint.html#SudokuSpice_ConstraintBased_Constraints_IConstraint_TryConstrain_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.IConstraint.TryConstrain
  nameWithType: IConstraint.TryConstrain
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  name: MagicSquaresConstraint
  href: api/SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint
  nameWithType: MagicSquaresConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor(ReadOnlySpan{System.Int32},IEnumerable{SudokuSpice.Box},System.Boolean)
  name: MagicSquaresConstraint(ReadOnlySpan<Int32>, IEnumerable<Box>, Boolean)
  href: api/SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.html#SudokuSpice_ConstraintBased_Constraints_MagicSquaresConstraint__ctor_ReadOnlySpan_System_Int32__IEnumerable_SudokuSpice_Box__System_Boolean_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor(ReadOnlySpan{System.Int32},IEnumerable{SudokuSpice.Box},System.Boolean)
  name.vb: MagicSquaresConstraint(ReadOnlySpan(Of Int32), IEnumerable(Of Box), Boolean)
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.MagicSquaresConstraint(ReadOnlySpan<System.Int32>, IEnumerable<SudokuSpice.Box>, System.Boolean)
  fullName.vb: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.MagicSquaresConstraint(ReadOnlySpan(Of System.Int32), IEnumerable(Of SudokuSpice.Box), System.Boolean)
  nameWithType: MagicSquaresConstraint.MagicSquaresConstraint(ReadOnlySpan<Int32>, IEnumerable<Box>, Boolean)
  nameWithType.vb: MagicSquaresConstraint.MagicSquaresConstraint(ReadOnlySpan(Of Int32), IEnumerable(Of Box), Boolean)
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor*
  name: MagicSquaresConstraint
  href: api/SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.html#SudokuSpice_ConstraintBased_Constraints_MagicSquaresConstraint__ctor_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.#ctor
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.MagicSquaresConstraint
  nameWithType: MagicSquaresConstraint.MagicSquaresConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  name: TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  href: api/SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.html#SudokuSpice_ConstraintBased_Constraints_MagicSquaresConstraint_TryConstrain_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverGraph_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverGraph)
  nameWithType: MagicSquaresConstraint.TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
- uid: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain*
  name: TryConstrain
  href: api/SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.html#SudokuSpice_ConstraintBased_Constraints_MagicSquaresConstraint_TryConstrain_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.MagicSquaresConstraint.TryConstrain
  nameWithType: MagicSquaresConstraint.TryConstrain
- uid: SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint
  name: RowUniquenessConstraint
  href: api/SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.html
  commentId: T:SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint
  fullName: SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint
  nameWithType: RowUniquenessConstraint
- uid: SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  name: TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
  href: api/SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_RowUniquenessConstraint_TryConstrain_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_ConstraintBased_ExactCoverGraph_
  commentId: M:SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.ConstraintBased.ExactCoverGraph)
  fullName: SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.TryConstrain(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.ConstraintBased.ExactCoverGraph)
  nameWithType: RowUniquenessConstraint.TryConstrain(IReadOnlyPuzzle, ExactCoverGraph)
- uid: SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.TryConstrain*
  name: TryConstrain
  href: api/SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.html#SudokuSpice_ConstraintBased_Constraints_RowUniquenessConstraint_TryConstrain_
  commentId: Overload:SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.TryConstrain
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Constraints.RowUniquenessConstraint.TryConstrain
  nameWithType: RowUniquenessConstraint.TryConstrain
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph
  name: ExactCoverGraph
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html
  commentId: T:SudokuSpice.ConstraintBased.ExactCoverGraph
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph
  nameWithType: ExactCoverGraph
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.AllPossibleValues
  name: AllPossibleValues
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_AllPossibleValues
  commentId: P:SudokuSpice.ConstraintBased.ExactCoverGraph.AllPossibleValues
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.AllPossibleValues
  nameWithType: ExactCoverGraph.AllPossibleValues
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.AllPossibleValues*
  name: AllPossibleValues
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_AllPossibleValues_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverGraph.AllPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.AllPossibleValues
  nameWithType: ExactCoverGraph.AllPossibleValues
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.Create(SudokuSpice.IReadOnlyPuzzle)
  name: Create(IReadOnlyPuzzle)
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_Create_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverGraph.Create(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.Create(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: ExactCoverGraph.Create(IReadOnlyPuzzle)
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.Create*
  name: Create
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_Create_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverGraph.Create
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.Create
  nameWithType: ExactCoverGraph.Create
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.GetAllPossibilitiesAt(SudokuSpice.Coordinate@)
  name: GetAllPossibilitiesAt(Coordinate)
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_GetAllPossibilitiesAt_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverGraph.GetAllPossibilitiesAt(SudokuSpice.Coordinate@)
  name.vb: GetAllPossibilitiesAt(ByRef Coordinate)
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.GetAllPossibilitiesAt(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.ConstraintBased.ExactCoverGraph.GetAllPossibilitiesAt(ByRef SudokuSpice.Coordinate)
  nameWithType: ExactCoverGraph.GetAllPossibilitiesAt(Coordinate)
  nameWithType.vb: ExactCoverGraph.GetAllPossibilitiesAt(ByRef Coordinate)
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.GetAllPossibilitiesAt*
  name: GetAllPossibilitiesAt
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_GetAllPossibilitiesAt_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverGraph.GetAllPossibilitiesAt
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.GetAllPossibilitiesAt
  nameWithType: ExactCoverGraph.GetAllPossibilitiesAt
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.GetPossibilitiesOnRow(System.Int32)
  name: GetPossibilitiesOnRow(Int32)
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_GetPossibilitiesOnRow_System_Int32_
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverGraph.GetPossibilitiesOnRow(System.Int32)
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.GetPossibilitiesOnRow(System.Int32)
  nameWithType: ExactCoverGraph.GetPossibilitiesOnRow(Int32)
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.GetPossibilitiesOnRow*
  name: GetPossibilitiesOnRow
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_GetPossibilitiesOnRow_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverGraph.GetPossibilitiesOnRow
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.GetPossibilitiesOnRow
  nameWithType: ExactCoverGraph.GetPossibilitiesOnRow
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.GetUnsatisfiedRequiredObjectives
  name: GetUnsatisfiedRequiredObjectives()
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_GetUnsatisfiedRequiredObjectives
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverGraph.GetUnsatisfiedRequiredObjectives
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.GetUnsatisfiedRequiredObjectives()
  nameWithType: ExactCoverGraph.GetUnsatisfiedRequiredObjectives()
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.GetUnsatisfiedRequiredObjectives*
  name: GetUnsatisfiedRequiredObjectives
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_GetUnsatisfiedRequiredObjectives_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverGraph.GetUnsatisfiedRequiredObjectives
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.GetUnsatisfiedRequiredObjectives
  nameWithType: ExactCoverGraph.GetUnsatisfiedRequiredObjectives
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.GetUnsatisfiedRequiredObjectivesWithConcretePossibilities
  name: GetUnsatisfiedRequiredObjectivesWithConcretePossibilities()
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_GetUnsatisfiedRequiredObjectivesWithConcretePossibilities
  commentId: M:SudokuSpice.ConstraintBased.ExactCoverGraph.GetUnsatisfiedRequiredObjectivesWithConcretePossibilities
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.GetUnsatisfiedRequiredObjectivesWithConcretePossibilities()
  nameWithType: ExactCoverGraph.GetUnsatisfiedRequiredObjectivesWithConcretePossibilities()
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.GetUnsatisfiedRequiredObjectivesWithConcretePossibilities*
  name: GetUnsatisfiedRequiredObjectivesWithConcretePossibilities
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_GetUnsatisfiedRequiredObjectivesWithConcretePossibilities_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverGraph.GetUnsatisfiedRequiredObjectivesWithConcretePossibilities
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.GetUnsatisfiedRequiredObjectivesWithConcretePossibilities
  nameWithType: ExactCoverGraph.GetUnsatisfiedRequiredObjectivesWithConcretePossibilities
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.ValuesToIndices
  name: ValuesToIndices
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_ValuesToIndices
  commentId: P:SudokuSpice.ConstraintBased.ExactCoverGraph.ValuesToIndices
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.ValuesToIndices
  nameWithType: ExactCoverGraph.ValuesToIndices
- uid: SudokuSpice.ConstraintBased.ExactCoverGraph.ValuesToIndices*
  name: ValuesToIndices
  href: api/SudokuSpice.ConstraintBased.ExactCoverGraph.html#SudokuSpice_ConstraintBased_ExactCoverGraph_ValuesToIndices_
  commentId: Overload:SudokuSpice.ConstraintBased.ExactCoverGraph.ValuesToIndices
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.ExactCoverGraph.ValuesToIndices
  nameWithType: ExactCoverGraph.ValuesToIndices
- uid: SudokuSpice.ConstraintBased.IObjective
  name: IObjective
  href: api/SudokuSpice.ConstraintBased.IObjective.html
  commentId: T:SudokuSpice.ConstraintBased.IObjective
  fullName: SudokuSpice.ConstraintBased.IObjective
  nameWithType: IObjective
- uid: SudokuSpice.ConstraintBased.IObjective.State
  name: State
  href: api/SudokuSpice.ConstraintBased.IObjective.html#SudokuSpice_ConstraintBased_IObjective_State
  commentId: P:SudokuSpice.ConstraintBased.IObjective.State
  fullName: SudokuSpice.ConstraintBased.IObjective.State
  nameWithType: IObjective.State
- uid: SudokuSpice.ConstraintBased.IObjective.State*
  name: State
  href: api/SudokuSpice.ConstraintBased.IObjective.html#SudokuSpice_ConstraintBased_IObjective_State_
  commentId: Overload:SudokuSpice.ConstraintBased.IObjective.State
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.IObjective.State
  nameWithType: IObjective.State
- uid: SudokuSpice.ConstraintBased.IOptionalObjective
  name: IOptionalObjective
  href: api/SudokuSpice.ConstraintBased.IOptionalObjective.html
  commentId: T:SudokuSpice.ConstraintBased.IOptionalObjective
  fullName: SudokuSpice.ConstraintBased.IOptionalObjective
  nameWithType: IOptionalObjective
- uid: SudokuSpice.ConstraintBased.IPossibility
  name: IPossibility
  href: api/SudokuSpice.ConstraintBased.IPossibility.html
  commentId: T:SudokuSpice.ConstraintBased.IPossibility
  fullName: SudokuSpice.ConstraintBased.IPossibility
  nameWithType: IPossibility
- uid: SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  name: IsConcrete
  href: api/SudokuSpice.ConstraintBased.IPossibility.html#SudokuSpice_ConstraintBased_IPossibility_IsConcrete
  commentId: P:SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  fullName: SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  nameWithType: IPossibility.IsConcrete
- uid: SudokuSpice.ConstraintBased.IPossibility.IsConcrete*
  name: IsConcrete
  href: api/SudokuSpice.ConstraintBased.IPossibility.html#SudokuSpice_ConstraintBased_IPossibility_IsConcrete_
  commentId: Overload:SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  nameWithType: IPossibility.IsConcrete
- uid: SudokuSpice.ConstraintBased.IPossibility.State
  name: State
  href: api/SudokuSpice.ConstraintBased.IPossibility.html#SudokuSpice_ConstraintBased_IPossibility_State
  commentId: P:SudokuSpice.ConstraintBased.IPossibility.State
  fullName: SudokuSpice.ConstraintBased.IPossibility.State
  nameWithType: IPossibility.State
- uid: SudokuSpice.ConstraintBased.IPossibility.State*
  name: State
  href: api/SudokuSpice.ConstraintBased.IPossibility.html#SudokuSpice_ConstraintBased_IPossibility_State_
  commentId: Overload:SudokuSpice.ConstraintBased.IPossibility.State
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.IPossibility.State
  nameWithType: IPossibility.State
- uid: SudokuSpice.ConstraintBased.NodeState
  name: NodeState
  href: api/SudokuSpice.ConstraintBased.NodeState.html
  commentId: T:SudokuSpice.ConstraintBased.NodeState
  fullName: SudokuSpice.ConstraintBased.NodeState
  nameWithType: NodeState
- uid: SudokuSpice.ConstraintBased.NodeState.DROPPED
  name: DROPPED
  href: api/SudokuSpice.ConstraintBased.NodeState.html#SudokuSpice_ConstraintBased_NodeState_DROPPED
  commentId: F:SudokuSpice.ConstraintBased.NodeState.DROPPED
  fullName: SudokuSpice.ConstraintBased.NodeState.DROPPED
  nameWithType: NodeState.DROPPED
- uid: SudokuSpice.ConstraintBased.NodeState.SELECTED
  name: SELECTED
  href: api/SudokuSpice.ConstraintBased.NodeState.html#SudokuSpice_ConstraintBased_NodeState_SELECTED
  commentId: F:SudokuSpice.ConstraintBased.NodeState.SELECTED
  fullName: SudokuSpice.ConstraintBased.NodeState.SELECTED
  nameWithType: NodeState.SELECTED
- uid: SudokuSpice.ConstraintBased.NodeState.UNKNOWN
  name: UNKNOWN
  href: api/SudokuSpice.ConstraintBased.NodeState.html#SudokuSpice_ConstraintBased_NodeState_UNKNOWN
  commentId: F:SudokuSpice.ConstraintBased.NodeState.UNKNOWN
  fullName: SudokuSpice.ConstraintBased.NodeState.UNKNOWN
  nameWithType: NodeState.UNKNOWN
- uid: SudokuSpice.ConstraintBased.Objective
  name: Objective
  href: api/SudokuSpice.ConstraintBased.Objective.html
  commentId: T:SudokuSpice.ConstraintBased.Objective
  fullName: SudokuSpice.ConstraintBased.Objective
  nameWithType: Objective
- uid: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph,ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility},System.Int32)
  name: CreateFullyConnected(ExactCoverGraph, ReadOnlySpan<IPossibility>, Int32)
  href: api/SudokuSpice.ConstraintBased.Objective.html#SudokuSpice_ConstraintBased_Objective_CreateFullyConnected_SudokuSpice_ConstraintBased_ExactCoverGraph_ReadOnlySpan_SudokuSpice_ConstraintBased_IPossibility__System_Int32_
  commentId: M:SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph,ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility},System.Int32)
  name.vb: CreateFullyConnected(ExactCoverGraph, ReadOnlySpan(Of IPossibility), Int32)
  fullName: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph, ReadOnlySpan<SudokuSpice.ConstraintBased.IPossibility>, System.Int32)
  fullName.vb: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph, ReadOnlySpan(Of SudokuSpice.ConstraintBased.IPossibility), System.Int32)
  nameWithType: Objective.CreateFullyConnected(ExactCoverGraph, ReadOnlySpan<IPossibility>, Int32)
  nameWithType.vb: Objective.CreateFullyConnected(ExactCoverGraph, ReadOnlySpan(Of IPossibility), Int32)
- uid: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph,ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility},System.Int32)
  name: CreateFullyConnected(ExactCoverGraph, ReadOnlySpan<Possibility>, Int32)
  href: api/SudokuSpice.ConstraintBased.Objective.html#SudokuSpice_ConstraintBased_Objective_CreateFullyConnected_SudokuSpice_ConstraintBased_ExactCoverGraph_ReadOnlySpan_SudokuSpice_ConstraintBased_Possibility__System_Int32_
  commentId: M:SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph,ReadOnlySpan{SudokuSpice.ConstraintBased.Possibility},System.Int32)
  name.vb: CreateFullyConnected(ExactCoverGraph, ReadOnlySpan(Of Possibility), Int32)
  fullName: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph, ReadOnlySpan<SudokuSpice.ConstraintBased.Possibility>, System.Int32)
  fullName.vb: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected(SudokuSpice.ConstraintBased.ExactCoverGraph, ReadOnlySpan(Of SudokuSpice.ConstraintBased.Possibility), System.Int32)
  nameWithType: Objective.CreateFullyConnected(ExactCoverGraph, ReadOnlySpan<Possibility>, Int32)
  nameWithType.vb: Objective.CreateFullyConnected(ExactCoverGraph, ReadOnlySpan(Of Possibility), Int32)
- uid: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected*
  name: CreateFullyConnected
  href: api/SudokuSpice.ConstraintBased.Objective.html#SudokuSpice_ConstraintBased_Objective_CreateFullyConnected_
  commentId: Overload:SudokuSpice.ConstraintBased.Objective.CreateFullyConnected
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Objective.CreateFullyConnected
  nameWithType: Objective.CreateFullyConnected
- uid: SudokuSpice.ConstraintBased.Objective.State
  name: State
  href: api/SudokuSpice.ConstraintBased.Objective.html#SudokuSpice_ConstraintBased_Objective_State
  commentId: P:SudokuSpice.ConstraintBased.Objective.State
  fullName: SudokuSpice.ConstraintBased.Objective.State
  nameWithType: Objective.State
- uid: SudokuSpice.ConstraintBased.Objective.State*
  name: State
  href: api/SudokuSpice.ConstraintBased.Objective.html#SudokuSpice_ConstraintBased_Objective_State_
  commentId: Overload:SudokuSpice.ConstraintBased.Objective.State
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Objective.State
  nameWithType: Objective.State
- uid: SudokuSpice.ConstraintBased.OptionalObjective
  name: OptionalObjective
  href: api/SudokuSpice.ConstraintBased.OptionalObjective.html
  commentId: T:SudokuSpice.ConstraintBased.OptionalObjective
  fullName: SudokuSpice.ConstraintBased.OptionalObjective
  nameWithType: OptionalObjective
- uid: SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities(ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility},System.Int32)
  name: CreateWithPossibilities(ReadOnlySpan<IPossibility>, Int32)
  href: api/SudokuSpice.ConstraintBased.OptionalObjective.html#SudokuSpice_ConstraintBased_OptionalObjective_CreateWithPossibilities_ReadOnlySpan_SudokuSpice_ConstraintBased_IPossibility__System_Int32_
  commentId: M:SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities(ReadOnlySpan{SudokuSpice.ConstraintBased.IPossibility},System.Int32)
  name.vb: CreateWithPossibilities(ReadOnlySpan(Of IPossibility), Int32)
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities(ReadOnlySpan<SudokuSpice.ConstraintBased.IPossibility>, System.Int32)
  fullName.vb: SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities(ReadOnlySpan(Of SudokuSpice.ConstraintBased.IPossibility), System.Int32)
  nameWithType: OptionalObjective.CreateWithPossibilities(ReadOnlySpan<IPossibility>, Int32)
  nameWithType.vb: OptionalObjective.CreateWithPossibilities(ReadOnlySpan(Of IPossibility), Int32)
- uid: SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities*
  name: CreateWithPossibilities
  href: api/SudokuSpice.ConstraintBased.OptionalObjective.html#SudokuSpice_ConstraintBased_OptionalObjective_CreateWithPossibilities_
  commentId: Overload:SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.CreateWithPossibilities
  nameWithType: OptionalObjective.CreateWithPossibilities
- uid: SudokuSpice.ConstraintBased.OptionalObjective.State
  name: State
  href: api/SudokuSpice.ConstraintBased.OptionalObjective.html#SudokuSpice_ConstraintBased_OptionalObjective_State
  commentId: P:SudokuSpice.ConstraintBased.OptionalObjective.State
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.State
  nameWithType: OptionalObjective.State
- uid: SudokuSpice.ConstraintBased.OptionalObjective.State*
  name: State
  href: api/SudokuSpice.ConstraintBased.OptionalObjective.html#SudokuSpice_ConstraintBased_OptionalObjective_State_
  commentId: Overload:SudokuSpice.ConstraintBased.OptionalObjective.State
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.State
  nameWithType: OptionalObjective.State
- uid: SudokuSpice.ConstraintBased.OptionalObjective.SudokuSpice#ConstraintBased#IPossibility#IsConcrete
  name: IPossibility.IsConcrete
  href: api/SudokuSpice.ConstraintBased.OptionalObjective.html#SudokuSpice_ConstraintBased_OptionalObjective_SudokuSpice_ConstraintBased_IPossibility_IsConcrete
  commentId: P:SudokuSpice.ConstraintBased.OptionalObjective.SudokuSpice#ConstraintBased#IPossibility#IsConcrete
  name.vb: SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  nameWithType: OptionalObjective.IPossibility.IsConcrete
  nameWithType.vb: OptionalObjective.SudokuSpice.ConstraintBased.IPossibility.IsConcrete
- uid: SudokuSpice.ConstraintBased.OptionalObjective.SudokuSpice#ConstraintBased#IPossibility#IsConcrete*
  name: IPossibility.IsConcrete
  href: api/SudokuSpice.ConstraintBased.OptionalObjective.html#SudokuSpice_ConstraintBased_OptionalObjective_SudokuSpice_ConstraintBased_IPossibility_IsConcrete_
  commentId: Overload:SudokuSpice.ConstraintBased.OptionalObjective.SudokuSpice#ConstraintBased#IPossibility#IsConcrete
  isSpec: "True"
  name.vb: SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  fullName: SudokuSpice.ConstraintBased.OptionalObjective.SudokuSpice.ConstraintBased.IPossibility.IsConcrete
  nameWithType: OptionalObjective.IPossibility.IsConcrete
  nameWithType.vb: OptionalObjective.SudokuSpice.ConstraintBased.IPossibility.IsConcrete
- uid: SudokuSpice.ConstraintBased.Possibility
  name: Possibility
  href: api/SudokuSpice.ConstraintBased.Possibility.html
  commentId: T:SudokuSpice.ConstraintBased.Possibility
  fullName: SudokuSpice.ConstraintBased.Possibility
  nameWithType: Possibility
- uid: SudokuSpice.ConstraintBased.Possibility.Coordinate
  name: Coordinate
  href: api/SudokuSpice.ConstraintBased.Possibility.html#SudokuSpice_ConstraintBased_Possibility_Coordinate
  commentId: P:SudokuSpice.ConstraintBased.Possibility.Coordinate
  fullName: SudokuSpice.ConstraintBased.Possibility.Coordinate
  nameWithType: Possibility.Coordinate
- uid: SudokuSpice.ConstraintBased.Possibility.Coordinate*
  name: Coordinate
  href: api/SudokuSpice.ConstraintBased.Possibility.html#SudokuSpice_ConstraintBased_Possibility_Coordinate_
  commentId: Overload:SudokuSpice.ConstraintBased.Possibility.Coordinate
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Possibility.Coordinate
  nameWithType: Possibility.Coordinate
- uid: SudokuSpice.ConstraintBased.Possibility.Index
  name: Index
  href: api/SudokuSpice.ConstraintBased.Possibility.html#SudokuSpice_ConstraintBased_Possibility_Index
  commentId: P:SudokuSpice.ConstraintBased.Possibility.Index
  fullName: SudokuSpice.ConstraintBased.Possibility.Index
  nameWithType: Possibility.Index
- uid: SudokuSpice.ConstraintBased.Possibility.Index*
  name: Index
  href: api/SudokuSpice.ConstraintBased.Possibility.html#SudokuSpice_ConstraintBased_Possibility_Index_
  commentId: Overload:SudokuSpice.ConstraintBased.Possibility.Index
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Possibility.Index
  nameWithType: Possibility.Index
- uid: SudokuSpice.ConstraintBased.Possibility.IsConcrete
  name: IsConcrete
  href: api/SudokuSpice.ConstraintBased.Possibility.html#SudokuSpice_ConstraintBased_Possibility_IsConcrete
  commentId: P:SudokuSpice.ConstraintBased.Possibility.IsConcrete
  fullName: SudokuSpice.ConstraintBased.Possibility.IsConcrete
  nameWithType: Possibility.IsConcrete
- uid: SudokuSpice.ConstraintBased.Possibility.IsConcrete*
  name: IsConcrete
  href: api/SudokuSpice.ConstraintBased.Possibility.html#SudokuSpice_ConstraintBased_Possibility_IsConcrete_
  commentId: Overload:SudokuSpice.ConstraintBased.Possibility.IsConcrete
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Possibility.IsConcrete
  nameWithType: Possibility.IsConcrete
- uid: SudokuSpice.ConstraintBased.Possibility.State
  name: State
  href: api/SudokuSpice.ConstraintBased.Possibility.html#SudokuSpice_ConstraintBased_Possibility_State
  commentId: P:SudokuSpice.ConstraintBased.Possibility.State
  fullName: SudokuSpice.ConstraintBased.Possibility.State
  nameWithType: Possibility.State
- uid: SudokuSpice.ConstraintBased.Possibility.State*
  name: State
  href: api/SudokuSpice.ConstraintBased.Possibility.html#SudokuSpice_ConstraintBased_Possibility_State_
  commentId: Overload:SudokuSpice.ConstraintBased.Possibility.State
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Possibility.State
  nameWithType: Possibility.State
- uid: SudokuSpice.ConstraintBased.Possibility.TryDrop
  name: TryDrop()
  href: api/SudokuSpice.ConstraintBased.Possibility.html#SudokuSpice_ConstraintBased_Possibility_TryDrop
  commentId: M:SudokuSpice.ConstraintBased.Possibility.TryDrop
  fullName: SudokuSpice.ConstraintBased.Possibility.TryDrop()
  nameWithType: Possibility.TryDrop()
- uid: SudokuSpice.ConstraintBased.Possibility.TryDrop*
  name: TryDrop
  href: api/SudokuSpice.ConstraintBased.Possibility.html#SudokuSpice_ConstraintBased_Possibility_TryDrop_
  commentId: Overload:SudokuSpice.ConstraintBased.Possibility.TryDrop
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.Possibility.TryDrop
  nameWithType: Possibility.TryDrop
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1
  name: PuzzleSolver<TPuzzle>
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html
  commentId: T:SudokuSpice.ConstraintBased.PuzzleSolver`1
  name.vb: PuzzleSolver(Of TPuzzle)
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle)
  nameWithType: PuzzleSolver<TPuzzle>
  nameWithType.vb: PuzzleSolver(Of TPuzzle)
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor(IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})
  name: PuzzleSolver(IReadOnlyList<IConstraint>)
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1__ctor_IReadOnlyList_SudokuSpice_ConstraintBased_Constraints_IConstraint__
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor(IReadOnlyList{SudokuSpice.ConstraintBased.Constraints.IConstraint})
  name.vb: PuzzleSolver(IReadOnlyList(Of IConstraint))
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.PuzzleSolver(IReadOnlyList<SudokuSpice.ConstraintBased.Constraints.IConstraint>)
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).PuzzleSolver(IReadOnlyList(Of SudokuSpice.ConstraintBased.Constraints.IConstraint))
  nameWithType: PuzzleSolver<TPuzzle>.PuzzleSolver(IReadOnlyList<IConstraint>)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).PuzzleSolver(IReadOnlyList(Of IConstraint))
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor*
  name: PuzzleSolver
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1__ctor_
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.#ctor
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.PuzzleSolver
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).PuzzleSolver
  nameWithType: PuzzleSolver<TPuzzle>.PuzzleSolver
  nameWithType.vb: PuzzleSolver(Of TPuzzle).PuzzleSolver
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{CancellationToken})
  name: ComputeStatsForAllSolutions(TPuzzle, Nullable<CancellationToken>)
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_ComputeStatsForAllSolutions__0_System_Nullable_CancellationToken__
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{CancellationToken})
  name.vb: ComputeStatsForAllSolutions(TPuzzle, Nullable(Of CancellationToken))
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions(TPuzzle, System.Nullable<CancellationToken>)
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions(TPuzzle, System.Nullable(Of CancellationToken))
  nameWithType: PuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions(TPuzzle, Nullable<CancellationToken>)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions(TPuzzle, Nullable(Of CancellationToken))
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.ComputeStatsForAllSolutions*
  name: ComputeStatsForAllSolutions
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_ComputeStatsForAllSolutions_
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.ComputeStatsForAllSolutions
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions
  nameWithType: PuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions
  nameWithType.vb: PuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{CancellationToken})
  name: HasUniqueSolution(TPuzzle, Nullable<CancellationToken>)
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_HasUniqueSolution__0_System_Nullable_CancellationToken__
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{CancellationToken})
  name.vb: HasUniqueSolution(TPuzzle, Nullable(Of CancellationToken))
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.HasUniqueSolution(TPuzzle, System.Nullable<CancellationToken>)
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).HasUniqueSolution(TPuzzle, System.Nullable(Of CancellationToken))
  nameWithType: PuzzleSolver<TPuzzle>.HasUniqueSolution(TPuzzle, Nullable<CancellationToken>)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).HasUniqueSolution(TPuzzle, Nullable(Of CancellationToken))
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.HasUniqueSolution*
  name: HasUniqueSolution
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_HasUniqueSolution_
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.HasUniqueSolution
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.HasUniqueSolution
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).HasUniqueSolution
  nameWithType: PuzzleSolver<TPuzzle>.HasUniqueSolution
  nameWithType.vb: PuzzleSolver(Of TPuzzle).HasUniqueSolution
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve(`0,System.Boolean)
  name: Solve(TPuzzle, Boolean)
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_Solve__0_System_Boolean_
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve(`0,System.Boolean)
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.Solve(TPuzzle, System.Boolean)
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).Solve(TPuzzle, System.Boolean)
  nameWithType: PuzzleSolver<TPuzzle>.Solve(TPuzzle, Boolean)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).Solve(TPuzzle, Boolean)
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve*
  name: Solve
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_Solve_
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.Solve
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.Solve
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).Solve
  nameWithType: PuzzleSolver<TPuzzle>.Solve
  nameWithType.vb: PuzzleSolver(Of TPuzzle).Solve
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.TrySolve(`0,System.Boolean)
  name: TrySolve(TPuzzle, Boolean)
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_TrySolve__0_System_Boolean_
  commentId: M:SudokuSpice.ConstraintBased.PuzzleSolver`1.TrySolve(`0,System.Boolean)
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.TrySolve(TPuzzle, System.Boolean)
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).TrySolve(TPuzzle, System.Boolean)
  nameWithType: PuzzleSolver<TPuzzle>.TrySolve(TPuzzle, Boolean)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).TrySolve(TPuzzle, Boolean)
- uid: SudokuSpice.ConstraintBased.PuzzleSolver`1.TrySolve*
  name: TrySolve
  href: api/SudokuSpice.ConstraintBased.PuzzleSolver-1.html#SudokuSpice_ConstraintBased_PuzzleSolver_1_TrySolve_
  commentId: Overload:SudokuSpice.ConstraintBased.PuzzleSolver`1.TrySolve
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.PuzzleSolver<TPuzzle>.TrySolve
  fullName.vb: SudokuSpice.ConstraintBased.PuzzleSolver(Of TPuzzle).TrySolve
  nameWithType: PuzzleSolver<TPuzzle>.TrySolve
  nameWithType.vb: PuzzleSolver(Of TPuzzle).TrySolve
- uid: SudokuSpice.ConstraintBased.StandardPuzzles
  name: StandardPuzzles
  href: api/SudokuSpice.ConstraintBased.StandardPuzzles.html
  commentId: T:SudokuSpice.ConstraintBased.StandardPuzzles
  fullName: SudokuSpice.ConstraintBased.StandardPuzzles
  nameWithType: StandardPuzzles
- uid: SudokuSpice.ConstraintBased.StandardPuzzles.CreateSolver
  name: CreateSolver()
  href: api/SudokuSpice.ConstraintBased.StandardPuzzles.html#SudokuSpice_ConstraintBased_StandardPuzzles_CreateSolver
  commentId: M:SudokuSpice.ConstraintBased.StandardPuzzles.CreateSolver
  fullName: SudokuSpice.ConstraintBased.StandardPuzzles.CreateSolver()
  nameWithType: StandardPuzzles.CreateSolver()
- uid: SudokuSpice.ConstraintBased.StandardPuzzles.CreateSolver*
  name: CreateSolver
  href: api/SudokuSpice.ConstraintBased.StandardPuzzles.html#SudokuSpice_ConstraintBased_StandardPuzzles_CreateSolver_
  commentId: Overload:SudokuSpice.ConstraintBased.StandardPuzzles.CreateSolver
  isSpec: "True"
  fullName: SudokuSpice.ConstraintBased.StandardPuzzles.CreateSolver
  nameWithType: StandardPuzzles.CreateSolver
- uid: SudokuSpice.Coordinate
  name: Coordinate
  href: api/SudokuSpice.Coordinate.html
  commentId: T:SudokuSpice.Coordinate
  fullName: SudokuSpice.Coordinate
  nameWithType: Coordinate
- uid: SudokuSpice.Coordinate.#ctor(System.Int32,System.Int32)
  name: Coordinate(Int32, Int32)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate__ctor_System_Int32_System_Int32_
  commentId: M:SudokuSpice.Coordinate.#ctor(System.Int32,System.Int32)
  fullName: SudokuSpice.Coordinate.Coordinate(System.Int32, System.Int32)
  nameWithType: Coordinate.Coordinate(Int32, Int32)
- uid: SudokuSpice.Coordinate.#ctor*
  name: Coordinate
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate__ctor_
  commentId: Overload:SudokuSpice.Coordinate.#ctor
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Coordinate
  nameWithType: Coordinate.Coordinate
- uid: SudokuSpice.Coordinate.Column
  name: Column
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Column
  commentId: P:SudokuSpice.Coordinate.Column
  fullName: SudokuSpice.Coordinate.Column
  nameWithType: Coordinate.Column
- uid: SudokuSpice.Coordinate.Column*
  name: Column
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Column_
  commentId: Overload:SudokuSpice.Coordinate.Column
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Column
  nameWithType: Coordinate.Column
- uid: SudokuSpice.Coordinate.Deconstruct(System.Int32@,System.Int32@)
  name: Deconstruct(out Int32, out Int32)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Deconstruct_System_Int32__System_Int32__
  commentId: M:SudokuSpice.Coordinate.Deconstruct(System.Int32@,System.Int32@)
  name.vb: Deconstruct(ByRef Int32, ByRef Int32)
  fullName: SudokuSpice.Coordinate.Deconstruct(out System.Int32, out System.Int32)
  fullName.vb: SudokuSpice.Coordinate.Deconstruct(ByRef System.Int32, ByRef System.Int32)
  nameWithType: Coordinate.Deconstruct(out Int32, out Int32)
  nameWithType.vb: Coordinate.Deconstruct(ByRef Int32, ByRef Int32)
- uid: SudokuSpice.Coordinate.Deconstruct*
  name: Deconstruct
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Deconstruct_
  commentId: Overload:SudokuSpice.Coordinate.Deconstruct
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Deconstruct
  nameWithType: Coordinate.Deconstruct
- uid: SudokuSpice.Coordinate.Equals(SudokuSpice.Coordinate)
  name: Equals(Coordinate)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Equals_SudokuSpice_Coordinate_
  commentId: M:SudokuSpice.Coordinate.Equals(SudokuSpice.Coordinate)
  fullName: SudokuSpice.Coordinate.Equals(SudokuSpice.Coordinate)
  nameWithType: Coordinate.Equals(Coordinate)
- uid: SudokuSpice.Coordinate.Equals(SudokuSpice.Coordinate@)
  name: Equals(Coordinate)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Equals_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.Coordinate.Equals(SudokuSpice.Coordinate@)
  name.vb: Equals(ByRef Coordinate)
  fullName: SudokuSpice.Coordinate.Equals(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.Coordinate.Equals(ByRef SudokuSpice.Coordinate)
  nameWithType: Coordinate.Equals(Coordinate)
  nameWithType.vb: Coordinate.Equals(ByRef Coordinate)
- uid: SudokuSpice.Coordinate.Equals(System.Nullable{System.Object})
  name: Equals(Nullable<Object>)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Equals_System_Nullable_System_Object__
  commentId: M:SudokuSpice.Coordinate.Equals(System.Nullable{System.Object})
  name.vb: Equals(Nullable(Of Object))
  fullName: SudokuSpice.Coordinate.Equals(System.Nullable<System.Object>)
  fullName.vb: SudokuSpice.Coordinate.Equals(System.Nullable(Of System.Object))
  nameWithType: Coordinate.Equals(Nullable<Object>)
  nameWithType.vb: Coordinate.Equals(Nullable(Of Object))
- uid: SudokuSpice.Coordinate.Equals*
  name: Equals
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Equals_
  commentId: Overload:SudokuSpice.Coordinate.Equals
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Equals
  nameWithType: Coordinate.Equals
- uid: SudokuSpice.Coordinate.GetHashCode
  name: GetHashCode()
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_GetHashCode
  commentId: M:SudokuSpice.Coordinate.GetHashCode
  fullName: SudokuSpice.Coordinate.GetHashCode()
  nameWithType: Coordinate.GetHashCode()
- uid: SudokuSpice.Coordinate.GetHashCode*
  name: GetHashCode
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_GetHashCode_
  commentId: Overload:SudokuSpice.Coordinate.GetHashCode
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.GetHashCode
  nameWithType: Coordinate.GetHashCode
- uid: SudokuSpice.Coordinate.op_Equality(SudokuSpice.Coordinate@,SudokuSpice.Coordinate@)
  name: Equality(Coordinate, Coordinate)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_op_Equality_SudokuSpice_Coordinate__SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.Coordinate.op_Equality(SudokuSpice.Coordinate@,SudokuSpice.Coordinate@)
  name.vb: Equality(ByRef Coordinate, ByRef Coordinate)
  fullName: SudokuSpice.Coordinate.Equality(SudokuSpice.Coordinate, SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.Coordinate.Equality(ByRef SudokuSpice.Coordinate, ByRef SudokuSpice.Coordinate)
  nameWithType: Coordinate.Equality(Coordinate, Coordinate)
  nameWithType.vb: Coordinate.Equality(ByRef Coordinate, ByRef Coordinate)
- uid: SudokuSpice.Coordinate.op_Equality*
  name: Equality
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_op_Equality_
  commentId: Overload:SudokuSpice.Coordinate.op_Equality
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Equality
  nameWithType: Coordinate.Equality
- uid: SudokuSpice.Coordinate.op_Inequality(SudokuSpice.Coordinate@,SudokuSpice.Coordinate@)
  name: Inequality(Coordinate, Coordinate)
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_op_Inequality_SudokuSpice_Coordinate__SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.Coordinate.op_Inequality(SudokuSpice.Coordinate@,SudokuSpice.Coordinate@)
  name.vb: Inequality(ByRef Coordinate, ByRef Coordinate)
  fullName: SudokuSpice.Coordinate.Inequality(SudokuSpice.Coordinate, SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.Coordinate.Inequality(ByRef SudokuSpice.Coordinate, ByRef SudokuSpice.Coordinate)
  nameWithType: Coordinate.Inequality(Coordinate, Coordinate)
  nameWithType.vb: Coordinate.Inequality(ByRef Coordinate, ByRef Coordinate)
- uid: SudokuSpice.Coordinate.op_Inequality*
  name: Inequality
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_op_Inequality_
  commentId: Overload:SudokuSpice.Coordinate.op_Inequality
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Inequality
  nameWithType: Coordinate.Inequality
- uid: SudokuSpice.Coordinate.Row
  name: Row
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Row
  commentId: P:SudokuSpice.Coordinate.Row
  fullName: SudokuSpice.Coordinate.Row
  nameWithType: Coordinate.Row
- uid: SudokuSpice.Coordinate.Row*
  name: Row
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_Row_
  commentId: Overload:SudokuSpice.Coordinate.Row
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.Row
  nameWithType: Coordinate.Row
- uid: SudokuSpice.Coordinate.ToString
  name: ToString()
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_ToString
  commentId: M:SudokuSpice.Coordinate.ToString
  fullName: SudokuSpice.Coordinate.ToString()
  nameWithType: Coordinate.ToString()
- uid: SudokuSpice.Coordinate.ToString*
  name: ToString
  href: api/SudokuSpice.Coordinate.html#SudokuSpice_Coordinate_ToString_
  commentId: Overload:SudokuSpice.Coordinate.ToString
  isSpec: "True"
  fullName: SudokuSpice.Coordinate.ToString
  nameWithType: Coordinate.ToString
- uid: SudokuSpice.CoordinateTracker
  name: CoordinateTracker
  href: api/SudokuSpice.CoordinateTracker.html
  commentId: T:SudokuSpice.CoordinateTracker
  fullName: SudokuSpice.CoordinateTracker
  nameWithType: CoordinateTracker
- uid: SudokuSpice.CoordinateTracker.#ctor(SudokuSpice.CoordinateTracker)
  name: CoordinateTracker(CoordinateTracker)
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker__ctor_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.CoordinateTracker.#ctor(SudokuSpice.CoordinateTracker)
  fullName: SudokuSpice.CoordinateTracker.CoordinateTracker(SudokuSpice.CoordinateTracker)
  nameWithType: CoordinateTracker.CoordinateTracker(CoordinateTracker)
- uid: SudokuSpice.CoordinateTracker.#ctor(System.Int32)
  name: CoordinateTracker(Int32)
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker__ctor_System_Int32_
  commentId: M:SudokuSpice.CoordinateTracker.#ctor(System.Int32)
  fullName: SudokuSpice.CoordinateTracker.CoordinateTracker(System.Int32)
  nameWithType: CoordinateTracker.CoordinateTracker(Int32)
- uid: SudokuSpice.CoordinateTracker.#ctor*
  name: CoordinateTracker
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker__ctor_
  commentId: Overload:SudokuSpice.CoordinateTracker.#ctor
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.CoordinateTracker
  nameWithType: CoordinateTracker.CoordinateTracker
- uid: SudokuSpice.CoordinateTracker.Add(SudokuSpice.Coordinate@)
  name: Add(Coordinate)
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Add_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.CoordinateTracker.Add(SudokuSpice.Coordinate@)
  name.vb: Add(ByRef Coordinate)
  fullName: SudokuSpice.CoordinateTracker.Add(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.CoordinateTracker.Add(ByRef SudokuSpice.Coordinate)
  nameWithType: CoordinateTracker.Add(Coordinate)
  nameWithType.vb: CoordinateTracker.Add(ByRef Coordinate)
- uid: SudokuSpice.CoordinateTracker.Add*
  name: Add
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Add_
  commentId: Overload:SudokuSpice.CoordinateTracker.Add
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.Add
  nameWithType: CoordinateTracker.Add
- uid: SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked(SudokuSpice.Coordinate@)
  name: AddOrTrackIfUntracked(Coordinate)
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_AddOrTrackIfUntracked_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked(SudokuSpice.Coordinate@)
  name.vb: AddOrTrackIfUntracked(ByRef Coordinate)
  fullName: SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked(ByRef SudokuSpice.Coordinate)
  nameWithType: CoordinateTracker.AddOrTrackIfUntracked(Coordinate)
  nameWithType.vb: CoordinateTracker.AddOrTrackIfUntracked(ByRef Coordinate)
- uid: SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked*
  name: AddOrTrackIfUntracked
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_AddOrTrackIfUntracked_
  commentId: Overload:SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.AddOrTrackIfUntracked
  nameWithType: CoordinateTracker.AddOrTrackIfUntracked
- uid: SudokuSpice.CoordinateTracker.AddOrTrackResult
  name: CoordinateTracker.AddOrTrackResult
  href: api/SudokuSpice.CoordinateTracker.AddOrTrackResult.html
  commentId: T:SudokuSpice.CoordinateTracker.AddOrTrackResult
  fullName: SudokuSpice.CoordinateTracker.AddOrTrackResult
  nameWithType: CoordinateTracker.AddOrTrackResult
- uid: SudokuSpice.CoordinateTracker.AddOrTrackResult.AddedAndTracked
  name: AddedAndTracked
  href: api/SudokuSpice.CoordinateTracker.AddOrTrackResult.html#SudokuSpice_CoordinateTracker_AddOrTrackResult_AddedAndTracked
  commentId: F:SudokuSpice.CoordinateTracker.AddOrTrackResult.AddedAndTracked
  fullName: SudokuSpice.CoordinateTracker.AddOrTrackResult.AddedAndTracked
  nameWithType: CoordinateTracker.AddOrTrackResult.AddedAndTracked
- uid: SudokuSpice.CoordinateTracker.AddOrTrackResult.Tracked
  name: Tracked
  href: api/SudokuSpice.CoordinateTracker.AddOrTrackResult.html#SudokuSpice_CoordinateTracker_AddOrTrackResult_Tracked
  commentId: F:SudokuSpice.CoordinateTracker.AddOrTrackResult.Tracked
  fullName: SudokuSpice.CoordinateTracker.AddOrTrackResult.Tracked
  nameWithType: CoordinateTracker.AddOrTrackResult.Tracked
- uid: SudokuSpice.CoordinateTracker.AddOrTrackResult.Unchanged
  name: Unchanged
  href: api/SudokuSpice.CoordinateTracker.AddOrTrackResult.html#SudokuSpice_CoordinateTracker_AddOrTrackResult_Unchanged
  commentId: F:SudokuSpice.CoordinateTracker.AddOrTrackResult.Unchanged
  fullName: SudokuSpice.CoordinateTracker.AddOrTrackResult.Unchanged
  nameWithType: CoordinateTracker.AddOrTrackResult.Unchanged
- uid: SudokuSpice.CoordinateTracker.GetTrackedCoords
  name: GetTrackedCoords()
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_GetTrackedCoords
  commentId: M:SudokuSpice.CoordinateTracker.GetTrackedCoords
  fullName: SudokuSpice.CoordinateTracker.GetTrackedCoords()
  nameWithType: CoordinateTracker.GetTrackedCoords()
- uid: SudokuSpice.CoordinateTracker.GetTrackedCoords*
  name: GetTrackedCoords
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_GetTrackedCoords_
  commentId: Overload:SudokuSpice.CoordinateTracker.GetTrackedCoords
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.GetTrackedCoords
  nameWithType: CoordinateTracker.GetTrackedCoords
- uid: SudokuSpice.CoordinateTracker.NumTracked
  name: NumTracked
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_NumTracked
  commentId: P:SudokuSpice.CoordinateTracker.NumTracked
  fullName: SudokuSpice.CoordinateTracker.NumTracked
  nameWithType: CoordinateTracker.NumTracked
- uid: SudokuSpice.CoordinateTracker.NumTracked*
  name: NumTracked
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_NumTracked_
  commentId: Overload:SudokuSpice.CoordinateTracker.NumTracked
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.NumTracked
  nameWithType: CoordinateTracker.NumTracked
- uid: SudokuSpice.CoordinateTracker.Size
  name: Size
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Size
  commentId: P:SudokuSpice.CoordinateTracker.Size
  fullName: SudokuSpice.CoordinateTracker.Size
  nameWithType: CoordinateTracker.Size
- uid: SudokuSpice.CoordinateTracker.Size*
  name: Size
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Size_
  commentId: Overload:SudokuSpice.CoordinateTracker.Size
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.Size
  nameWithType: CoordinateTracker.Size
- uid: SudokuSpice.CoordinateTracker.Track(SudokuSpice.Coordinate@)
  name: Track(Coordinate)
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Track_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.CoordinateTracker.Track(SudokuSpice.Coordinate@)
  name.vb: Track(ByRef Coordinate)
  fullName: SudokuSpice.CoordinateTracker.Track(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.CoordinateTracker.Track(ByRef SudokuSpice.Coordinate)
  nameWithType: CoordinateTracker.Track(Coordinate)
  nameWithType.vb: CoordinateTracker.Track(ByRef Coordinate)
- uid: SudokuSpice.CoordinateTracker.Track*
  name: Track
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Track_
  commentId: Overload:SudokuSpice.CoordinateTracker.Track
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.Track
  nameWithType: CoordinateTracker.Track
- uid: SudokuSpice.CoordinateTracker.Untrack(SudokuSpice.Coordinate@)
  name: Untrack(Coordinate)
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Untrack_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.CoordinateTracker.Untrack(SudokuSpice.Coordinate@)
  name.vb: Untrack(ByRef Coordinate)
  fullName: SudokuSpice.CoordinateTracker.Untrack(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.CoordinateTracker.Untrack(ByRef SudokuSpice.Coordinate)
  nameWithType: CoordinateTracker.Untrack(Coordinate)
  nameWithType.vb: CoordinateTracker.Untrack(ByRef Coordinate)
- uid: SudokuSpice.CoordinateTracker.Untrack*
  name: Untrack
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_Untrack_
  commentId: Overload:SudokuSpice.CoordinateTracker.Untrack
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.Untrack
  nameWithType: CoordinateTracker.Untrack
- uid: SudokuSpice.CoordinateTracker.UntrackAll
  name: UntrackAll()
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_UntrackAll
  commentId: M:SudokuSpice.CoordinateTracker.UntrackAll
  fullName: SudokuSpice.CoordinateTracker.UntrackAll()
  nameWithType: CoordinateTracker.UntrackAll()
- uid: SudokuSpice.CoordinateTracker.UntrackAll*
  name: UntrackAll
  href: api/SudokuSpice.CoordinateTracker.html#SudokuSpice_CoordinateTracker_UntrackAll_
  commentId: Overload:SudokuSpice.CoordinateTracker.UntrackAll
  isSpec: "True"
  fullName: SudokuSpice.CoordinateTracker.UntrackAll
  nameWithType: CoordinateTracker.UntrackAll
- uid: SudokuSpice.IPuzzle`1
  name: IPuzzle<T>
  href: api/SudokuSpice.IPuzzle-1.html
  commentId: T:SudokuSpice.IPuzzle`1
  name.vb: IPuzzle(Of T)
  fullName: SudokuSpice.IPuzzle<T>
  fullName.vb: SudokuSpice.IPuzzle(Of T)
  nameWithType: IPuzzle<T>
  nameWithType.vb: IPuzzle(Of T)
- uid: SudokuSpice.IPuzzle`1.DeepCopy
  name: DeepCopy()
  href: api/SudokuSpice.IPuzzle-1.html#SudokuSpice_IPuzzle_1_DeepCopy
  commentId: M:SudokuSpice.IPuzzle`1.DeepCopy
  fullName: SudokuSpice.IPuzzle<T>.DeepCopy()
  fullName.vb: SudokuSpice.IPuzzle(Of T).DeepCopy()
  nameWithType: IPuzzle<T>.DeepCopy()
  nameWithType.vb: IPuzzle(Of T).DeepCopy()
- uid: SudokuSpice.IPuzzle`1.DeepCopy*
  name: DeepCopy
  href: api/SudokuSpice.IPuzzle-1.html#SudokuSpice_IPuzzle_1_DeepCopy_
  commentId: Overload:SudokuSpice.IPuzzle`1.DeepCopy
  isSpec: "True"
  fullName: SudokuSpice.IPuzzle<T>.DeepCopy
  fullName.vb: SudokuSpice.IPuzzle(Of T).DeepCopy
  nameWithType: IPuzzle<T>.DeepCopy
  nameWithType.vb: IPuzzle(Of T).DeepCopy
- uid: SudokuSpice.IPuzzle`1.Item(SudokuSpice.Coordinate@)
  name: Item[Coordinate]
  href: api/SudokuSpice.IPuzzle-1.html#SudokuSpice_IPuzzle_1_Item_SudokuSpice_Coordinate__
  commentId: P:SudokuSpice.IPuzzle`1.Item(SudokuSpice.Coordinate@)
  name.vb: Item(ByRef Coordinate)
  fullName: SudokuSpice.IPuzzle<T>.Item[SudokuSpice.Coordinate]
  fullName.vb: SudokuSpice.IPuzzle(Of T).Item(ByRef SudokuSpice.Coordinate)
  nameWithType: IPuzzle<T>.Item[Coordinate]
  nameWithType.vb: IPuzzle(Of T).Item(ByRef Coordinate)
- uid: SudokuSpice.IPuzzle`1.Item(System.Int32,System.Int32)
  name: Item[Int32, Int32]
  href: api/SudokuSpice.IPuzzle-1.html#SudokuSpice_IPuzzle_1_Item_System_Int32_System_Int32_
  commentId: P:SudokuSpice.IPuzzle`1.Item(System.Int32,System.Int32)
  name.vb: Item(Int32, Int32)
  fullName: SudokuSpice.IPuzzle<T>.Item[System.Int32, System.Int32]
  fullName.vb: SudokuSpice.IPuzzle(Of T).Item(System.Int32, System.Int32)
  nameWithType: IPuzzle<T>.Item[Int32, Int32]
  nameWithType.vb: IPuzzle(Of T).Item(Int32, Int32)
- uid: SudokuSpice.IPuzzle`1.Item*
  name: Item
  href: api/SudokuSpice.IPuzzle-1.html#SudokuSpice_IPuzzle_1_Item_
  commentId: Overload:SudokuSpice.IPuzzle`1.Item
  isSpec: "True"
  fullName: SudokuSpice.IPuzzle<T>.Item
  fullName.vb: SudokuSpice.IPuzzle(Of T).Item
  nameWithType: IPuzzle<T>.Item
  nameWithType.vb: IPuzzle(Of T).Item
- uid: SudokuSpice.IPuzzleSolver`1
  name: IPuzzleSolver<TPuzzle>
  href: api/SudokuSpice.IPuzzleSolver-1.html
  commentId: T:SudokuSpice.IPuzzleSolver`1
  name.vb: IPuzzleSolver(Of TPuzzle)
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle)
  nameWithType: IPuzzleSolver<TPuzzle>
  nameWithType.vb: IPuzzleSolver(Of TPuzzle)
- uid: SudokuSpice.IPuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{CancellationToken})
  name: ComputeStatsForAllSolutions(TPuzzle, Nullable<CancellationToken>)
  href: api/SudokuSpice.IPuzzleSolver-1.html#SudokuSpice_IPuzzleSolver_1_ComputeStatsForAllSolutions__0_System_Nullable_CancellationToken__
  commentId: M:SudokuSpice.IPuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{CancellationToken})
  name.vb: ComputeStatsForAllSolutions(TPuzzle, Nullable(Of CancellationToken))
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions(TPuzzle, System.Nullable<CancellationToken>)
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions(TPuzzle, System.Nullable(Of CancellationToken))
  nameWithType: IPuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions(TPuzzle, Nullable<CancellationToken>)
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions(TPuzzle, Nullable(Of CancellationToken))
- uid: SudokuSpice.IPuzzleSolver`1.ComputeStatsForAllSolutions*
  name: ComputeStatsForAllSolutions
  href: api/SudokuSpice.IPuzzleSolver-1.html#SudokuSpice_IPuzzleSolver_1_ComputeStatsForAllSolutions_
  commentId: Overload:SudokuSpice.IPuzzleSolver`1.ComputeStatsForAllSolutions
  isSpec: "True"
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions
  nameWithType: IPuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions
- uid: SudokuSpice.IPuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{CancellationToken})
  name: HasUniqueSolution(TPuzzle, Nullable<CancellationToken>)
  href: api/SudokuSpice.IPuzzleSolver-1.html#SudokuSpice_IPuzzleSolver_1_HasUniqueSolution__0_System_Nullable_CancellationToken__
  commentId: M:SudokuSpice.IPuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{CancellationToken})
  name.vb: HasUniqueSolution(TPuzzle, Nullable(Of CancellationToken))
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.HasUniqueSolution(TPuzzle, System.Nullable<CancellationToken>)
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).HasUniqueSolution(TPuzzle, System.Nullable(Of CancellationToken))
  nameWithType: IPuzzleSolver<TPuzzle>.HasUniqueSolution(TPuzzle, Nullable<CancellationToken>)
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).HasUniqueSolution(TPuzzle, Nullable(Of CancellationToken))
- uid: SudokuSpice.IPuzzleSolver`1.HasUniqueSolution*
  name: HasUniqueSolution
  href: api/SudokuSpice.IPuzzleSolver-1.html#SudokuSpice_IPuzzleSolver_1_HasUniqueSolution_
  commentId: Overload:SudokuSpice.IPuzzleSolver`1.HasUniqueSolution
  isSpec: "True"
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.HasUniqueSolution
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).HasUniqueSolution
  nameWithType: IPuzzleSolver<TPuzzle>.HasUniqueSolution
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).HasUniqueSolution
- uid: SudokuSpice.IPuzzleSolver`1.Solve(`0,System.Boolean)
  name: Solve(TPuzzle, Boolean)
  href: api/SudokuSpice.IPuzzleSolver-1.html#SudokuSpice_IPuzzleSolver_1_Solve__0_System_Boolean_
  commentId: M:SudokuSpice.IPuzzleSolver`1.Solve(`0,System.Boolean)
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.Solve(TPuzzle, System.Boolean)
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).Solve(TPuzzle, System.Boolean)
  nameWithType: IPuzzleSolver<TPuzzle>.Solve(TPuzzle, Boolean)
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).Solve(TPuzzle, Boolean)
- uid: SudokuSpice.IPuzzleSolver`1.Solve*
  name: Solve
  href: api/SudokuSpice.IPuzzleSolver-1.html#SudokuSpice_IPuzzleSolver_1_Solve_
  commentId: Overload:SudokuSpice.IPuzzleSolver`1.Solve
  isSpec: "True"
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.Solve
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).Solve
  nameWithType: IPuzzleSolver<TPuzzle>.Solve
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).Solve
- uid: SudokuSpice.IPuzzleSolver`1.TrySolve(`0,System.Boolean)
  name: TrySolve(TPuzzle, Boolean)
  href: api/SudokuSpice.IPuzzleSolver-1.html#SudokuSpice_IPuzzleSolver_1_TrySolve__0_System_Boolean_
  commentId: M:SudokuSpice.IPuzzleSolver`1.TrySolve(`0,System.Boolean)
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.TrySolve(TPuzzle, System.Boolean)
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).TrySolve(TPuzzle, System.Boolean)
  nameWithType: IPuzzleSolver<TPuzzle>.TrySolve(TPuzzle, Boolean)
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).TrySolve(TPuzzle, Boolean)
- uid: SudokuSpice.IPuzzleSolver`1.TrySolve*
  name: TrySolve
  href: api/SudokuSpice.IPuzzleSolver-1.html#SudokuSpice_IPuzzleSolver_1_TrySolve_
  commentId: Overload:SudokuSpice.IPuzzleSolver`1.TrySolve
  isSpec: "True"
  fullName: SudokuSpice.IPuzzleSolver<TPuzzle>.TrySolve
  fullName.vb: SudokuSpice.IPuzzleSolver(Of TPuzzle).TrySolve
  nameWithType: IPuzzleSolver<TPuzzle>.TrySolve
  nameWithType.vb: IPuzzleSolver(Of TPuzzle).TrySolve
- uid: SudokuSpice.IReadOnlyPuzzle
  name: IReadOnlyPuzzle
  href: api/SudokuSpice.IReadOnlyPuzzle.html
  commentId: T:SudokuSpice.IReadOnlyPuzzle
  fullName: SudokuSpice.IReadOnlyPuzzle
  nameWithType: IReadOnlyPuzzle
- uid: SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  name: AllPossibleValuesSpan
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_AllPossibleValuesSpan
  commentId: P:SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  fullName: SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  nameWithType: IReadOnlyPuzzle.AllPossibleValuesSpan
- uid: SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan*
  name: AllPossibleValuesSpan
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_AllPossibleValuesSpan_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.AllPossibleValuesSpan
  nameWithType: IReadOnlyPuzzle.AllPossibleValuesSpan
- uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  name: GetUnsetCoords()
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_GetUnsetCoords
  commentId: M:SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords()
  nameWithType: IReadOnlyPuzzle.GetUnsetCoords()
- uid: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords*
  name: GetUnsetCoords
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_GetUnsetCoords_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.GetUnsetCoords
  nameWithType: IReadOnlyPuzzle.GetUnsetCoords
- uid: SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  name: Item[Coordinate]
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_Item_SudokuSpice_Coordinate__
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Item(SudokuSpice.Coordinate@)
  name.vb: Item(ByRef Coordinate)
  fullName: SudokuSpice.IReadOnlyPuzzle.Item[SudokuSpice.Coordinate]
  fullName.vb: SudokuSpice.IReadOnlyPuzzle.Item(ByRef SudokuSpice.Coordinate)
  nameWithType: IReadOnlyPuzzle.Item[Coordinate]
  nameWithType.vb: IReadOnlyPuzzle.Item(ByRef Coordinate)
- uid: SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  name: Item[Int32, Int32]
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_Item_System_Int32_System_Int32_
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Item(System.Int32,System.Int32)
  name.vb: Item(Int32, Int32)
  fullName: SudokuSpice.IReadOnlyPuzzle.Item[System.Int32, System.Int32]
  fullName.vb: SudokuSpice.IReadOnlyPuzzle.Item(System.Int32, System.Int32)
  nameWithType: IReadOnlyPuzzle.Item[Int32, Int32]
  nameWithType.vb: IReadOnlyPuzzle.Item(Int32, Int32)
- uid: SudokuSpice.IReadOnlyPuzzle.Item*
  name: Item
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_Item_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.Item
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.Item
  nameWithType: IReadOnlyPuzzle.Item
- uid: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  name: NumEmptySquares
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_NumEmptySquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  nameWithType: IReadOnlyPuzzle.NumEmptySquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares*
  name: NumEmptySquares
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_NumEmptySquares_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.NumEmptySquares
  nameWithType: IReadOnlyPuzzle.NumEmptySquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  name: NumSetSquares
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_NumSetSquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  nameWithType: IReadOnlyPuzzle.NumSetSquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumSetSquares*
  name: NumSetSquares
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_NumSetSquares_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSetSquares
  nameWithType: IReadOnlyPuzzle.NumSetSquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumSquares
  name: NumSquares
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_NumSquares
  commentId: P:SudokuSpice.IReadOnlyPuzzle.NumSquares
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSquares
  nameWithType: IReadOnlyPuzzle.NumSquares
- uid: SudokuSpice.IReadOnlyPuzzle.NumSquares*
  name: NumSquares
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_NumSquares_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.NumSquares
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.NumSquares
  nameWithType: IReadOnlyPuzzle.NumSquares
- uid: SudokuSpice.IReadOnlyPuzzle.Size
  name: Size
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_Size
  commentId: P:SudokuSpice.IReadOnlyPuzzle.Size
  fullName: SudokuSpice.IReadOnlyPuzzle.Size
  nameWithType: IReadOnlyPuzzle.Size
- uid: SudokuSpice.IReadOnlyPuzzle.Size*
  name: Size
  href: api/SudokuSpice.IReadOnlyPuzzle.html#SudokuSpice_IReadOnlyPuzzle_Size_
  commentId: Overload:SudokuSpice.IReadOnlyPuzzle.Size
  isSpec: "True"
  fullName: SudokuSpice.IReadOnlyPuzzle.Size
  nameWithType: IReadOnlyPuzzle.Size
- uid: SudokuSpice.MagicSquares
  name: MagicSquares
  href: api/SudokuSpice.MagicSquares.html
  commentId: T:SudokuSpice.MagicSquares
  fullName: SudokuSpice.MagicSquares
  nameWithType: MagicSquares
- uid: SudokuSpice.MagicSquares.ComputeSets(ReadOnlySpan{System.Int32})
  name: ComputeSets(ReadOnlySpan<Int32>)
  href: api/SudokuSpice.MagicSquares.html#SudokuSpice_MagicSquares_ComputeSets_ReadOnlySpan_System_Int32__
  commentId: M:SudokuSpice.MagicSquares.ComputeSets(ReadOnlySpan{System.Int32})
  name.vb: ComputeSets(ReadOnlySpan(Of Int32))
  fullName: SudokuSpice.MagicSquares.ComputeSets(ReadOnlySpan<System.Int32>)
  fullName.vb: SudokuSpice.MagicSquares.ComputeSets(ReadOnlySpan(Of System.Int32))
  nameWithType: MagicSquares.ComputeSets(ReadOnlySpan<Int32>)
  nameWithType.vb: MagicSquares.ComputeSets(ReadOnlySpan(Of Int32))
- uid: SudokuSpice.MagicSquares.ComputeSets(ReadOnlySpan{System.Int32},System.Int32,SudokuSpice.BitVector)
  name: ComputeSets(ReadOnlySpan<Int32>, Int32, BitVector)
  href: api/SudokuSpice.MagicSquares.html#SudokuSpice_MagicSquares_ComputeSets_ReadOnlySpan_System_Int32__System_Int32_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.MagicSquares.ComputeSets(ReadOnlySpan{System.Int32},System.Int32,SudokuSpice.BitVector)
  name.vb: ComputeSets(ReadOnlySpan(Of Int32), Int32, BitVector)
  fullName: SudokuSpice.MagicSquares.ComputeSets(ReadOnlySpan<System.Int32>, System.Int32, SudokuSpice.BitVector)
  fullName.vb: SudokuSpice.MagicSquares.ComputeSets(ReadOnlySpan(Of System.Int32), System.Int32, SudokuSpice.BitVector)
  nameWithType: MagicSquares.ComputeSets(ReadOnlySpan<Int32>, Int32, BitVector)
  nameWithType.vb: MagicSquares.ComputeSets(ReadOnlySpan(Of Int32), Int32, BitVector)
- uid: SudokuSpice.MagicSquares.ComputeSets*
  name: ComputeSets
  href: api/SudokuSpice.MagicSquares.html#SudokuSpice_MagicSquares_ComputeSets_
  commentId: Overload:SudokuSpice.MagicSquares.ComputeSets
  isSpec: "True"
  fullName: SudokuSpice.MagicSquares.ComputeSets
  nameWithType: MagicSquares.ComputeSets
- uid: SudokuSpice.MagicSquares.ComputeSum(ReadOnlySpan{System.Int32})
  name: ComputeSum(ReadOnlySpan<Int32>)
  href: api/SudokuSpice.MagicSquares.html#SudokuSpice_MagicSquares_ComputeSum_ReadOnlySpan_System_Int32__
  commentId: M:SudokuSpice.MagicSquares.ComputeSum(ReadOnlySpan{System.Int32})
  name.vb: ComputeSum(ReadOnlySpan(Of Int32))
  fullName: SudokuSpice.MagicSquares.ComputeSum(ReadOnlySpan<System.Int32>)
  fullName.vb: SudokuSpice.MagicSquares.ComputeSum(ReadOnlySpan(Of System.Int32))
  nameWithType: MagicSquares.ComputeSum(ReadOnlySpan<Int32>)
  nameWithType.vb: MagicSquares.ComputeSum(ReadOnlySpan(Of Int32))
- uid: SudokuSpice.MagicSquares.ComputeSum*
  name: ComputeSum
  href: api/SudokuSpice.MagicSquares.html#SudokuSpice_MagicSquares_ComputeSum_
  commentId: Overload:SudokuSpice.MagicSquares.ComputeSum
  isSpec: "True"
  fullName: SudokuSpice.MagicSquares.ComputeSum
  nameWithType: MagicSquares.ComputeSum
- uid: SudokuSpice.Puzzle
  name: Puzzle
  href: api/SudokuSpice.Puzzle.html
  commentId: T:SudokuSpice.Puzzle
  fullName: SudokuSpice.Puzzle
  nameWithType: Puzzle
- uid: SudokuSpice.Puzzle.#ctor(SudokuSpice.Puzzle)
  name: Puzzle(Puzzle)
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle__ctor_SudokuSpice_Puzzle_
  commentId: M:SudokuSpice.Puzzle.#ctor(SudokuSpice.Puzzle)
  fullName: SudokuSpice.Puzzle.Puzzle(SudokuSpice.Puzzle)
  nameWithType: Puzzle.Puzzle(Puzzle)
- uid: SudokuSpice.Puzzle.#ctor(System.Int32)
  name: Puzzle(Int32)
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle__ctor_System_Int32_
  commentId: M:SudokuSpice.Puzzle.#ctor(System.Int32)
  fullName: SudokuSpice.Puzzle.Puzzle(System.Int32)
  nameWithType: Puzzle.Puzzle(Int32)
- uid: SudokuSpice.Puzzle.#ctor(System.Nullable{System.Int32}[0:,0:])
  name: Puzzle(Nullable<Int32>[,])
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle__ctor_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.Puzzle.#ctor(System.Nullable{System.Int32}[0:,0:])
  name.vb: Puzzle(Nullable(Of Int32)(,))
  fullName: SudokuSpice.Puzzle.Puzzle(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.Puzzle.Puzzle(System.Nullable(Of System.Int32)(,))
  nameWithType: Puzzle.Puzzle(Nullable<Int32>[,])
  nameWithType.vb: Puzzle.Puzzle(Nullable(Of Int32)(,))
- uid: SudokuSpice.Puzzle.#ctor*
  name: Puzzle
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle__ctor_
  commentId: Overload:SudokuSpice.Puzzle.#ctor
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.Puzzle
  nameWithType: Puzzle.Puzzle
- uid: SudokuSpice.Puzzle.AllPossibleValuesSpan
  name: AllPossibleValuesSpan
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_AllPossibleValuesSpan
  commentId: P:SudokuSpice.Puzzle.AllPossibleValuesSpan
  fullName: SudokuSpice.Puzzle.AllPossibleValuesSpan
  nameWithType: Puzzle.AllPossibleValuesSpan
- uid: SudokuSpice.Puzzle.AllPossibleValuesSpan*
  name: AllPossibleValuesSpan
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_AllPossibleValuesSpan_
  commentId: Overload:SudokuSpice.Puzzle.AllPossibleValuesSpan
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.AllPossibleValuesSpan
  nameWithType: Puzzle.AllPossibleValuesSpan
- uid: SudokuSpice.Puzzle.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  name: CopyFrom(Nullable<Int32>[,])
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_CopyFrom_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.Puzzle.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  name.vb: CopyFrom(Nullable(Of Int32)(,))
  fullName: SudokuSpice.Puzzle.CopyFrom(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.Puzzle.CopyFrom(System.Nullable(Of System.Int32)(,))
  nameWithType: Puzzle.CopyFrom(Nullable<Int32>[,])
  nameWithType.vb: Puzzle.CopyFrom(Nullable(Of Int32)(,))
- uid: SudokuSpice.Puzzle.CopyFrom*
  name: CopyFrom
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_CopyFrom_
  commentId: Overload:SudokuSpice.Puzzle.CopyFrom
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.CopyFrom
  nameWithType: Puzzle.CopyFrom
- uid: SudokuSpice.Puzzle.DeepCopy
  name: DeepCopy()
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_DeepCopy
  commentId: M:SudokuSpice.Puzzle.DeepCopy
  fullName: SudokuSpice.Puzzle.DeepCopy()
  nameWithType: Puzzle.DeepCopy()
- uid: SudokuSpice.Puzzle.DeepCopy*
  name: DeepCopy
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_DeepCopy_
  commentId: Overload:SudokuSpice.Puzzle.DeepCopy
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.DeepCopy
  nameWithType: Puzzle.DeepCopy
- uid: SudokuSpice.Puzzle.GetUnsetCoords
  name: GetUnsetCoords()
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_GetUnsetCoords
  commentId: M:SudokuSpice.Puzzle.GetUnsetCoords
  fullName: SudokuSpice.Puzzle.GetUnsetCoords()
  nameWithType: Puzzle.GetUnsetCoords()
- uid: SudokuSpice.Puzzle.GetUnsetCoords*
  name: GetUnsetCoords
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_GetUnsetCoords_
  commentId: Overload:SudokuSpice.Puzzle.GetUnsetCoords
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.GetUnsetCoords
  nameWithType: Puzzle.GetUnsetCoords
- uid: SudokuSpice.Puzzle.Item(SudokuSpice.Coordinate@)
  name: Item[Coordinate]
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_Item_SudokuSpice_Coordinate__
  commentId: P:SudokuSpice.Puzzle.Item(SudokuSpice.Coordinate@)
  name.vb: Item(ByRef Coordinate)
  fullName: SudokuSpice.Puzzle.Item[SudokuSpice.Coordinate]
  fullName.vb: SudokuSpice.Puzzle.Item(ByRef SudokuSpice.Coordinate)
  nameWithType: Puzzle.Item[Coordinate]
  nameWithType.vb: Puzzle.Item(ByRef Coordinate)
- uid: SudokuSpice.Puzzle.Item(System.Int32,System.Int32)
  name: Item[Int32, Int32]
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_Item_System_Int32_System_Int32_
  commentId: P:SudokuSpice.Puzzle.Item(System.Int32,System.Int32)
  name.vb: Item(Int32, Int32)
  fullName: SudokuSpice.Puzzle.Item[System.Int32, System.Int32]
  fullName.vb: SudokuSpice.Puzzle.Item(System.Int32, System.Int32)
  nameWithType: Puzzle.Item[Int32, Int32]
  nameWithType.vb: Puzzle.Item(Int32, Int32)
- uid: SudokuSpice.Puzzle.Item*
  name: Item
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_Item_
  commentId: Overload:SudokuSpice.Puzzle.Item
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.Item
  nameWithType: Puzzle.Item
- uid: SudokuSpice.Puzzle.NumEmptySquares
  name: NumEmptySquares
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_NumEmptySquares
  commentId: P:SudokuSpice.Puzzle.NumEmptySquares
  fullName: SudokuSpice.Puzzle.NumEmptySquares
  nameWithType: Puzzle.NumEmptySquares
- uid: SudokuSpice.Puzzle.NumEmptySquares*
  name: NumEmptySquares
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_NumEmptySquares_
  commentId: Overload:SudokuSpice.Puzzle.NumEmptySquares
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.NumEmptySquares
  nameWithType: Puzzle.NumEmptySquares
- uid: SudokuSpice.Puzzle.NumSetSquares
  name: NumSetSquares
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_NumSetSquares
  commentId: P:SudokuSpice.Puzzle.NumSetSquares
  fullName: SudokuSpice.Puzzle.NumSetSquares
  nameWithType: Puzzle.NumSetSquares
- uid: SudokuSpice.Puzzle.NumSetSquares*
  name: NumSetSquares
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_NumSetSquares_
  commentId: Overload:SudokuSpice.Puzzle.NumSetSquares
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.NumSetSquares
  nameWithType: Puzzle.NumSetSquares
- uid: SudokuSpice.Puzzle.NumSquares
  name: NumSquares
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_NumSquares
  commentId: P:SudokuSpice.Puzzle.NumSquares
  fullName: SudokuSpice.Puzzle.NumSquares
  nameWithType: Puzzle.NumSquares
- uid: SudokuSpice.Puzzle.NumSquares*
  name: NumSquares
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_NumSquares_
  commentId: Overload:SudokuSpice.Puzzle.NumSquares
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.NumSquares
  nameWithType: Puzzle.NumSquares
- uid: SudokuSpice.Puzzle.Size
  name: Size
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_Size
  commentId: P:SudokuSpice.Puzzle.Size
  fullName: SudokuSpice.Puzzle.Size
  nameWithType: Puzzle.Size
- uid: SudokuSpice.Puzzle.Size*
  name: Size
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_Size_
  commentId: Overload:SudokuSpice.Puzzle.Size
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.Size
  nameWithType: Puzzle.Size
- uid: SudokuSpice.Puzzle.ToString
  name: ToString()
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_ToString
  commentId: M:SudokuSpice.Puzzle.ToString
  fullName: SudokuSpice.Puzzle.ToString()
  nameWithType: Puzzle.ToString()
- uid: SudokuSpice.Puzzle.ToString*
  name: ToString
  href: api/SudokuSpice.Puzzle.html#SudokuSpice_Puzzle_ToString_
  commentId: Overload:SudokuSpice.Puzzle.ToString
  isSpec: "True"
  fullName: SudokuSpice.Puzzle.ToString
  nameWithType: Puzzle.ToString
- uid: SudokuSpice.PuzzleGenerator`1
  name: PuzzleGenerator<TPuzzle>
  href: api/SudokuSpice.PuzzleGenerator-1.html
  commentId: T:SudokuSpice.PuzzleGenerator`1
  name.vb: PuzzleGenerator(Of TPuzzle)
  fullName: SudokuSpice.PuzzleGenerator<TPuzzle>
  fullName.vb: SudokuSpice.PuzzleGenerator(Of TPuzzle)
  nameWithType: PuzzleGenerator<TPuzzle>
  nameWithType.vb: PuzzleGenerator(Of TPuzzle)
- uid: SudokuSpice.PuzzleGenerator`1.#ctor(Func{System.Int32,`0},SudokuSpice.IPuzzleSolver{`0})
  name: PuzzleGenerator(Func<Int32, TPuzzle>, IPuzzleSolver<TPuzzle>)
  href: api/SudokuSpice.PuzzleGenerator-1.html#SudokuSpice_PuzzleGenerator_1__ctor_Func_System_Int32__0__SudokuSpice_IPuzzleSolver__0__
  commentId: M:SudokuSpice.PuzzleGenerator`1.#ctor(Func{System.Int32,`0},SudokuSpice.IPuzzleSolver{`0})
  name.vb: PuzzleGenerator(Func(Of Int32, TPuzzle), IPuzzleSolver(Of TPuzzle))
  fullName: SudokuSpice.PuzzleGenerator<TPuzzle>.PuzzleGenerator(Func<System.Int32, TPuzzle>, SudokuSpice.IPuzzleSolver<TPuzzle>)
  fullName.vb: SudokuSpice.PuzzleGenerator(Of TPuzzle).PuzzleGenerator(Func(Of System.Int32, TPuzzle), SudokuSpice.IPuzzleSolver(Of TPuzzle))
  nameWithType: PuzzleGenerator<TPuzzle>.PuzzleGenerator(Func<Int32, TPuzzle>, IPuzzleSolver<TPuzzle>)
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).PuzzleGenerator(Func(Of Int32, TPuzzle), IPuzzleSolver(Of TPuzzle))
- uid: SudokuSpice.PuzzleGenerator`1.#ctor*
  name: PuzzleGenerator
  href: api/SudokuSpice.PuzzleGenerator-1.html#SudokuSpice_PuzzleGenerator_1__ctor_
  commentId: Overload:SudokuSpice.PuzzleGenerator`1.#ctor
  isSpec: "True"
  fullName: SudokuSpice.PuzzleGenerator<TPuzzle>.PuzzleGenerator
  fullName.vb: SudokuSpice.PuzzleGenerator(Of TPuzzle).PuzzleGenerator
  nameWithType: PuzzleGenerator<TPuzzle>.PuzzleGenerator
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).PuzzleGenerator
- uid: SudokuSpice.PuzzleGenerator`1.Generate(System.Int32,System.Int32,TimeSpan)
  name: Generate(Int32, Int32, TimeSpan)
  href: api/SudokuSpice.PuzzleGenerator-1.html#SudokuSpice_PuzzleGenerator_1_Generate_System_Int32_System_Int32_TimeSpan_
  commentId: M:SudokuSpice.PuzzleGenerator`1.Generate(System.Int32,System.Int32,TimeSpan)
  fullName: SudokuSpice.PuzzleGenerator<TPuzzle>.Generate(System.Int32, System.Int32, TimeSpan)
  fullName.vb: SudokuSpice.PuzzleGenerator(Of TPuzzle).Generate(System.Int32, System.Int32, TimeSpan)
  nameWithType: PuzzleGenerator<TPuzzle>.Generate(Int32, Int32, TimeSpan)
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).Generate(Int32, Int32, TimeSpan)
- uid: SudokuSpice.PuzzleGenerator`1.Generate*
  name: Generate
  href: api/SudokuSpice.PuzzleGenerator-1.html#SudokuSpice_PuzzleGenerator_1_Generate_
  commentId: Overload:SudokuSpice.PuzzleGenerator`1.Generate
  isSpec: "True"
  fullName: SudokuSpice.PuzzleGenerator<TPuzzle>.Generate
  fullName.vb: SudokuSpice.PuzzleGenerator(Of TPuzzle).Generate
  nameWithType: PuzzleGenerator<TPuzzle>.Generate
  nameWithType.vb: PuzzleGenerator(Of TPuzzle).Generate
- uid: SudokuSpice.RuleBased
  name: SudokuSpice.RuleBased
  href: api/SudokuSpice.RuleBased.html
  commentId: N:SudokuSpice.RuleBased
  fullName: SudokuSpice.RuleBased
  nameWithType: SudokuSpice.RuleBased
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper
  name: DynamicRuleKeeper
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html
  commentId: T:SudokuSpice.RuleBased.DynamicRuleKeeper
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper
  nameWithType: DynamicRuleKeeper
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor(IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  name: DynamicRuleKeeper(IReadOnlyList<IRule>)
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper__ctor_IReadOnlyList_SudokuSpice_RuleBased_Rules_IRule__
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor(IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  name.vb: DynamicRuleKeeper(IReadOnlyList(Of IRule))
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.DynamicRuleKeeper(IReadOnlyList<SudokuSpice.RuleBased.Rules.IRule>)
  fullName.vb: SudokuSpice.RuleBased.DynamicRuleKeeper.DynamicRuleKeeper(IReadOnlyList(Of SudokuSpice.RuleBased.Rules.IRule))
  nameWithType: DynamicRuleKeeper.DynamicRuleKeeper(IReadOnlyList<IRule>)
  nameWithType.vb: DynamicRuleKeeper.DynamicRuleKeeper(IReadOnlyList(Of IRule))
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor*
  name: DynamicRuleKeeper
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper__ctor_
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.DynamicRuleKeeper
  nameWithType: DynamicRuleKeeper.DynamicRuleKeeper
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: DynamicRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.CopyWithNewReferences
  nameWithType: DynamicRuleKeeper.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
  name: GetRules()
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_GetRules
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules()
  nameWithType: DynamicRuleKeeper.GetRules()
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules*
  name: GetRules
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_GetRules_
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.GetRules
  nameWithType: DynamicRuleKeeper.GetRules
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: DynamicRuleKeeper.TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.TryInit
  nameWithType: DynamicRuleKeeper.TryInit
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  name: TrySet(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_TrySet_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  name.vb: TrySet(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: DynamicRuleKeeper.TrySet(Coordinate, Int32)
  nameWithType.vb: DynamicRuleKeeper.TrySet(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet*
  name: TrySet
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_TrySet_
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.TrySet
  nameWithType: DynamicRuleKeeper.TrySet
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  name: Unset(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_Unset_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Unset(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: DynamicRuleKeeper.Unset(Coordinate, Int32)
  nameWithType.vb: DynamicRuleKeeper.Unset(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset*
  name: Unset
  href: api/SudokuSpice.RuleBased.DynamicRuleKeeper.html#SudokuSpice_RuleBased_DynamicRuleKeeper_Unset_
  commentId: Overload:SudokuSpice.RuleBased.DynamicRuleKeeper.Unset
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.DynamicRuleKeeper.Unset
  nameWithType: DynamicRuleKeeper.Unset
- uid: SudokuSpice.RuleBased.Heuristics
  name: SudokuSpice.RuleBased.Heuristics
  href: api/SudokuSpice.RuleBased.Heuristics.html
  commentId: N:SudokuSpice.RuleBased.Heuristics
  fullName: SudokuSpice.RuleBased.Heuristics
  nameWithType: SudokuSpice.RuleBased.Heuristics
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic
  name: IHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.IHeuristic.html
  commentId: T:SudokuSpice.RuleBased.Heuristics.IHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic
  nameWithType: IHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  href: api/SudokuSpice.RuleBased.Heuristics.IHeuristic.html#SudokuSpice_RuleBased_Heuristics_IHeuristic_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_IReadOnlyList_SudokuSpice_RuleBased_Rules_IRule__
  commentId: M:SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<SudokuSpice.RuleBased.Rules.IRule>)
  fullName.vb: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of SudokuSpice.RuleBased.Rules.IRule))
  nameWithType: IHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  nameWithType.vb: IHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.Heuristics.IHeuristic.html#SudokuSpice_RuleBased_Heuristics_IHeuristic_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.CopyWithNewReferences
  nameWithType: IHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.Heuristics.IHeuristic.html#SudokuSpice_RuleBased_Heuristics_IHeuristic_TryInitFor_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: IHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor*
  name: TryInitFor
  href: api/SudokuSpice.RuleBased.Heuristics.IHeuristic.html#SudokuSpice_RuleBased_Heuristics_IHeuristic_TryInitFor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.TryInitFor
  nameWithType: IHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  name: UndoLastUpdate()
  href: api/SudokuSpice.RuleBased.Heuristics.IHeuristic.html#SudokuSpice_RuleBased_Heuristics_IHeuristic_UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate()
  nameWithType: IHeuristic.UndoLastUpdate()
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate*
  name: UndoLastUpdate
  href: api/SudokuSpice.RuleBased.Heuristics.IHeuristic.html#SudokuSpice_RuleBased_Heuristics_IHeuristic_UndoLastUpdate_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UndoLastUpdate
  nameWithType: IHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  name: UpdateAll()
  href: api/SudokuSpice.RuleBased.Heuristics.IHeuristic.html#SudokuSpice_RuleBased_Heuristics_IHeuristic_UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll()
  nameWithType: IHeuristic.UpdateAll()
- uid: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll*
  name: UpdateAll
  href: api/SudokuSpice.RuleBased.Heuristics.IHeuristic.html#SudokuSpice_RuleBased_Heuristics_IHeuristic_UpdateAll_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.IHeuristic.UpdateAll
  nameWithType: IHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  name: StandardHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html
  commentId: T:SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic
  nameWithType: StandardHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker,SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker,SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  name: StandardHeuristic(IMissingRowValuesTracker, IMissingColumnValuesTracker, IMissingBoxValuesTracker)
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic__ctor_SudokuSpice_RuleBased_Rules_IMissingRowValuesTracker_SudokuSpice_RuleBased_Rules_IMissingColumnValuesTracker_SudokuSpice_RuleBased_Rules_IMissingBoxValuesTracker_
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker,SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker,SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.StandardHeuristic(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker, SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker, SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  nameWithType: StandardHeuristic.StandardHeuristic(IMissingRowValuesTracker, IMissingColumnValuesTracker, IMissingBoxValuesTracker)
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor*
  name: StandardHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.StandardHeuristic
  nameWithType: StandardHeuristic.StandardHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_IReadOnlyList_SudokuSpice_RuleBased_Rules_IRule__
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<SudokuSpice.RuleBased.Rules.IRule>)
  fullName.vb: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of SudokuSpice.RuleBased.Rules.IRule))
  nameWithType: StandardHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  nameWithType.vb: StandardHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.CopyWithNewReferences
  nameWithType: StandardHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_TryInitFor_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: StandardHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor*
  name: TryInitFor
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_TryInitFor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.TryInitFor
  nameWithType: StandardHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
  name: UndoLastUpdate()
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate()
  nameWithType: StandardHeuristic.UndoLastUpdate()
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate*
  name: UndoLastUpdate
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_UndoLastUpdate_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UndoLastUpdate
  nameWithType: StandardHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
  name: UpdateAll()
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll()
  nameWithType: StandardHeuristic.UpdateAll()
- uid: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll*
  name: UpdateAll
  href: api/SudokuSpice.RuleBased.Heuristics.StandardHeuristic.html#SudokuSpice_RuleBased_Heuristics_StandardHeuristic_UpdateAll_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.StandardHeuristic.UpdateAll
  nameWithType: StandardHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  name: UniqueInBoxHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic
  nameWithType: UniqueInBoxHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  name: UniqueInBoxHeuristic(IMissingBoxValuesTracker)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic__ctor_SudokuSpice_RuleBased_Rules_IMissingBoxValuesTracker_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UniqueInBoxHeuristic(SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker)
  nameWithType: UniqueInBoxHeuristic.UniqueInBoxHeuristic(IMissingBoxValuesTracker)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor*
  name: UniqueInBoxHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UniqueInBoxHeuristic
  nameWithType: UniqueInBoxHeuristic.UniqueInBoxHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_IReadOnlyList_SudokuSpice_RuleBased_Rules_IRule__
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<SudokuSpice.RuleBased.Rules.IRule>)
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of SudokuSpice.RuleBased.Rules.IRule))
  nameWithType: UniqueInBoxHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  nameWithType.vb: UniqueInBoxHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.CopyWithNewReferences
  nameWithType: UniqueInBoxHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_TryInitFor_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInBoxHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor*
  name: TryInitFor
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_TryInitFor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.TryInitFor
  nameWithType: UniqueInBoxHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate
  name: UndoLastUpdate()
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate()
  nameWithType: UniqueInBoxHeuristic.UndoLastUpdate()
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate*
  name: UndoLastUpdate
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_UndoLastUpdate_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UndoLastUpdate
  nameWithType: UniqueInBoxHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll
  name: UpdateAll()
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll()
  nameWithType: UniqueInBoxHeuristic.UpdateAll()
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll*
  name: UpdateAll
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInBoxHeuristic_UpdateAll_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInBoxHeuristic.UpdateAll
  nameWithType: UniqueInBoxHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic
  name: UniqueInColumnHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic
  nameWithType: UniqueInColumnHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker)
  name: UniqueInColumnHeuristic(IMissingColumnValuesTracker)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic__ctor_SudokuSpice_RuleBased_Rules_IMissingColumnValuesTracker_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UniqueInColumnHeuristic(SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker)
  nameWithType: UniqueInColumnHeuristic.UniqueInColumnHeuristic(IMissingColumnValuesTracker)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.#ctor*
  name: UniqueInColumnHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UniqueInColumnHeuristic
  nameWithType: UniqueInColumnHeuristic.UniqueInColumnHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_IReadOnlyList_SudokuSpice_RuleBased_Rules_IRule__
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<SudokuSpice.RuleBased.Rules.IRule>)
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of SudokuSpice.RuleBased.Rules.IRule))
  nameWithType: UniqueInColumnHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  nameWithType.vb: UniqueInColumnHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.CopyWithNewReferences
  nameWithType: UniqueInColumnHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_TryInitFor_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInColumnHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.TryInitFor*
  name: TryInitFor
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_TryInitFor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.TryInitFor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.TryInitFor
  nameWithType: UniqueInColumnHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UndoLastUpdate
  name: UndoLastUpdate()
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UndoLastUpdate()
  nameWithType: UniqueInColumnHeuristic.UndoLastUpdate()
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UndoLastUpdate*
  name: UndoLastUpdate
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_UndoLastUpdate_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UndoLastUpdate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UndoLastUpdate
  nameWithType: UniqueInColumnHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UpdateAll
  name: UpdateAll()
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UpdateAll()
  nameWithType: UniqueInColumnHeuristic.UpdateAll()
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UpdateAll*
  name: UpdateAll
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInColumnHeuristic_UpdateAll_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UpdateAll
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInColumnHeuristic.UpdateAll
  nameWithType: UniqueInColumnHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  name: UniqueInRowHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic
  nameWithType: UniqueInRowHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  name: UniqueInRowHeuristic(IMissingRowValuesTracker)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic__ctor_SudokuSpice_RuleBased_Rules_IMissingRowValuesTracker_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UniqueInRowHeuristic(SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker)
  nameWithType: UniqueInRowHeuristic.UniqueInRowHeuristic(IMissingRowValuesTracker)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor*
  name: UniqueInRowHeuristic
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UniqueInRowHeuristic
  nameWithType: UniqueInRowHeuristic.UniqueInRowHeuristic
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_IReadOnlyList_SudokuSpice_RuleBased_Rules_IRule__
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues,IReadOnlyList{SudokuSpice.RuleBased.Rules.IRule})
  name.vb: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<SudokuSpice.RuleBased.Rules.IRule>)
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of SudokuSpice.RuleBased.Rules.IRule))
  nameWithType: UniqueInRowHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList<IRule>)
  nameWithType.vb: UniqueInRowHeuristic.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues, IReadOnlyList(Of IRule))
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.CopyWithNewReferences
  nameWithType: UniqueInRowHeuristic.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_TryInitFor_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInRowHeuristic.TryInitFor(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor*
  name: TryInitFor
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_TryInitFor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.TryInitFor
  nameWithType: UniqueInRowHeuristic.TryInitFor
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
  name: UndoLastUpdate()
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate()
  nameWithType: UniqueInRowHeuristic.UndoLastUpdate()
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate*
  name: UndoLastUpdate
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_UndoLastUpdate_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UndoLastUpdate
  nameWithType: UniqueInRowHeuristic.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
  name: UpdateAll()
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_UpdateAll
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll()
  nameWithType: UniqueInRowHeuristic.UpdateAll()
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll*
  name: UpdateAll
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.html#SudokuSpice_RuleBased_Heuristics_UniqueInRowHeuristic_UpdateAll_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInRowHeuristic.UpdateAll
  nameWithType: UniqueInRowHeuristic.UpdateAll
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
  name: UniqueInXHelper
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.html
  commentId: T:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper
  nameWithType: UniqueInXHelper
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.#ctor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: UniqueInXHelper(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHelper__ctor_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.#ctor(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UniqueInXHelper(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInXHelper.UniqueInXHelper(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.#ctor*
  name: UniqueInXHelper
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHelper__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UniqueInXHelper
  nameWithType: UniqueInXHelper.UniqueInXHelper
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: CopyWithNewReference(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHelper_CopyWithNewReference_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: UniqueInXHelper.CopyWithNewReference(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHelper_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.CopyWithNewReference
  nameWithType: UniqueInXHelper.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate
  name: UndoLastUpdate()
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHelper_UndoLastUpdate
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate()
  nameWithType: UniqueInXHelper.UndoLastUpdate()
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate*
  name: UndoLastUpdate
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHelper_UndoLastUpdate_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UndoLastUpdate
  nameWithType: UniqueInXHelper.UndoLastUpdate
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique(ReadOnlySpan{SudokuSpice.BitVector},ReadOnlySpan{SudokuSpice.Coordinate[]})
  name: UpdateIfUnique(ReadOnlySpan<BitVector>, ReadOnlySpan<Coordinate[]>)
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHelper_UpdateIfUnique_ReadOnlySpan_SudokuSpice_BitVector__ReadOnlySpan_SudokuSpice_Coordinate____
  commentId: M:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique(ReadOnlySpan{SudokuSpice.BitVector},ReadOnlySpan{SudokuSpice.Coordinate[]})
  name.vb: UpdateIfUnique(ReadOnlySpan(Of BitVector), ReadOnlySpan(Of Coordinate()))
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique(ReadOnlySpan<SudokuSpice.BitVector>, ReadOnlySpan<SudokuSpice.Coordinate[]>)
  fullName.vb: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique(ReadOnlySpan(Of SudokuSpice.BitVector), ReadOnlySpan(Of SudokuSpice.Coordinate()))
  nameWithType: UniqueInXHelper.UpdateIfUnique(ReadOnlySpan<BitVector>, ReadOnlySpan<Coordinate[]>)
  nameWithType.vb: UniqueInXHelper.UpdateIfUnique(ReadOnlySpan(Of BitVector), ReadOnlySpan(Of Coordinate()))
- uid: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique*
  name: UpdateIfUnique
  href: api/SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.html#SudokuSpice_RuleBased_Heuristics_UniqueInXHelper_UpdateIfUnique_
  commentId: Overload:SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Heuristics.UniqueInXHelper.UpdateIfUnique
  nameWithType: UniqueInXHelper.UpdateIfUnique
- uid: SudokuSpice.RuleBased.IPossibleValues
  name: IPossibleValues
  href: api/SudokuSpice.RuleBased.IPossibleValues.html
  commentId: T:SudokuSpice.RuleBased.IPossibleValues
  fullName: SudokuSpice.RuleBased.IPossibleValues
  nameWithType: IPossibleValues
- uid: SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  name: IntersectPossibleValues(Coordinate, BitVector)
  href: api/SudokuSpice.RuleBased.IPossibleValues.html#SudokuSpice_RuleBased_IPossibleValues_IntersectPossibleValues_SudokuSpice_Coordinate__SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  name.vb: IntersectPossibleValues(ByRef Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate, SudokuSpice.BitVector)
  fullName.vb: SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues(ByRef SudokuSpice.Coordinate, SudokuSpice.BitVector)
  nameWithType: IPossibleValues.IntersectPossibleValues(Coordinate, BitVector)
  nameWithType.vb: IPossibleValues.IntersectPossibleValues(ByRef Coordinate, BitVector)
- uid: SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues*
  name: IntersectPossibleValues
  href: api/SudokuSpice.RuleBased.IPossibleValues.html#SudokuSpice_RuleBased_IPossibleValues_IntersectPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IPossibleValues.IntersectPossibleValues
  nameWithType: IPossibleValues.IntersectPossibleValues
- uid: SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  name: ResetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.IPossibleValues.html#SudokuSpice_RuleBased_IPossibleValues_ResetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: ResetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: IPossibleValues.ResetPossibleValues(Coordinate)
  nameWithType.vb: IPossibleValues.ResetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues*
  name: ResetPossibleValues
  href: api/SudokuSpice.RuleBased.IPossibleValues.html#SudokuSpice_RuleBased_IPossibleValues_ResetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IPossibleValues.ResetPossibleValues
  nameWithType: IPossibleValues.ResetPossibleValues
- uid: SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  name: SetPossibleValues(Coordinate, BitVector)
  href: api/SudokuSpice.RuleBased.IPossibleValues.html#SudokuSpice_RuleBased_IPossibleValues_SetPossibleValues_SudokuSpice_Coordinate__SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  name.vb: SetPossibleValues(ByRef Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues(SudokuSpice.Coordinate, SudokuSpice.BitVector)
  fullName.vb: SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues(ByRef SudokuSpice.Coordinate, SudokuSpice.BitVector)
  nameWithType: IPossibleValues.SetPossibleValues(Coordinate, BitVector)
  nameWithType.vb: IPossibleValues.SetPossibleValues(ByRef Coordinate, BitVector)
- uid: SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues*
  name: SetPossibleValues
  href: api/SudokuSpice.RuleBased.IPossibleValues.html#SudokuSpice_RuleBased_IPossibleValues_SetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IPossibleValues.SetPossibleValues
  nameWithType: IPossibleValues.SetPossibleValues
- uid: SudokuSpice.RuleBased.IPuzzleWithPossibleValues`1
  name: IPuzzleWithPossibleValues<T>
  href: api/SudokuSpice.RuleBased.IPuzzleWithPossibleValues-1.html
  commentId: T:SudokuSpice.RuleBased.IPuzzleWithPossibleValues`1
  name.vb: IPuzzleWithPossibleValues(Of T)
  fullName: SudokuSpice.RuleBased.IPuzzleWithPossibleValues<T>
  fullName.vb: SudokuSpice.RuleBased.IPuzzleWithPossibleValues(Of T)
  nameWithType: IPuzzleWithPossibleValues<T>
  nameWithType.vb: IPuzzleWithPossibleValues(Of T)
- uid: SudokuSpice.RuleBased.IReadOnlyPossibleValues
  name: IReadOnlyPossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPossibleValues.html
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPossibleValues
  nameWithType: IReadOnlyPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPossibleValues.AllPossibleValues
  name: AllPossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPossibleValues.html#SudokuSpice_RuleBased_IReadOnlyPossibleValues_AllPossibleValues
  commentId: P:SudokuSpice.RuleBased.IReadOnlyPossibleValues.AllPossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPossibleValues.AllPossibleValues
  nameWithType: IReadOnlyPossibleValues.AllPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPossibleValues.AllPossibleValues*
  name: AllPossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPossibleValues.html#SudokuSpice_RuleBased_IReadOnlyPossibleValues_AllPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPossibleValues.AllPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPossibleValues.AllPossibleValues
  nameWithType: IReadOnlyPossibleValues.AllPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.IReadOnlyPossibleValues.html#SudokuSpice_RuleBased_IReadOnlyPossibleValues_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: IReadOnlyPossibleValues.GetPossibleValues(Coordinate)
  nameWithType.vb: IReadOnlyPossibleValues.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPossibleValues.html#SudokuSpice_RuleBased_IReadOnlyPossibleValues_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IReadOnlyPossibleValues.GetPossibleValues
  nameWithType: IReadOnlyPossibleValues.GetPossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  name: IReadOnlyPuzzleWithMutablePossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues.html
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues
  nameWithType: IReadOnlyPuzzleWithMutablePossibleValues
- uid: SudokuSpice.RuleBased.IReadOnlyPuzzleWithPossibleValues
  name: IReadOnlyPuzzleWithPossibleValues
  href: api/SudokuSpice.RuleBased.IReadOnlyPuzzleWithPossibleValues.html
  commentId: T:SudokuSpice.RuleBased.IReadOnlyPuzzleWithPossibleValues
  fullName: SudokuSpice.RuleBased.IReadOnlyPuzzleWithPossibleValues
  nameWithType: IReadOnlyPuzzleWithPossibleValues
- uid: SudokuSpice.RuleBased.IRuleKeeper
  name: IRuleKeeper
  href: api/SudokuSpice.RuleBased.IRuleKeeper.html
  commentId: T:SudokuSpice.RuleBased.IRuleKeeper
  fullName: SudokuSpice.RuleBased.IRuleKeeper
  nameWithType: IRuleKeeper
- uid: SudokuSpice.RuleBased.IRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.IRuleKeeper.html#SudokuSpice_RuleBased_IRuleKeeper_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.IRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.IRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: IRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.IRuleKeeper.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.IRuleKeeper.html#SudokuSpice_RuleBased_IRuleKeeper_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.IRuleKeeper.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IRuleKeeper.CopyWithNewReferences
  nameWithType: IRuleKeeper.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.IRuleKeeper.GetRules
  name: GetRules()
  href: api/SudokuSpice.RuleBased.IRuleKeeper.html#SudokuSpice_RuleBased_IRuleKeeper_GetRules
  commentId: M:SudokuSpice.RuleBased.IRuleKeeper.GetRules
  fullName: SudokuSpice.RuleBased.IRuleKeeper.GetRules()
  nameWithType: IRuleKeeper.GetRules()
- uid: SudokuSpice.RuleBased.IRuleKeeper.GetRules*
  name: GetRules
  href: api/SudokuSpice.RuleBased.IRuleKeeper.html#SudokuSpice_RuleBased_IRuleKeeper_GetRules_
  commentId: Overload:SudokuSpice.RuleBased.IRuleKeeper.GetRules
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IRuleKeeper.GetRules
  nameWithType: IRuleKeeper.GetRules
- uid: SudokuSpice.RuleBased.IRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.IRuleKeeper.html#SudokuSpice_RuleBased_IRuleKeeper_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.IRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.IRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: IRuleKeeper.TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.IRuleKeeper.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.IRuleKeeper.html#SudokuSpice_RuleBased_IRuleKeeper_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.IRuleKeeper.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IRuleKeeper.TryInit
  nameWithType: IRuleKeeper.TryInit
- uid: SudokuSpice.RuleBased.IRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  name: TrySet(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.IRuleKeeper.html#SudokuSpice_RuleBased_IRuleKeeper_TrySet_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.IRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  name.vb: TrySet(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.IRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.IRuleKeeper.TrySet(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: IRuleKeeper.TrySet(Coordinate, Int32)
  nameWithType.vb: IRuleKeeper.TrySet(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.IRuleKeeper.TrySet*
  name: TrySet
  href: api/SudokuSpice.RuleBased.IRuleKeeper.html#SudokuSpice_RuleBased_IRuleKeeper_TrySet_
  commentId: Overload:SudokuSpice.RuleBased.IRuleKeeper.TrySet
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IRuleKeeper.TrySet
  nameWithType: IRuleKeeper.TrySet
- uid: SudokuSpice.RuleBased.IRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  name: Unset(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.IRuleKeeper.html#SudokuSpice_RuleBased_IRuleKeeper_Unset_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.IRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Unset(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.IRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.IRuleKeeper.Unset(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: IRuleKeeper.Unset(Coordinate, Int32)
  nameWithType.vb: IRuleKeeper.Unset(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.IRuleKeeper.Unset*
  name: Unset
  href: api/SudokuSpice.RuleBased.IRuleKeeper.html#SudokuSpice_RuleBased_IRuleKeeper_Unset_
  commentId: Overload:SudokuSpice.RuleBased.IRuleKeeper.Unset
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.IRuleKeeper.Unset
  nameWithType: IRuleKeeper.Unset
- uid: SudokuSpice.RuleBased.PuzzleSolver`1
  name: PuzzleSolver<TPuzzle>
  href: api/SudokuSpice.RuleBased.PuzzleSolver-1.html
  commentId: T:SudokuSpice.RuleBased.PuzzleSolver`1
  name.vb: PuzzleSolver(Of TPuzzle)
  fullName: SudokuSpice.RuleBased.PuzzleSolver<TPuzzle>
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver(Of TPuzzle)
  nameWithType: PuzzleSolver<TPuzzle>
  nameWithType.vb: PuzzleSolver(Of TPuzzle)
- uid: SudokuSpice.RuleBased.PuzzleSolver`1.#ctor(SudokuSpice.RuleBased.IRuleKeeper,SudokuSpice.RuleBased.Heuristics.IHeuristic)
  name: PuzzleSolver(IRuleKeeper, IHeuristic)
  href: api/SudokuSpice.RuleBased.PuzzleSolver-1.html#SudokuSpice_RuleBased_PuzzleSolver_1__ctor_SudokuSpice_RuleBased_IRuleKeeper_SudokuSpice_RuleBased_Heuristics_IHeuristic_
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver`1.#ctor(SudokuSpice.RuleBased.IRuleKeeper,SudokuSpice.RuleBased.Heuristics.IHeuristic)
  fullName: SudokuSpice.RuleBased.PuzzleSolver<TPuzzle>.PuzzleSolver(SudokuSpice.RuleBased.IRuleKeeper, SudokuSpice.RuleBased.Heuristics.IHeuristic)
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver(Of TPuzzle).PuzzleSolver(SudokuSpice.RuleBased.IRuleKeeper, SudokuSpice.RuleBased.Heuristics.IHeuristic)
  nameWithType: PuzzleSolver<TPuzzle>.PuzzleSolver(IRuleKeeper, IHeuristic)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).PuzzleSolver(IRuleKeeper, IHeuristic)
- uid: SudokuSpice.RuleBased.PuzzleSolver`1.#ctor*
  name: PuzzleSolver
  href: api/SudokuSpice.RuleBased.PuzzleSolver-1.html#SudokuSpice_RuleBased_PuzzleSolver_1__ctor_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver`1.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleSolver<TPuzzle>.PuzzleSolver
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver(Of TPuzzle).PuzzleSolver
  nameWithType: PuzzleSolver<TPuzzle>.PuzzleSolver
  nameWithType.vb: PuzzleSolver(Of TPuzzle).PuzzleSolver
- uid: SudokuSpice.RuleBased.PuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{CancellationToken})
  name: ComputeStatsForAllSolutions(TPuzzle, Nullable<CancellationToken>)
  href: api/SudokuSpice.RuleBased.PuzzleSolver-1.html#SudokuSpice_RuleBased_PuzzleSolver_1_ComputeStatsForAllSolutions__0_System_Nullable_CancellationToken__
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver`1.ComputeStatsForAllSolutions(`0,System.Nullable{CancellationToken})
  name.vb: ComputeStatsForAllSolutions(TPuzzle, Nullable(Of CancellationToken))
  fullName: SudokuSpice.RuleBased.PuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions(TPuzzle, System.Nullable<CancellationToken>)
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions(TPuzzle, System.Nullable(Of CancellationToken))
  nameWithType: PuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions(TPuzzle, Nullable<CancellationToken>)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions(TPuzzle, Nullable(Of CancellationToken))
- uid: SudokuSpice.RuleBased.PuzzleSolver`1.ComputeStatsForAllSolutions*
  name: ComputeStatsForAllSolutions
  href: api/SudokuSpice.RuleBased.PuzzleSolver-1.html#SudokuSpice_RuleBased_PuzzleSolver_1_ComputeStatsForAllSolutions_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver`1.ComputeStatsForAllSolutions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions
  nameWithType: PuzzleSolver<TPuzzle>.ComputeStatsForAllSolutions
  nameWithType.vb: PuzzleSolver(Of TPuzzle).ComputeStatsForAllSolutions
- uid: SudokuSpice.RuleBased.PuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{CancellationToken})
  name: HasUniqueSolution(TPuzzle, Nullable<CancellationToken>)
  href: api/SudokuSpice.RuleBased.PuzzleSolver-1.html#SudokuSpice_RuleBased_PuzzleSolver_1_HasUniqueSolution__0_System_Nullable_CancellationToken__
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver`1.HasUniqueSolution(`0,System.Nullable{CancellationToken})
  name.vb: HasUniqueSolution(TPuzzle, Nullable(Of CancellationToken))
  fullName: SudokuSpice.RuleBased.PuzzleSolver<TPuzzle>.HasUniqueSolution(TPuzzle, System.Nullable<CancellationToken>)
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver(Of TPuzzle).HasUniqueSolution(TPuzzle, System.Nullable(Of CancellationToken))
  nameWithType: PuzzleSolver<TPuzzle>.HasUniqueSolution(TPuzzle, Nullable<CancellationToken>)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).HasUniqueSolution(TPuzzle, Nullable(Of CancellationToken))
- uid: SudokuSpice.RuleBased.PuzzleSolver`1.HasUniqueSolution*
  name: HasUniqueSolution
  href: api/SudokuSpice.RuleBased.PuzzleSolver-1.html#SudokuSpice_RuleBased_PuzzleSolver_1_HasUniqueSolution_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver`1.HasUniqueSolution
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleSolver<TPuzzle>.HasUniqueSolution
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver(Of TPuzzle).HasUniqueSolution
  nameWithType: PuzzleSolver<TPuzzle>.HasUniqueSolution
  nameWithType.vb: PuzzleSolver(Of TPuzzle).HasUniqueSolution
- uid: SudokuSpice.RuleBased.PuzzleSolver`1.Solve(`0,System.Boolean)
  name: Solve(TPuzzle, Boolean)
  href: api/SudokuSpice.RuleBased.PuzzleSolver-1.html#SudokuSpice_RuleBased_PuzzleSolver_1_Solve__0_System_Boolean_
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver`1.Solve(`0,System.Boolean)
  fullName: SudokuSpice.RuleBased.PuzzleSolver<TPuzzle>.Solve(TPuzzle, System.Boolean)
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver(Of TPuzzle).Solve(TPuzzle, System.Boolean)
  nameWithType: PuzzleSolver<TPuzzle>.Solve(TPuzzle, Boolean)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).Solve(TPuzzle, Boolean)
- uid: SudokuSpice.RuleBased.PuzzleSolver`1.Solve*
  name: Solve
  href: api/SudokuSpice.RuleBased.PuzzleSolver-1.html#SudokuSpice_RuleBased_PuzzleSolver_1_Solve_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver`1.Solve
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleSolver<TPuzzle>.Solve
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver(Of TPuzzle).Solve
  nameWithType: PuzzleSolver<TPuzzle>.Solve
  nameWithType.vb: PuzzleSolver(Of TPuzzle).Solve
- uid: SudokuSpice.RuleBased.PuzzleSolver`1.TrySolve(`0,System.Boolean)
  name: TrySolve(TPuzzle, Boolean)
  href: api/SudokuSpice.RuleBased.PuzzleSolver-1.html#SudokuSpice_RuleBased_PuzzleSolver_1_TrySolve__0_System_Boolean_
  commentId: M:SudokuSpice.RuleBased.PuzzleSolver`1.TrySolve(`0,System.Boolean)
  fullName: SudokuSpice.RuleBased.PuzzleSolver<TPuzzle>.TrySolve(TPuzzle, System.Boolean)
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver(Of TPuzzle).TrySolve(TPuzzle, System.Boolean)
  nameWithType: PuzzleSolver<TPuzzle>.TrySolve(TPuzzle, Boolean)
  nameWithType.vb: PuzzleSolver(Of TPuzzle).TrySolve(TPuzzle, Boolean)
- uid: SudokuSpice.RuleBased.PuzzleSolver`1.TrySolve*
  name: TrySolve
  href: api/SudokuSpice.RuleBased.PuzzleSolver-1.html#SudokuSpice_RuleBased_PuzzleSolver_1_TrySolve_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleSolver`1.TrySolve
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleSolver<TPuzzle>.TrySolve
  fullName.vb: SudokuSpice.RuleBased.PuzzleSolver(Of TPuzzle).TrySolve
  nameWithType: PuzzleSolver<TPuzzle>.TrySolve
  nameWithType.vb: PuzzleSolver(Of TPuzzle).TrySolve
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  name: PuzzleWithPossibleValues
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html
  commentId: T:SudokuSpice.RuleBased.PuzzleWithPossibleValues
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues
  nameWithType: PuzzleWithPossibleValues
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(SudokuSpice.Puzzle)
  name: PuzzleWithPossibleValues(Puzzle)
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues__ctor_SudokuSpice_Puzzle_
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(SudokuSpice.Puzzle)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.PuzzleWithPossibleValues(SudokuSpice.Puzzle)
  nameWithType: PuzzleWithPossibleValues.PuzzleWithPossibleValues(Puzzle)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(SudokuSpice.RuleBased.PuzzleWithPossibleValues)
  name: PuzzleWithPossibleValues(PuzzleWithPossibleValues)
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues__ctor_SudokuSpice_RuleBased_PuzzleWithPossibleValues_
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(SudokuSpice.RuleBased.PuzzleWithPossibleValues)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.PuzzleWithPossibleValues(SudokuSpice.RuleBased.PuzzleWithPossibleValues)
  nameWithType: PuzzleWithPossibleValues.PuzzleWithPossibleValues(PuzzleWithPossibleValues)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(System.Int32)
  name: PuzzleWithPossibleValues(Int32)
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues__ctor_System_Int32_
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(System.Int32)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.PuzzleWithPossibleValues(System.Int32)
  nameWithType: PuzzleWithPossibleValues.PuzzleWithPossibleValues(Int32)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(System.Nullable{System.Int32}[0:,0:])
  name: PuzzleWithPossibleValues(Nullable<Int32>[,])
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues__ctor_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor(System.Nullable{System.Int32}[0:,0:])
  name.vb: PuzzleWithPossibleValues(Nullable(Of Int32)(,))
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.PuzzleWithPossibleValues(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.PuzzleWithPossibleValues(System.Nullable(Of System.Int32)(,))
  nameWithType: PuzzleWithPossibleValues.PuzzleWithPossibleValues(Nullable<Int32>[,])
  nameWithType.vb: PuzzleWithPossibleValues.PuzzleWithPossibleValues(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor*
  name: PuzzleWithPossibleValues
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues__ctor_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.PuzzleWithPossibleValues
  nameWithType: PuzzleWithPossibleValues.PuzzleWithPossibleValues
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues
  name: AllPossibleValues
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_AllPossibleValues
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues
  nameWithType: PuzzleWithPossibleValues.AllPossibleValues
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues*
  name: AllPossibleValues
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_AllPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValues
  nameWithType: PuzzleWithPossibleValues.AllPossibleValues
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan
  name: AllPossibleValuesSpan
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_AllPossibleValuesSpan
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan
  nameWithType: PuzzleWithPossibleValues.AllPossibleValuesSpan
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan*
  name: AllPossibleValuesSpan
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_AllPossibleValuesSpan_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.AllPossibleValuesSpan
  nameWithType: PuzzleWithPossibleValues.AllPossibleValuesSpan
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  name: CopyFrom(Nullable<Int32>[,])
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_CopyFrom_System_Nullable_System_Int32__0__0___
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable{System.Int32}[0:,0:])
  name.vb: CopyFrom(Nullable(Of Int32)(,))
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable<System.Int32>[,])
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom(System.Nullable(Of System.Int32)(,))
  nameWithType: PuzzleWithPossibleValues.CopyFrom(Nullable<Int32>[,])
  nameWithType.vb: PuzzleWithPossibleValues.CopyFrom(Nullable(Of Int32)(,))
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom*
  name: CopyFrom
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_CopyFrom_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.CopyFrom
  nameWithType: PuzzleWithPossibleValues.CopyFrom
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy
  name: DeepCopy()
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_DeepCopy
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy()
  nameWithType: PuzzleWithPossibleValues.DeepCopy()
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy*
  name: DeepCopy
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_DeepCopy_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.DeepCopy
  nameWithType: PuzzleWithPossibleValues.DeepCopy
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: PuzzleWithPossibleValues.GetPossibleValues(Coordinate)
  nameWithType.vb: PuzzleWithPossibleValues.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetPossibleValues
  nameWithType: PuzzleWithPossibleValues.GetPossibleValues
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords
  name: GetUnsetCoords()
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_GetUnsetCoords
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords()
  nameWithType: PuzzleWithPossibleValues.GetUnsetCoords()
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords*
  name: GetUnsetCoords
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_GetUnsetCoords_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.GetUnsetCoords
  nameWithType: PuzzleWithPossibleValues.GetUnsetCoords
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  name: IntersectPossibleValues(Coordinate, BitVector)
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_IntersectPossibleValues_SudokuSpice_Coordinate__SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  name.vb: IntersectPossibleValues(ByRef Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues(SudokuSpice.Coordinate, SudokuSpice.BitVector)
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues(ByRef SudokuSpice.Coordinate, SudokuSpice.BitVector)
  nameWithType: PuzzleWithPossibleValues.IntersectPossibleValues(Coordinate, BitVector)
  nameWithType.vb: PuzzleWithPossibleValues.IntersectPossibleValues(ByRef Coordinate, BitVector)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues*
  name: IntersectPossibleValues
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_IntersectPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.IntersectPossibleValues
  nameWithType: PuzzleWithPossibleValues.IntersectPossibleValues
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(SudokuSpice.Coordinate@)
  name: Item[Coordinate]
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_Item_SudokuSpice_Coordinate__
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(SudokuSpice.Coordinate@)
  name.vb: Item(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item[SudokuSpice.Coordinate]
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(ByRef SudokuSpice.Coordinate)
  nameWithType: PuzzleWithPossibleValues.Item[Coordinate]
  nameWithType.vb: PuzzleWithPossibleValues.Item(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(System.Int32,System.Int32)
  name: Item[Int32, Int32]
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_Item_System_Int32_System_Int32_
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(System.Int32,System.Int32)
  name.vb: Item(Int32, Int32)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item[System.Int32, System.Int32]
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item(System.Int32, System.Int32)
  nameWithType: PuzzleWithPossibleValues.Item[Int32, Int32]
  nameWithType.vb: PuzzleWithPossibleValues.Item(Int32, Int32)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item*
  name: Item
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_Item_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Item
  nameWithType: PuzzleWithPossibleValues.Item
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares
  name: NumEmptySquares
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_NumEmptySquares
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares
  nameWithType: PuzzleWithPossibleValues.NumEmptySquares
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares*
  name: NumEmptySquares
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_NumEmptySquares_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumEmptySquares
  nameWithType: PuzzleWithPossibleValues.NumEmptySquares
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares
  name: NumSetSquares
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_NumSetSquares
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares
  nameWithType: PuzzleWithPossibleValues.NumSetSquares
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares*
  name: NumSetSquares
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_NumSetSquares_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSetSquares
  nameWithType: PuzzleWithPossibleValues.NumSetSquares
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares
  name: NumSquares
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_NumSquares
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares
  nameWithType: PuzzleWithPossibleValues.NumSquares
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares*
  name: NumSquares
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_NumSquares_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.NumSquares
  nameWithType: PuzzleWithPossibleValues.NumSquares
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  name: ResetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_ResetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: ResetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: PuzzleWithPossibleValues.ResetPossibleValues(Coordinate)
  nameWithType.vb: PuzzleWithPossibleValues.ResetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues*
  name: ResetPossibleValues
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_ResetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ResetPossibleValues
  nameWithType: PuzzleWithPossibleValues.ResetPossibleValues
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  name: SetPossibleValues(Coordinate, BitVector)
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_SetPossibleValues_SudokuSpice_Coordinate__SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues(SudokuSpice.Coordinate@,SudokuSpice.BitVector)
  name.vb: SetPossibleValues(ByRef Coordinate, BitVector)
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues(SudokuSpice.Coordinate, SudokuSpice.BitVector)
  fullName.vb: SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues(ByRef SudokuSpice.Coordinate, SudokuSpice.BitVector)
  nameWithType: PuzzleWithPossibleValues.SetPossibleValues(Coordinate, BitVector)
  nameWithType.vb: PuzzleWithPossibleValues.SetPossibleValues(ByRef Coordinate, BitVector)
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues*
  name: SetPossibleValues
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_SetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.SetPossibleValues
  nameWithType: PuzzleWithPossibleValues.SetPossibleValues
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size
  name: Size
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_Size
  commentId: P:SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size
  nameWithType: PuzzleWithPossibleValues.Size
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size*
  name: Size
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_Size_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.Size
  nameWithType: PuzzleWithPossibleValues.Size
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString
  name: ToString()
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_ToString
  commentId: M:SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString()
  nameWithType: PuzzleWithPossibleValues.ToString()
- uid: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString*
  name: ToString
  href: api/SudokuSpice.RuleBased.PuzzleWithPossibleValues.html#SudokuSpice_RuleBased_PuzzleWithPossibleValues_ToString_
  commentId: Overload:SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.PuzzleWithPossibleValues.ToString
  nameWithType: PuzzleWithPossibleValues.ToString
- uid: SudokuSpice.RuleBased.Rules
  name: SudokuSpice.RuleBased.Rules
  href: api/SudokuSpice.RuleBased.Rules.html
  commentId: N:SudokuSpice.RuleBased.Rules
  fullName: SudokuSpice.RuleBased.Rules
  nameWithType: SudokuSpice.RuleBased.Rules
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule
  name: BoxUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.BoxUniquenessRule
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule
  nameWithType: BoxUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.#ctor
  name: BoxUniquenessRule()
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule__ctor
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.#ctor
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.BoxUniquenessRule()
  nameWithType: BoxUniquenessRule.BoxUniquenessRule()
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.#ctor*
  name: BoxUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.BoxUniquenessRule
  nameWithType: BoxUniquenessRule.BoxUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_CopyWithNewReference_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: BoxUniquenessRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.CopyWithNewReference
  nameWithType: BoxUniquenessRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name: GetDimension(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_GetDimension_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name.vb: GetDimension(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension(ByRef SudokuSpice.Coordinate)
  nameWithType: BoxUniquenessRule.GetDimension(Coordinate)
  nameWithType.vb: BoxUniquenessRule.GetDimension(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension*
  name: GetDimension
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_GetDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetDimension
  nameWithType: BoxUniquenessRule.GetDimension
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetMissingValuesForBox(System.Int32)
  name: GetMissingValuesForBox(Int32)
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_GetMissingValuesForBox_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetMissingValuesForBox(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetMissingValuesForBox(System.Int32)
  nameWithType: BoxUniquenessRule.GetMissingValuesForBox(Int32)
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetMissingValuesForBox*
  name: GetMissingValuesForBox
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_GetMissingValuesForBox_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetMissingValuesForBox
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetMissingValuesForBox
  nameWithType: BoxUniquenessRule.GetMissingValuesForBox
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  name: GetNumDimensions(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_GetNumDimensions_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: BoxUniquenessRule.GetNumDimensions(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetNumDimensions*
  name: GetNumDimensions
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_GetNumDimensions_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetNumDimensions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.GetNumDimensions
  nameWithType: BoxUniquenessRule.GetNumDimensions
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name: TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_TrackUnsetCoordinatesOnSameDimension_System_Int32_SudokuSpice_Coordinate__SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name.vb: TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, ByRef SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  nameWithType: BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  nameWithType.vb: BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension*
  name: TrackUnsetCoordinatesOnSameDimension
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_TrackUnsetCoordinatesOnSameDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension
  nameWithType: BoxUniquenessRule.TrackUnsetCoordinatesOnSameDimension
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  name: TryInit(IReadOnlyPuzzle, BitVector)
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_TryInit_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  nameWithType: BoxUniquenessRule.TryInit(IReadOnlyPuzzle, BitVector)
- uid: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.BoxUniquenessRule.html#SudokuSpice_RuleBased_Rules_BoxUniquenessRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.BoxUniquenessRule.TryInit
  nameWithType: BoxUniquenessRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  name: ColumnUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule
  nameWithType: ColumnUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor
  name: ColumnUniquenessRule()
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule__ctor
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.ColumnUniquenessRule()
  nameWithType: ColumnUniquenessRule.ColumnUniquenessRule()
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor*
  name: ColumnUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.ColumnUniquenessRule
  nameWithType: ColumnUniquenessRule.ColumnUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_CopyWithNewReference_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: ColumnUniquenessRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.CopyWithNewReference
  nameWithType: ColumnUniquenessRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name: GetDimension(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_GetDimension_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name.vb: GetDimension(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension(ByRef SudokuSpice.Coordinate)
  nameWithType: ColumnUniquenessRule.GetDimension(Coordinate)
  nameWithType.vb: ColumnUniquenessRule.GetDimension(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension*
  name: GetDimension
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_GetDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetDimension
  nameWithType: ColumnUniquenessRule.GetDimension
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn(System.Int32)
  name: GetMissingValuesForColumn(Int32)
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_GetMissingValuesForColumn_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn(System.Int32)
  nameWithType: ColumnUniquenessRule.GetMissingValuesForColumn(Int32)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn*
  name: GetMissingValuesForColumn
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_GetMissingValuesForColumn_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetMissingValuesForColumn
  nameWithType: ColumnUniquenessRule.GetMissingValuesForColumn
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  name: GetNumDimensions(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_GetNumDimensions_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: ColumnUniquenessRule.GetNumDimensions(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetNumDimensions*
  name: GetNumDimensions
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_GetNumDimensions_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetNumDimensions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.GetNumDimensions
  nameWithType: ColumnUniquenessRule.GetNumDimensions
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name: TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_TrackUnsetCoordinatesOnSameDimension_System_Int32_SudokuSpice_Coordinate__SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name.vb: TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, ByRef SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  nameWithType: ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  nameWithType.vb: ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension*
  name: TrackUnsetCoordinatesOnSameDimension
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_TrackUnsetCoordinatesOnSameDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension
  nameWithType: ColumnUniquenessRule.TrackUnsetCoordinatesOnSameDimension
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  name: TryInit(IReadOnlyPuzzle, BitVector)
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_TryInit_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  nameWithType: ColumnUniquenessRule.TryInit(IReadOnlyPuzzle, BitVector)
- uid: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.html#SudokuSpice_RuleBased_Rules_ColumnUniquenessRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.ColumnUniquenessRule.TryInit
  nameWithType: ColumnUniquenessRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule
  name: DiagonalUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule
  nameWithType: DiagonalUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.#ctor
  name: DiagonalUniquenessRule()
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule__ctor
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.#ctor
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.DiagonalUniquenessRule()
  nameWithType: DiagonalUniquenessRule.DiagonalUniquenessRule()
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.#ctor*
  name: DiagonalUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.DiagonalUniquenessRule
  nameWithType: DiagonalUniquenessRule.DiagonalUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_CopyWithNewReference_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: DiagonalUniquenessRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.CopyWithNewReference
  nameWithType: DiagonalUniquenessRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: DiagonalUniquenessRule.GetPossibleValues(Coordinate)
  nameWithType.vb: DiagonalUniquenessRule.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.GetPossibleValues
  nameWithType: DiagonalUniquenessRule.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name: Revert(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_Revert_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: DiagonalUniquenessRule.Revert(Coordinate, Int32)
  nameWithType.vb: DiagonalUniquenessRule.Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Revert(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_Revert_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: DiagonalUniquenessRule.Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: DiagonalUniquenessRule.Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert*
  name: Revert
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_Revert_
  commentId: Overload:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Revert
  nameWithType: DiagonalUniquenessRule.Revert
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  name: TryInit(IReadOnlyPuzzle, BitVector)
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_TryInit_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  nameWithType: DiagonalUniquenessRule.TryInit(IReadOnlyPuzzle, BitVector)
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.TryInit
  nameWithType: DiagonalUniquenessRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Update(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_Update_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: DiagonalUniquenessRule.Update(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: DiagonalUniquenessRule.Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update*
  name: Update
  href: api/SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.html#SudokuSpice_RuleBased_Rules_DiagonalUniquenessRule_Update_
  commentId: Overload:SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.DiagonalUniquenessRule.Update
  nameWithType: DiagonalUniquenessRule.Update
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  name: IMissingBoxValuesTracker
  href: api/SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.html
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker
  nameWithType: IMissingBoxValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  name: GetMissingValuesForBox(Int32)
  href: api/SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.html#SudokuSpice_RuleBased_Rules_IMissingBoxValuesTracker_GetMissingValuesForBox_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox(System.Int32)
  nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox(Int32)
- uid: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox*
  name: GetMissingValuesForBox
  href: api/SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.html#SudokuSpice_RuleBased_Rules_IMissingBoxValuesTracker_GetMissingValuesForBox_
  commentId: Overload:SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.IMissingBoxValuesTracker.GetMissingValuesForBox
  nameWithType: IMissingBoxValuesTracker.GetMissingValuesForBox
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  name: IMissingColumnValuesTracker
  href: api/SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.html
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker
  nameWithType: IMissingColumnValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  name: GetMissingValuesForColumn(Int32)
  href: api/SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.html#SudokuSpice_RuleBased_Rules_IMissingColumnValuesTracker_GetMissingValuesForColumn_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn(System.Int32)
  nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn(Int32)
- uid: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn*
  name: GetMissingValuesForColumn
  href: api/SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.html#SudokuSpice_RuleBased_Rules_IMissingColumnValuesTracker_GetMissingValuesForColumn_
  commentId: Overload:SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.IMissingColumnValuesTracker.GetMissingValuesForColumn
  nameWithType: IMissingColumnValuesTracker.GetMissingValuesForColumn
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  name: IMissingRowValuesTracker
  href: api/SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.html
  commentId: T:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker
  nameWithType: IMissingRowValuesTracker
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  name: GetMissingValuesForRow(Int32)
  href: api/SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.html#SudokuSpice_RuleBased_Rules_IMissingRowValuesTracker_GetMissingValuesForRow_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow(System.Int32)
  nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow(Int32)
- uid: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow*
  name: GetMissingValuesForRow
  href: api/SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.html#SudokuSpice_RuleBased_Rules_IMissingRowValuesTracker_GetMissingValuesForRow_
  commentId: Overload:SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.IMissingRowValuesTracker.GetMissingValuesForRow
  nameWithType: IMissingRowValuesTracker.GetMissingValuesForRow
- uid: SudokuSpice.RuleBased.Rules.IRule
  name: IRule
  href: api/SudokuSpice.RuleBased.Rules.IRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.IRule
  fullName: SudokuSpice.RuleBased.Rules.IRule
  nameWithType: IRule
- uid: SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.IRule.html#SudokuSpice_RuleBased_Rules_IRule_CopyWithNewReference_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: IRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.IRule.html#SudokuSpice_RuleBased_Rules_IRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.IRule.CopyWithNewReference
  nameWithType: IRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.IRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.IRule.html#SudokuSpice_RuleBased_Rules_IRule_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.IRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.IRule.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.IRule.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: IRule.GetPossibleValues(Coordinate)
  nameWithType.vb: IRule.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.IRule.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.Rules.IRule.html#SudokuSpice_RuleBased_Rules_IRule_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Rules.IRule.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.IRule.GetPossibleValues
  nameWithType: IRule.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.IRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name: Revert(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.Rules.IRule.html#SudokuSpice_RuleBased_Rules_IRule_Revert_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.IRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.IRule.Revert(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.Rules.IRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: IRule.Revert(Coordinate, Int32)
  nameWithType.vb: IRule.Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.Rules.IRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Revert(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.IRule.html#SudokuSpice_RuleBased_Rules_IRule_Revert_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.IRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.IRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.IRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: IRule.Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: IRule.Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.IRule.Revert*
  name: Revert
  href: api/SudokuSpice.RuleBased.Rules.IRule.html#SudokuSpice_RuleBased_Rules_IRule_Revert_
  commentId: Overload:SudokuSpice.RuleBased.Rules.IRule.Revert
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.IRule.Revert
  nameWithType: IRule.Revert
- uid: SudokuSpice.RuleBased.Rules.IRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  name: TryInit(IReadOnlyPuzzle, BitVector)
  href: api/SudokuSpice.RuleBased.Rules.IRule.html#SudokuSpice_RuleBased_Rules_IRule_TryInit_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.Rules.IRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  fullName: SudokuSpice.RuleBased.Rules.IRule.TryInit(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  nameWithType: IRule.TryInit(IReadOnlyPuzzle, BitVector)
- uid: SudokuSpice.RuleBased.Rules.IRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.IRule.html#SudokuSpice_RuleBased_Rules_IRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.IRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.IRule.TryInit
  nameWithType: IRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.IRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Update(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.IRule.html#SudokuSpice_RuleBased_Rules_IRule_Update_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.IRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.IRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.IRule.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: IRule.Update(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: IRule.Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.IRule.Update*
  name: Update
  href: api/SudokuSpice.RuleBased.Rules.IRule.html#SudokuSpice_RuleBased_Rules_IRule_Update_
  commentId: Overload:SudokuSpice.RuleBased.Rules.IRule.Update
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.IRule.Update
  nameWithType: IRule.Update
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule
  name: MagicSquaresRule
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.MagicSquaresRule
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule
  nameWithType: MagicSquaresRule
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.#ctor(System.Int32,IEnumerable{SudokuSpice.Box},System.Boolean)
  name: MagicSquaresRule(Int32, IEnumerable<Box>, Boolean)
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule__ctor_System_Int32_IEnumerable_SudokuSpice_Box__System_Boolean_
  commentId: M:SudokuSpice.RuleBased.Rules.MagicSquaresRule.#ctor(System.Int32,IEnumerable{SudokuSpice.Box},System.Boolean)
  name.vb: MagicSquaresRule(Int32, IEnumerable(Of Box), Boolean)
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.MagicSquaresRule(System.Int32, IEnumerable<SudokuSpice.Box>, System.Boolean)
  fullName.vb: SudokuSpice.RuleBased.Rules.MagicSquaresRule.MagicSquaresRule(System.Int32, IEnumerable(Of SudokuSpice.Box), System.Boolean)
  nameWithType: MagicSquaresRule.MagicSquaresRule(Int32, IEnumerable<Box>, Boolean)
  nameWithType.vb: MagicSquaresRule.MagicSquaresRule(Int32, IEnumerable(Of Box), Boolean)
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.#ctor*
  name: MagicSquaresRule
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.MagicSquaresRule.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.MagicSquaresRule
  nameWithType: MagicSquaresRule.MagicSquaresRule
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule_CopyWithNewReference_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.MagicSquaresRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: MagicSquaresRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.MagicSquaresRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.CopyWithNewReference
  nameWithType: MagicSquaresRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.MagicSquaresRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.MagicSquaresRule.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: MagicSquaresRule.GetPossibleValues(Coordinate)
  nameWithType.vb: MagicSquaresRule.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Rules.MagicSquaresRule.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.GetPossibleValues
  nameWithType: MagicSquaresRule.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name: Revert(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule_Revert_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.MagicSquaresRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Revert(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: MagicSquaresRule.Revert(Coordinate, Int32)
  nameWithType.vb: MagicSquaresRule.Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Revert(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule_Revert_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.MagicSquaresRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: MagicSquaresRule.Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: MagicSquaresRule.Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Revert*
  name: Revert
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule_Revert_
  commentId: Overload:SudokuSpice.RuleBased.Rules.MagicSquaresRule.Revert
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Revert
  nameWithType: MagicSquaresRule.Revert
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  name: TryInit(IReadOnlyPuzzle, BitVector)
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule_TryInit_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.Rules.MagicSquaresRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.TryInit(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  nameWithType: MagicSquaresRule.TryInit(IReadOnlyPuzzle, BitVector)
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.MagicSquaresRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.TryInit
  nameWithType: MagicSquaresRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Update(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule_Update_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.MagicSquaresRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: MagicSquaresRule.Update(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: MagicSquaresRule.Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Update*
  name: Update
  href: api/SudokuSpice.RuleBased.Rules.MagicSquaresRule.html#SudokuSpice_RuleBased_Rules_MagicSquaresRule_Update_
  commentId: Overload:SudokuSpice.RuleBased.Rules.MagicSquaresRule.Update
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.MagicSquaresRule.Update
  nameWithType: MagicSquaresRule.Update
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule
  name: RowUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.RowUniquenessRule
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule
  nameWithType: RowUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.#ctor
  name: RowUniquenessRule()
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule__ctor
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.#ctor
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.RowUniquenessRule()
  nameWithType: RowUniquenessRule.RowUniquenessRule()
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.#ctor*
  name: RowUniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.RowUniquenessRule
  nameWithType: RowUniquenessRule.RowUniquenessRule
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_CopyWithNewReference_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: RowUniquenessRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.CopyWithNewReference
  nameWithType: RowUniquenessRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name: GetDimension(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_GetDimension_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name.vb: GetDimension(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension(ByRef SudokuSpice.Coordinate)
  nameWithType: RowUniquenessRule.GetDimension(Coordinate)
  nameWithType.vb: RowUniquenessRule.GetDimension(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension*
  name: GetDimension
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_GetDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetDimension
  nameWithType: RowUniquenessRule.GetDimension
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetMissingValuesForRow(System.Int32)
  name: GetMissingValuesForRow(Int32)
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_GetMissingValuesForRow_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetMissingValuesForRow(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetMissingValuesForRow(System.Int32)
  nameWithType: RowUniquenessRule.GetMissingValuesForRow(Int32)
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetMissingValuesForRow*
  name: GetMissingValuesForRow
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_GetMissingValuesForRow_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetMissingValuesForRow
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetMissingValuesForRow
  nameWithType: RowUniquenessRule.GetMissingValuesForRow
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  name: GetNumDimensions(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_GetNumDimensions_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: RowUniquenessRule.GetNumDimensions(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetNumDimensions*
  name: GetNumDimensions
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_GetNumDimensions_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetNumDimensions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.GetNumDimensions
  nameWithType: RowUniquenessRule.GetNumDimensions
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name: TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_TrackUnsetCoordinatesOnSameDimension_System_Int32_SudokuSpice_Coordinate__SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name.vb: TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, ByRef SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  nameWithType: RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  nameWithType.vb: RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension*
  name: TrackUnsetCoordinatesOnSameDimension
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_TrackUnsetCoordinatesOnSameDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension
  nameWithType: RowUniquenessRule.TrackUnsetCoordinatesOnSameDimension
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  name: TryInit(IReadOnlyPuzzle, BitVector)
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_TryInit_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.Rules.RowUniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  nameWithType: RowUniquenessRule.TryInit(IReadOnlyPuzzle, BitVector)
- uid: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.RowUniquenessRule.html#SudokuSpice_RuleBased_Rules_RowUniquenessRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.RowUniquenessRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.RowUniquenessRule.TryInit
  nameWithType: RowUniquenessRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.StandardRules
  name: StandardRules
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html
  commentId: T:SudokuSpice.RuleBased.Rules.StandardRules
  fullName: SudokuSpice.RuleBased.Rules.StandardRules
  nameWithType: StandardRules
- uid: SudokuSpice.RuleBased.Rules.StandardRules.#ctor
  name: StandardRules()
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules__ctor
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.#ctor
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.StandardRules()
  nameWithType: StandardRules.StandardRules()
- uid: SudokuSpice.RuleBased.Rules.StandardRules.#ctor*
  name: StandardRules
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.StandardRules
  nameWithType: StandardRules.StandardRules
- uid: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_CopyWithNewReference_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: StandardRules.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.CopyWithNewReference
  nameWithType: StandardRules.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox(System.Int32)
  name: GetMissingValuesForBox(Int32)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetMissingValuesForBox_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox(System.Int32)
  nameWithType: StandardRules.GetMissingValuesForBox(Int32)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox*
  name: GetMissingValuesForBox
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetMissingValuesForBox_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForBox
  nameWithType: StandardRules.GetMissingValuesForBox
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn(System.Int32)
  name: GetMissingValuesForColumn(Int32)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetMissingValuesForColumn_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn(System.Int32)
  nameWithType: StandardRules.GetMissingValuesForColumn(Int32)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn*
  name: GetMissingValuesForColumn
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetMissingValuesForColumn_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForColumn
  nameWithType: StandardRules.GetMissingValuesForColumn
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow(System.Int32)
  name: GetMissingValuesForRow(Int32)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetMissingValuesForRow_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow(System.Int32)
  nameWithType: StandardRules.GetMissingValuesForRow(Int32)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow*
  name: GetMissingValuesForRow
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetMissingValuesForRow_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetMissingValuesForRow
  nameWithType: StandardRules.GetMissingValuesForRow
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: StandardRules.GetPossibleValues(Coordinate)
  nameWithType.vb: StandardRules.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.GetPossibleValues
  nameWithType: StandardRules.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32)
  name: Revert(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_Revert_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.Rules.StandardRules.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: StandardRules.Revert(Coordinate, Int32)
  nameWithType.vb: StandardRules.Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Revert(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_Revert_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.StandardRules.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: StandardRules.Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: StandardRules.Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Revert*
  name: Revert
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_Revert_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.Revert
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Revert
  nameWithType: StandardRules.Revert
- uid: SudokuSpice.RuleBased.Rules.StandardRules.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  name: TryInit(IReadOnlyPuzzle, BitVector)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_TryInit_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.TryInit(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  nameWithType: StandardRules.TryInit(IReadOnlyPuzzle, BitVector)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.TryInit
  nameWithType: StandardRules.TryInit
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Update(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_Update_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.StandardRules.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.StandardRules.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: StandardRules.Update(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: StandardRules.Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.StandardRules.Update*
  name: Update
  href: api/SudokuSpice.RuleBased.Rules.StandardRules.html#SudokuSpice_RuleBased_Rules_StandardRules_Update_
  commentId: Overload:SudokuSpice.RuleBased.Rules.StandardRules.Update
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.StandardRules.Update
  nameWithType: StandardRules.Update
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule
  name: UniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html
  commentId: T:SudokuSpice.RuleBased.Rules.UniquenessRule
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule
  nameWithType: UniquenessRule
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.#ctor
  name: UniquenessRule()
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule__ctor
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.#ctor
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.UniquenessRule()
  nameWithType: UniquenessRule.UniquenessRule()
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.#ctor(SudokuSpice.RuleBased.Rules.UniquenessRule)
  name: UniquenessRule(UniquenessRule)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule__ctor_SudokuSpice_RuleBased_Rules_UniquenessRule_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.#ctor(SudokuSpice.RuleBased.Rules.UniquenessRule)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.UniquenessRule(SudokuSpice.RuleBased.Rules.UniquenessRule)
  nameWithType: UniquenessRule.UniquenessRule(UniquenessRule)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.#ctor*
  name: UniquenessRule
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule__ctor_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.UniquenessRule
  nameWithType: UniquenessRule.UniquenessRule
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_CopyWithNewReference_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: UniquenessRule.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.CopyWithNewReference
  nameWithType: UniquenessRule.CopyWithNewReference
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name: GetDimension(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetDimension_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension(SudokuSpice.Coordinate@)
  name.vb: GetDimension(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension(ByRef SudokuSpice.Coordinate)
  nameWithType: UniquenessRule.GetDimension(Coordinate)
  nameWithType.vb: UniquenessRule.GetDimension(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension*
  name: GetDimension
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetDimension
  nameWithType: UniquenessRule.GetDimension
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  name: GetNumDimensions(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetNumDimensions_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetNumDimensions(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: UniquenessRule.GetNumDimensions(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetNumDimensions*
  name: GetNumDimensions
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetNumDimensions_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.GetNumDimensions
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetNumDimensions
  nameWithType: UniquenessRule.GetNumDimensions
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: UniquenessRule.GetPossibleValues(Coordinate)
  nameWithType.vb: UniquenessRule.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(System.Int32)
  name: GetPossibleValues(Int32)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetPossibleValues_System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(System.Int32)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues(System.Int32)
  nameWithType: UniquenessRule.GetPossibleValues(Int32)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.GetPossibleValues
  nameWithType: UniquenessRule.GetPossibleValues
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name: Revert(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_Revert_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: UniquenessRule.Revert(Coordinate, Int32)
  nameWithType.vb: UniquenessRule.Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Revert(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_Revert_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: UniquenessRule.Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: UniquenessRule.Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert*
  name: Revert
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_Revert_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.Revert
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.Revert
  nameWithType: UniquenessRule.Revert
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name: TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_TrackUnsetCoordinatesOnSameDimension_System_Int32_SudokuSpice_Coordinate__SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32,SudokuSpice.Coordinate@,SudokuSpice.CoordinateTracker)
  name.vb: TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension(System.Int32, ByRef SudokuSpice.Coordinate, SudokuSpice.CoordinateTracker)
  nameWithType: UniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, Coordinate, CoordinateTracker)
  nameWithType.vb: UniquenessRule.TrackUnsetCoordinatesOnSameDimension(Int32, ByRef Coordinate, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension*
  name: TrackUnsetCoordinatesOnSameDimension
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_TrackUnsetCoordinatesOnSameDimension_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.TrackUnsetCoordinatesOnSameDimension
  nameWithType: UniquenessRule.TrackUnsetCoordinatesOnSameDimension
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  name: TryInit(IReadOnlyPuzzle, BitVector)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_TryInit_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.TryInit(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  nameWithType: UniquenessRule.TryInit(IReadOnlyPuzzle, BitVector)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.TryInit
  nameWithType: UniquenessRule.TryInit
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Update(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_Update_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.Rules.UniquenessRule.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.Rules.UniquenessRule.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: UniquenessRule.Update(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: UniquenessRule.Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.Rules.UniquenessRule.Update*
  name: Update
  href: api/SudokuSpice.RuleBased.Rules.UniquenessRule.html#SudokuSpice_RuleBased_Rules_UniquenessRule_Update_
  commentId: Overload:SudokuSpice.RuleBased.Rules.UniquenessRule.Update
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.Rules.UniquenessRule.Update
  nameWithType: UniquenessRule.Update
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator
  name: StandardPuzzleGenerator
  href: api/SudokuSpice.RuleBased.StandardPuzzleGenerator.html
  commentId: T:SudokuSpice.RuleBased.StandardPuzzleGenerator
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator
  nameWithType: StandardPuzzleGenerator
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor
  name: StandardPuzzleGenerator()
  href: api/SudokuSpice.RuleBased.StandardPuzzleGenerator.html#SudokuSpice_RuleBased_StandardPuzzleGenerator__ctor
  commentId: M:SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator.StandardPuzzleGenerator()
  nameWithType: StandardPuzzleGenerator.StandardPuzzleGenerator()
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor*
  name: StandardPuzzleGenerator
  href: api/SudokuSpice.RuleBased.StandardPuzzleGenerator.html#SudokuSpice_RuleBased_StandardPuzzleGenerator__ctor_
  commentId: Overload:SudokuSpice.RuleBased.StandardPuzzleGenerator.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator.StandardPuzzleGenerator
  nameWithType: StandardPuzzleGenerator.StandardPuzzleGenerator
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate(System.Int32,System.Int32,TimeSpan)
  name: Generate(Int32, Int32, TimeSpan)
  href: api/SudokuSpice.RuleBased.StandardPuzzleGenerator.html#SudokuSpice_RuleBased_StandardPuzzleGenerator_Generate_System_Int32_System_Int32_TimeSpan_
  commentId: M:SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate(System.Int32,System.Int32,TimeSpan)
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate(System.Int32, System.Int32, TimeSpan)
  nameWithType: StandardPuzzleGenerator.Generate(Int32, Int32, TimeSpan)
- uid: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate*
  name: Generate
  href: api/SudokuSpice.RuleBased.StandardPuzzleGenerator.html#SudokuSpice_RuleBased_StandardPuzzleGenerator_Generate_
  commentId: Overload:SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardPuzzleGenerator.Generate
  nameWithType: StandardPuzzleGenerator.Generate
- uid: SudokuSpice.RuleBased.StandardPuzzles
  name: StandardPuzzles
  href: api/SudokuSpice.RuleBased.StandardPuzzles.html
  commentId: T:SudokuSpice.RuleBased.StandardPuzzles
  fullName: SudokuSpice.RuleBased.StandardPuzzles
  nameWithType: StandardPuzzles
- uid: SudokuSpice.RuleBased.StandardPuzzles.CreateSolver
  name: CreateSolver()
  href: api/SudokuSpice.RuleBased.StandardPuzzles.html#SudokuSpice_RuleBased_StandardPuzzles_CreateSolver
  commentId: M:SudokuSpice.RuleBased.StandardPuzzles.CreateSolver
  fullName: SudokuSpice.RuleBased.StandardPuzzles.CreateSolver()
  nameWithType: StandardPuzzles.CreateSolver()
- uid: SudokuSpice.RuleBased.StandardPuzzles.CreateSolver*
  name: CreateSolver
  href: api/SudokuSpice.RuleBased.StandardPuzzles.html#SudokuSpice_RuleBased_StandardPuzzles_CreateSolver_
  commentId: Overload:SudokuSpice.RuleBased.StandardPuzzles.CreateSolver
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardPuzzles.CreateSolver
  nameWithType: StandardPuzzles.CreateSolver
- uid: SudokuSpice.RuleBased.StandardRuleKeeper
  name: StandardRuleKeeper
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html
  commentId: T:SudokuSpice.RuleBased.StandardRuleKeeper
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper
  nameWithType: StandardRuleKeeper
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.#ctor
  name: StandardRuleKeeper()
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper__ctor
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.#ctor
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.StandardRuleKeeper()
  nameWithType: StandardRuleKeeper.StandardRuleKeeper()
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.#ctor*
  name: StandardRuleKeeper
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper__ctor_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.#ctor
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.StandardRuleKeeper
  nameWithType: StandardRuleKeeper.StandardRuleKeeper
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  name: CopyWithNewReference(IReadOnlyPuzzle)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_CopyWithNewReference_SudokuSpice_IReadOnlyPuzzle_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference(SudokuSpice.IReadOnlyPuzzle)
  nameWithType: StandardRuleKeeper.CopyWithNewReference(IReadOnlyPuzzle)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference*
  name: CopyWithNewReference
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_CopyWithNewReference_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReference
  nameWithType: StandardRuleKeeper.CopyWithNewReference
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_CopyWithNewReferences_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: StandardRuleKeeper.CopyWithNewReferences(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences*
  name: CopyWithNewReferences
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_CopyWithNewReferences_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.CopyWithNewReferences
  nameWithType: StandardRuleKeeper.CopyWithNewReferences
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  name: GetMissingValuesForBox(Int32)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetMissingValuesForBox_System_Int32_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox(System.Int32)
  nameWithType: StandardRuleKeeper.GetMissingValuesForBox(Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox*
  name: GetMissingValuesForBox
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetMissingValuesForBox_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForBox
  nameWithType: StandardRuleKeeper.GetMissingValuesForBox
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  name: GetMissingValuesForColumn(Int32)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetMissingValuesForColumn_System_Int32_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn(System.Int32)
  nameWithType: StandardRuleKeeper.GetMissingValuesForColumn(Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn*
  name: GetMissingValuesForColumn
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetMissingValuesForColumn_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForColumn
  nameWithType: StandardRuleKeeper.GetMissingValuesForColumn
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  name: GetMissingValuesForRow(Int32)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetMissingValuesForRow_System_Int32_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow(System.Int32)
  nameWithType: StandardRuleKeeper.GetMissingValuesForRow(Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow*
  name: GetMissingValuesForRow
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetMissingValuesForRow_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetMissingValuesForRow
  nameWithType: StandardRuleKeeper.GetMissingValuesForRow
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate@)
  name: GetPossibleValues(Coordinate)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetPossibleValues_SudokuSpice_Coordinate__
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate@)
  name.vb: GetPossibleValues(ByRef Coordinate)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(SudokuSpice.Coordinate)
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues(ByRef SudokuSpice.Coordinate)
  nameWithType: StandardRuleKeeper.GetPossibleValues(Coordinate)
  nameWithType.vb: StandardRuleKeeper.GetPossibleValues(ByRef Coordinate)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues*
  name: GetPossibleValues
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetPossibleValues_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetPossibleValues
  nameWithType: StandardRuleKeeper.GetPossibleValues
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  name: GetRules()
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetRules
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules()
  nameWithType: StandardRuleKeeper.GetRules()
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules*
  name: GetRules
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_GetRules_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.GetRules
  nameWithType: StandardRuleKeeper.GetRules
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32)
  name: Revert(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Revert_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Revert(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: StandardRuleKeeper.Revert(Coordinate, Int32)
  nameWithType.vb: StandardRuleKeeper.Revert(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Revert(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Revert_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Revert(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Revert(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: StandardRuleKeeper.Revert(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: StandardRuleKeeper.Revert(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Revert*
  name: Revert
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Revert_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.Revert
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Revert
  nameWithType: StandardRuleKeeper.Revert
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  name: TryInit(IReadOnlyPuzzle, BitVector)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_TryInit_SudokuSpice_IReadOnlyPuzzle_SudokuSpice_BitVector_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.IReadOnlyPuzzle,SudokuSpice.BitVector)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.IReadOnlyPuzzle, SudokuSpice.BitVector)
  nameWithType: StandardRuleKeeper.TryInit(IReadOnlyPuzzle, BitVector)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  name: TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_TryInit_SudokuSpice_RuleBased_IReadOnlyPuzzleWithMutablePossibleValues_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit(SudokuSpice.RuleBased.IReadOnlyPuzzleWithMutablePossibleValues)
  nameWithType: StandardRuleKeeper.TryInit(IReadOnlyPuzzleWithMutablePossibleValues)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit*
  name: TryInit
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_TryInit_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.TryInit
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TryInit
  nameWithType: StandardRuleKeeper.TryInit
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  name: TrySet(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_TrySet_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate@,System.Int32)
  name.vb: TrySet(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: StandardRuleKeeper.TrySet(Coordinate, Int32)
  nameWithType.vb: StandardRuleKeeper.TrySet(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet*
  name: TrySet
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_TrySet_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.TrySet
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.TrySet
  nameWithType: StandardRuleKeeper.TrySet
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  name: Unset(Coordinate, Int32)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Unset_SudokuSpice_Coordinate__System_Int32_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate@,System.Int32)
  name.vb: Unset(ByRef Coordinate, Int32)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Unset(SudokuSpice.Coordinate, System.Int32)
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Unset(ByRef SudokuSpice.Coordinate, System.Int32)
  nameWithType: StandardRuleKeeper.Unset(Coordinate, Int32)
  nameWithType.vb: StandardRuleKeeper.Unset(ByRef Coordinate, Int32)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Unset*
  name: Unset
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Unset_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.Unset
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Unset
  nameWithType: StandardRuleKeeper.Unset
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name: Update(Coordinate, Int32, CoordinateTracker)
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Update_SudokuSpice_Coordinate__System_Int32_SudokuSpice_CoordinateTracker_
  commentId: M:SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate@,System.Int32,SudokuSpice.CoordinateTracker)
  name.vb: Update(ByRef Coordinate, Int32, CoordinateTracker)
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Update(SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  fullName.vb: SudokuSpice.RuleBased.StandardRuleKeeper.Update(ByRef SudokuSpice.Coordinate, System.Int32, SudokuSpice.CoordinateTracker)
  nameWithType: StandardRuleKeeper.Update(Coordinate, Int32, CoordinateTracker)
  nameWithType.vb: StandardRuleKeeper.Update(ByRef Coordinate, Int32, CoordinateTracker)
- uid: SudokuSpice.RuleBased.StandardRuleKeeper.Update*
  name: Update
  href: api/SudokuSpice.RuleBased.StandardRuleKeeper.html#SudokuSpice_RuleBased_StandardRuleKeeper_Update_
  commentId: Overload:SudokuSpice.RuleBased.StandardRuleKeeper.Update
  isSpec: "True"
  fullName: SudokuSpice.RuleBased.StandardRuleKeeper.Update
  nameWithType: StandardRuleKeeper.Update
- uid: SudokuSpice.SolveStats
  name: SolveStats
  href: api/SudokuSpice.SolveStats.html
  commentId: T:SudokuSpice.SolveStats
  fullName: SudokuSpice.SolveStats
  nameWithType: SolveStats
- uid: SudokuSpice.SolveStats.Equals(SudokuSpice.SolveStats)
  name: Equals(SolveStats)
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_Equals_SudokuSpice_SolveStats_
  commentId: M:SudokuSpice.SolveStats.Equals(SudokuSpice.SolveStats)
  fullName: SudokuSpice.SolveStats.Equals(SudokuSpice.SolveStats)
  nameWithType: SolveStats.Equals(SolveStats)
- uid: SudokuSpice.SolveStats.Equals(System.Nullable{System.Object})
  name: Equals(Nullable<Object>)
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_Equals_System_Nullable_System_Object__
  commentId: M:SudokuSpice.SolveStats.Equals(System.Nullable{System.Object})
  name.vb: Equals(Nullable(Of Object))
  fullName: SudokuSpice.SolveStats.Equals(System.Nullable<System.Object>)
  fullName.vb: SudokuSpice.SolveStats.Equals(System.Nullable(Of System.Object))
  nameWithType: SolveStats.Equals(Nullable<Object>)
  nameWithType.vb: SolveStats.Equals(Nullable(Of Object))
- uid: SudokuSpice.SolveStats.Equals*
  name: Equals
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_Equals_
  commentId: Overload:SudokuSpice.SolveStats.Equals
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.Equals
  nameWithType: SolveStats.Equals
- uid: SudokuSpice.SolveStats.GetHashCode
  name: GetHashCode()
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_GetHashCode
  commentId: M:SudokuSpice.SolveStats.GetHashCode
  fullName: SudokuSpice.SolveStats.GetHashCode()
  nameWithType: SolveStats.GetHashCode()
- uid: SudokuSpice.SolveStats.GetHashCode*
  name: GetHashCode
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_GetHashCode_
  commentId: Overload:SudokuSpice.SolveStats.GetHashCode
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.GetHashCode
  nameWithType: SolveStats.GetHashCode
- uid: SudokuSpice.SolveStats.NumSolutionsFound
  name: NumSolutionsFound
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_NumSolutionsFound
  commentId: P:SudokuSpice.SolveStats.NumSolutionsFound
  fullName: SudokuSpice.SolveStats.NumSolutionsFound
  nameWithType: SolveStats.NumSolutionsFound
- uid: SudokuSpice.SolveStats.NumSolutionsFound*
  name: NumSolutionsFound
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_NumSolutionsFound_
  commentId: Overload:SudokuSpice.SolveStats.NumSolutionsFound
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.NumSolutionsFound
  nameWithType: SolveStats.NumSolutionsFound
- uid: SudokuSpice.SolveStats.NumSquaresGuessed
  name: NumSquaresGuessed
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_NumSquaresGuessed
  commentId: P:SudokuSpice.SolveStats.NumSquaresGuessed
  fullName: SudokuSpice.SolveStats.NumSquaresGuessed
  nameWithType: SolveStats.NumSquaresGuessed
- uid: SudokuSpice.SolveStats.NumSquaresGuessed*
  name: NumSquaresGuessed
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_NumSquaresGuessed_
  commentId: Overload:SudokuSpice.SolveStats.NumSquaresGuessed
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.NumSquaresGuessed
  nameWithType: SolveStats.NumSquaresGuessed
- uid: SudokuSpice.SolveStats.NumTotalGuesses
  name: NumTotalGuesses
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_NumTotalGuesses
  commentId: P:SudokuSpice.SolveStats.NumTotalGuesses
  fullName: SudokuSpice.SolveStats.NumTotalGuesses
  nameWithType: SolveStats.NumTotalGuesses
- uid: SudokuSpice.SolveStats.NumTotalGuesses*
  name: NumTotalGuesses
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_NumTotalGuesses_
  commentId: Overload:SudokuSpice.SolveStats.NumTotalGuesses
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.NumTotalGuesses
  nameWithType: SolveStats.NumTotalGuesses
- uid: SudokuSpice.SolveStats.op_Equality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  name: Equality(SolveStats, SolveStats)
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_op_Equality_SudokuSpice_SolveStats_SudokuSpice_SolveStats_
  commentId: M:SudokuSpice.SolveStats.op_Equality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  fullName: SudokuSpice.SolveStats.Equality(SudokuSpice.SolveStats, SudokuSpice.SolveStats)
  nameWithType: SolveStats.Equality(SolveStats, SolveStats)
- uid: SudokuSpice.SolveStats.op_Equality*
  name: Equality
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_op_Equality_
  commentId: Overload:SudokuSpice.SolveStats.op_Equality
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.Equality
  nameWithType: SolveStats.Equality
- uid: SudokuSpice.SolveStats.op_Inequality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  name: Inequality(SolveStats, SolveStats)
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_op_Inequality_SudokuSpice_SolveStats_SudokuSpice_SolveStats_
  commentId: M:SudokuSpice.SolveStats.op_Inequality(SudokuSpice.SolveStats,SudokuSpice.SolveStats)
  fullName: SudokuSpice.SolveStats.Inequality(SudokuSpice.SolveStats, SudokuSpice.SolveStats)
  nameWithType: SolveStats.Inequality(SolveStats, SolveStats)
- uid: SudokuSpice.SolveStats.op_Inequality*
  name: Inequality
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_op_Inequality_
  commentId: Overload:SudokuSpice.SolveStats.op_Inequality
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.Inequality
  nameWithType: SolveStats.Inequality
- uid: SudokuSpice.SolveStats.ToString
  name: ToString()
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_ToString
  commentId: M:SudokuSpice.SolveStats.ToString
  fullName: SudokuSpice.SolveStats.ToString()
  nameWithType: SolveStats.ToString()
- uid: SudokuSpice.SolveStats.ToString*
  name: ToString
  href: api/SudokuSpice.SolveStats.html#SudokuSpice_SolveStats_ToString_
  commentId: Overload:SudokuSpice.SolveStats.ToString
  isSpec: "True"
  fullName: SudokuSpice.SolveStats.ToString
  nameWithType: SolveStats.ToString
- uid: SudokuSpice.Spans
  name: Spans
  href: api/SudokuSpice.Spans.html
  commentId: T:SudokuSpice.Spans
  fullName: SudokuSpice.Spans
  nameWithType: Spans
- uid: SudokuSpice.Spans.PopRandom*
  name: PopRandom
  href: api/SudokuSpice.Spans.html#SudokuSpice_Spans_PopRandom_
  commentId: Overload:SudokuSpice.Spans.PopRandom
  isSpec: "True"
  fullName: SudokuSpice.Spans.PopRandom
  nameWithType: Spans.PopRandom
- uid: SudokuSpice.Spans.PopRandom``1(Random,Span{``0})
  name: PopRandom<T>(Random, Span<T>)
  href: api/SudokuSpice.Spans.html#SudokuSpice_Spans_PopRandom__1_Random_Span___0__
  commentId: M:SudokuSpice.Spans.PopRandom``1(Random,Span{``0})
  name.vb: PopRandom(Of T)(Random, Span(Of T))
  fullName: SudokuSpice.Spans.PopRandom<T>(Random, Span<T>)
  fullName.vb: SudokuSpice.Spans.PopRandom(Of T)(Random, Span(Of T))
  nameWithType: Spans.PopRandom<T>(Random, Span<T>)
  nameWithType.vb: Spans.PopRandom(Of T)(Random, Span(Of T))
